searchState.loadedDescShard("rerun", 11, "Wrapping exponentiation operation\nChecked subtraction operation\nWrapping subtraction operation\nConverts this instance into a byte slice\nConvert native type to i64.\nConvert native type to isize.\nConvert native type to usize.\nConvert from usize according to the <code>as</code> operator\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nError when an arithmetic operation overflows.\nMany different operations in the <code>arrow</code> crate return this …\nError during import or export to/from the C Data Interface\nError during casting from one type to another.\nError during computation.\nError during CSV-related operations.\nError when a dictionary key is bigger than the key type\nError during division by zero.\nContains the error value\nWraps an external error.\nError indicating that an unexpected or bad argument was …\nError during IO operations.\nError during IPC operations in <code>arrow-ipc</code> or <code>arrow-flight</code>.\nError during JSON-related operations.\nMemory or buffer error.\nReturned when functionality is not yet available.\nContains the success value\nError during Parquet operations.\nError during parsing from a string.\nA specialized <code>Result</code> type for Arrow operations.\nError when the run end index in a REE array is bigger than …\nError during schema-related operations.\nOpaque binary data\nLogically the same as Binary, but the internal …\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nFor sending dictionary encoding information. Any Field can …\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nData structures for describing a table row batch (a …\nArrow File metadata\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThe root Message type This union enables us to easily send …\nThese are stored in the flatbuffer in the Type union below\nA data header describing the shared memory layout of a “…\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nA Struct_ in the flatbuffer metadata is the same as an …\nData structures for dense tensors Shape data for a single …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nUtilities for converting between IPC types and native …\nGenerated code\nArrow IPC File and Stream Readers\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nArrow IPC File and Stream Writers\nLow level Arrow Schema to IPC bytes converter\nAn owned container for a validated <code>Message</code>\nDeserialize an ipc crate::Schema` from flat buffers to an …\nPush a key-value metadata into a FlatBufferBuilder and …\nSerialize a schema in IPC format\nAdds a Schema to a flatbuffer and returns the offset\nTry deserialize flat buffer format bytes into a schema\nTry deserialize the IPC format bytes into a schema\nArrow File metadata\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nFor sending dictionary encoding information. Any Field can …\nData structures for describing a table row batch (a …\nThe root Message type This union enables us to easily send …\nA data header describing the shared memory layout of a “…\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOpaque binary data\nLogically the same as Binary, but the internal …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThese are stored in the flatbuffer in the Type union below\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nA Struct_ in the flatbuffer metadata is the same as an …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nData structures for dense tensors Shape data for a single …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nA low-level, push-based interface for reading an IPC file\nArrow File reader\nBuild an Arrow <code>FileReader</code> with custom options.\nA low-level interface for reading <code>RecordBatch</code> data from a …\nArrow Stream reader\nRead the dictionary from the buffer and provided metadata, …\nRead the footer length from the last 10 bytes of an Arrow …\nCreates a record batch from binary data using the …\nKeeps track of dictionaries that have been written, to …\nStores the encoded data, which is an crate::Message, and …\nWriter for an IPC file\nHandles low level details of encoding <code>Array</code> and <code>Schema</code> …\nIPC write options used to control the behaviour of the …\nWriter for an IPC stream\nArrow buffers to be written, should be an empty vec for …\nAn encoded crate::Message\nWrite a message’s IPC data and buffers, returning …\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nConvert a Python object to an arrow-rs type.\nConvert the implemented type into a Python object while …\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nMatch field names of structs and lists. If set to <code>true</code>, …\nReads the next <code>RecordBatch</code>.\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nEncode dictionary values not preserving the dictionary …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nConverts numeric type to a <code>String</code>\nA writer that allows writing to a <code>String</code> like an …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n64-bit hash.\nReturns the argument unchanged.\nFrom an existing u64. Use this only for data conversions.\nCalls <code>U::from(self)</code>.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nInstall this as the global allocator to get memory usage …\nPer-callstack statistics.\nNumber of allocation and their total size.\nTracks memory use over time.\nRepresents a limit in how much RAM to use for the entire …\nHow much RAM is the application using?\nHelper to warn if we are using too much RAM.\nFormatted backtrace.\nTrack allocations and memory use.\nAdd an allocation.\nAdd data to history\nRead the current memory of the running application.\nNumber of allocations.\nBytes used by the application according to our own memory …\nBytes used by the application according to our own memory …\nBytes used by the blueprint store according to its own …\nVRAM bytes used by the application according to its own …\nBytes used by the primary caches according to their own …\nBytes used by the datastore according to its own …\nLive allocations at this callstack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAll live largish allocations, fully tracked.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimit in bytes.\nAll live allocations used for internal book-keeping.\nFor when we print this statistic.\nBytes allocated by the application according to operating …\nBytes allocated by the application according to operating …\nNumber of bytes.\nIf this was stochastically sampled - at what rate?\nAll live allocations sampled of medium size, …\nRemove an allocation.\nThe most popular callstacks.\nAmount of available RAM on this machine.\nAllocations smaller than these are left untracked.\nAll live allocations that we are NOT tracking (because …\nWarns if we have exceeded the limit.\nBytes used by the application according to our best …\nUtitility functions\nInstall this as the global allocator to get memory usage …\nAll live largish allocations, fully tracked.\nTotal number of live allocations, and the number of live …\nAre we doing (slightly expensive) tracking of the …\nAll live allocations used for internal book-keeping.\nShould we do (slightly expensive) tracking of the …\nAll live allocations sampled of medium size, …\nThe most popular callstacks.\nAllocations smaller than these are left untracked.\nGather statistics from the live tracking, if enabled.\nTurn on callstack tracking (slightly expensive) if a given …\nAll live allocations that we are NOT tracking (because …\nReturns monotonically increasing time in seconds.\nStats for a single <code>crate::RangeCache</code>.\nStats for all primary caches.\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nContains the error value\nResults for a latest-at query.\nContains the success value\nA ref-counted, inner-mutable handle to a <code>QueryCache</code>.\nUniquely identifies cached query results in the <code>QueryCache</code>.\nResults for a range query.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nKeeps track of handles towards a <code>ChunkStore</code> and its …\nAnything that can expose references to a <code>ChunkStore</code> and …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nResults for each individual component.\nResults for each individual component.\nThe compound index of this query result.\nThe associated <code>EntityPath</code>.\nThe query that yielded these results.\nThe query that yielded these results.\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nWhat is the actual size of this cache after deduplication?\nHow many chunks in the cache?\nWhat would be the size of this cache in the worst case, …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nThis format is used for space-efficient color …\nLike <code>GpuMeshInstance</code>, but for CPU sided usage in a <code>CpuModel</code>…\nA collection of meshes &amp; mesh instances on the CPU.\nKey for identifying a cpu mesh in a model.\nDefault value for clearing depth buffer to infinity.\nLabel for resources. Optimized out in release builds.\nDepth offset used to resolve z-fighting between 2D …\nThe <code>FileResolver</code> handles both resolving import clauses and …\nA file server capable of watching filesystem events in the …\nA very limited filesystem, just enough for our internal …\nIdentifier used to identify a buffer upon retrieval of the …\nsRGB gray gradient = perceptually even\nHue, saturation, value, alpha. All in the range [0, 1]. No …\nNo-op rect transform that transforms from a unit rectangle …\nA pre-parsed import clause, as in <code>#import &lt;something&gt;</code>.\nBuilder for a vector of line strips, making it easy to …\nUse this color state when targeting the main target with …\nColor format used for the main target of the view builder.\nDefault depth state for enabled depth write &amp; read.\nDefault multisample state that any <code>wgpu::RenderPipeline</code> …\nDepth format used for the main target of the view builder.\nEnable MSAA always. This makes our pipeline less variable …\nRadius of length 1 in ui points.\nWhat outline (if any) should be drawn.\nThe depth format used for the picking layer - f32 makes it …\nThe texture format used for the picking layer.\nCombination of <code>PickingLayerObjectId</code> and …\nThe second 64bit of the picking layer.\nThe first 64bit of the picking layer.\nManages the rendering of the picking layer pass, its …\nBuilder for point clouds, making it easy to create …\nType erased draw data that can be submitted directly to …\nThe recommended <code>FileResolver</code> type for the current …\nA 2D rectangle with float coordinates.\nA 2D rectangle with integer coordinates.\nDefines a transformation from a rectangular region of …\nAny resource involving wgpu rendering which can be re-used …\n0-1 linear space <code>RGBA</code> color with premultiplied alpha.\nRGBA color in sRGB gamma space, with separate/unmultiplied …\nThe texture format used for screenshots.\nThe texture format used for screenshots.\nSpecifies where to look for imports when both absolute and …\nA size of something in either scene units or ui points.\nUtility for dealing with buffers containing raw 2D texture …\nThe unit rectangle, defined as (0, 0) - (1, 1).\nThe highest level rendering block in <code>re_renderer</code>. Used to …\nZero radius.\nalpha 0-1. A negative value signifies an additive color …\nReturns the global frame index of the active frame.\nA human-readable summary about an adapter\nAdd several 3D points\nAdds several 2D points (assumes Z=0). Uses an …\nAdds a new <code>CpuMesh</code> to the model, creating a single …\nStart of a new batch.\nStart of a new batch.\nCall this at the end of a frame but before submitting …\nCall this at the beginning of a new frame.\nSize required for a padded buffer as it is read/written …\nSize required for an unpadded buffer.\nHow many bytes per row are required to be allocated in …\nHow many bytes per row contain actual data.\nCoalesces all filesystem events since the last call to …\nPremultiplied RGBA color for the first outline layer.\nPremultiplied RGBA color for the second outline layer.\nReturns a gamma-space sRGB in 0-255 range. This is a …\nReturns sRGB polynomial approximation from Inferno color …\nReturns sRGB polynomial approximation from Magma color …\nReturns sRGB polynomial approximation from Plasma color …\nReturns sRGB polynomial approximation from Turbo color …\nReturns sRGB polynomial approximation from Viridis color …\nComposites the final result of a <code>ViewBuilder</code> to a given …\nSets the depth offset for the entire batch.\nReturns the device’s capabilities.\nDraws the frame as instructed to a temporary HDR target.\nThe size of the rectangle.\nThe size of the rectangle. Supposed to be positive.\nAdds (!) flags to the line strip.\nAdds (!) flags for this batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>CpuModel</code> from a single <code>CpuMesh</code>, creating a …\nReturns a reference to the global <code>FileServer</code>.\nReturns the recommended filesystem handle for the current …\nReturns a mutable reference to the global <code>FileServer</code>.\nReturns an sRGB gray value, assuming <code>t</code> is normalized.\nhue 0-1\nA macro to read the contents of a file on disk, and …\nCreate a shader module using the <code>include_file!</code> macro and …\nInsert a path into search path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinalizes the builder and returns a line draw data with …\nFinalizes the builder and returns a point cloud draw data …\nConverts the entire model into a serious of mesh instances …\nReturns an iterator over the directories in the search …\nThe corner with the smallest coordinates.\nThe corner with the smallest coordinates.\nNew picking layer for a given screen.\nRetrieves 2D texture buffer info for a given format &amp; …\nReturns the recommended <code>FileResolver</code> for the current …\nCreates a new size in scene units.\nCreates a new size in ui point units.\nReturns the oldest received picking results for a given …\nReturns the oldest received screenshot results for a given …\nSets an individual outline mask ids. Note that this has a …\nSets an outline mask for every element in the batch.\nOutline radius for both layers in pixels. Fractional …\nReturns the final output format for color (i.e. the surface…\nPad <code>RGB</code> to <code>RGBA</code> with the given alpha.\nSets the picking object id for the current batch.\nPush a path to search path.\nPushes additional outline mask ids for a specific range of …\nBoosts the size of the points by the given amount of …\nBoosts the size of the points by the given amount of …\nThe full scene.\nThe region of the scene that should be visible.\nRemoves the padding from a buffer containing gpu texture …\nRemoves the padding from a buffer containing gpu texture …\nGets a renderer with the specified type, initializing it …\nReturns number of points that can be added without …\nReturns number of strips that can be added without …\nReturns number of vertices that can be added without …\nResolution in pixels as configured on view builder …\nResource managers are concerned with mapping (typically) …\nsaturation 0-1\nGet the scene-size of this, if stored as a scene size.\nSchedules the readback of a rectangle from the picking …\nSchedules the taking of a screenshot.\nComputes a transformation matrix that applies the rect …\nGet the point size of this, if stored as a point size.\nStops watching for file events at the given <code>path</code>.\nvalue 0-1\nStarts watching for file events at the given <code>path</code>.\nUses current outline and falls back to <code>other</code> if current is …\nSets the <code>world_from_obj</code> matrix for the <em>entire</em> batch.\nCapabilities of a given device.\nDevice tiers <code>re_renderer</code> distinguishes.\nFull support of WebGPU spec without additional feature …\nLimited feature support as provided by WebGL and some …\nType of Wgpu backend.\nBackend implemented via wgpu-core.\nWgpu backend type.\nCheck whether the given downlevel caps are sufficient for …\nDevice descriptor compatible with the given device tier.\nRequired features for the given device tier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPicks the highest possible tier for a given adapter.\nPicks the highest possible tier for a given adapter, but …\nReturns an instance descriptor with settings preferred by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWgpu limits required by the given device tier.\nMaximum buffer size in bytes.\nMaximum texture dimension in pixels in both width and …\nGenerous parsing of a graphics backend string.\nDownlevel features required by the given tier.\nSelects an adapter for testing, preferring software …\nWhether the current device tier supports reading back …\nWhether the current device tier supports sampling from …\nBackends that are officially supported by <code>re_renderer</code>.\nReturns an instance descriptor that is suitable for …\nValidates that the given backend is applicable for the …\nOne chunk of encoded video data, representing a single …\nConfiguration of a video.\nOne decoded video frame.\nPixel format/layout used by <code>FrameContent::data</code>.\nA single sample in a video.\nMeta informationa about the video samples.\nA value in time units.\nThe number of time units per second.\nNot used in <code>re_video</code> itself, but useful for media type …\nDecoded video data.\nErrors that can occur when loading a video.\nPer color component bit depth.\nReturns information about this crate\nLength of sample starting at <code>Sample::byte_offset</code>.\nOffset into the video data.\nNatural height of the video.\nNatural width of the video.\nVideo frame decoding.\nDecode timestamp of this sample. Chunks are expected to be …\nTime at which this sample appears in the decoded …\nVideo demultiplexing.\nCodec-specific configuration.\nNatural width and height of the video\nWhether all decode timestamps are equal to presentation …\nConvert to a duration\nLength of the video.\nDuration of the video, in time units.\nDuration of the sample, in time units.\nWhich frame does this chunk belong to?\nWhich frame does this sample belong to?\nDetermines the video timestamps of all frames inside a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the sample from the video data.\nFor a given decode (!) timestamp, return the index of the …\nFor a given presentation timestamp, return the index of …\nWe split video into GOPs, each beginning with a key frame, …\nIf <code>dts_always_equal_pts</code> is false, then this gives for each …\nNatural height of the video.\nThe codec used to encode the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns None if the mp4 doesn’t specify whether the …\nThe start of a new <code>crate::demux::GroupOfPictures</code>?\nIs this the start of a new <code>GroupOfPictures</code>?\nFor a given presentation timestamp, return the index of …\nLoads a video from the given data.\nAll the tracks in the mp4; not just the video track.\nCreate a new value in <em>time units</em>.\nThe number of samples in the video.\nPresentation timestamp for the sample in this chunk. Often …\nTime at which this sample appears in the frame stream, in …\nWhich sample (frame) did this chunk come from?\nWhich sample is this in the video?\nSamples contain the byte offsets into <code>data</code> for each frame.\nMeta information about the samples.\nContains info about the codec, bit depth, etc.\nReturns the subsampling mode of the video.\nHow many time units are there per second.\nNatural width of the video.\nInterface for an asynchronous video decoder.\nMay use hardware acceleration if available and compatible …\nOne chunk of encoded video data, representing a single …\nHow the video should be decoded.\nSettings for video decoding.\nContains the error value\nA successfully parsed <code>FFmpeg</code> version.\nOne decoded video frame.\nData for a decoded frame on native targets.\nMeta information about a decoded video frame, as reported …\nInterpret YUV as GBR.\nContains the success value\nPixel format/layout used by <code>FrameContent::data</code>.\nShould use a hardware decoder.\nShould use a software decoder even if hardware …\nYuv matrix coefficients used by <code>PixelFormat::Yuv</code>.\nPixel layout used by <code>PixelFormat::Yuv</code>.\nYuv value range used by <code>PixelFormat::Yuv</code>.\nDecode timestamp of this sample. Chunks are expected to be …\nHow long the frame is valid.\nCalled after submitting the last chunk.\nDownload URL for the latest version of <code>FFmpeg</code> on the …\nCustom path for the ffmpeg binary.\nLike <code>Self::for_executable_poll</code>, but blocks until the …\nTry to parse the <code>FFmpeg</code> version for a given <code>FFmpeg</code> …\nWhich frame does this chunk belong to?\nWhich frame is this?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow the video should be decoded.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this version is compatible with Rerun’s …\nThe start of a new <code>crate::demux::GroupOfPictures</code>?\nThe start of a new <code>crate::demux::GroupOfPictures</code>?\nThe decode timestamp of the last chunk that was needed to …\nCreates a new async decoder for the given <code>video</code> data.\nPresentation timestamp range in which this frame is valid.\nPresentation timestamp for the sample in this chunk. Often …\nThe presentation timestamp of the frame.\nResets the decoder.\nWhich sample (frame) did this chunk come from?\nWhich sample in the video is this from?\nSubmits a chunk for decoding in the background.\nConfiguration of a video.\nA Group of Pictures (GOP) always starts with an I-frame, …\nA single sample in a video.\nMeta informationa about the video samples.\nNot used in <code>re_video</code> itself, but useful for media type …\nDecoded video data.\nErrors that can occur when loading a video.\nSubsampling in both X and Y.\nSubsampling in X only.\nNo subsampling.\nLength of sample starting at <code>Sample::byte_offset</code>.\nOffset into the video data.\nNatural height of the video.\nNatural width of the video.\nDecode timestamp of the first sample in this GOP, in time …\nTime at which this sample appears in the decoded …\nCodec-specific configuration.\nWhether all decode timestamps are equal to presentation …\nDuration of the video, in time units.\nDuration of the sample, in time units.\nWhich frame does this sample belong to?\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe split video into GOPs, each beginning with a key frame, …\nIf <code>dts_always_equal_pts</code> is false, then this gives for each …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this the start of a new <code>GroupOfPictures</code>?\nReturns the index of:\nAll the tracks in the mp4; not just the video track.\nTime at which this sample appears in the frame stream, in …\nWhich sample is this in the video?\nRange of samples contained in this GOP.\nThe GOP’s <code>sample_range</code> mapped to <code>usize</code> for slicing.\nSamples contain the byte offsets into <code>data</code> for each frame.\nMeta information about the samples.\nContains info about the codec, bit depth, etc.\nHow many time units are there per second.\nLike <code>GpuMeshInstance</code>, but for CPU sided usage in a <code>CpuModel</code>…\nA collection of meshes &amp; mesh instances on the CPU.\nKey for identifying a cpu mesh in a model.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads both gltf and glb into the mesh &amp; texture manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad a Wavefront .obj file into the mesh &amp; texture manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad a STL .stl file into the mesh manager.\nBase color texture, also known as albedo. (not optional, …\nFactor applied to the decoded albedo color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex range within the owning <code>CpuMesh</code> that should be …\nIndex range within the owning <code>CpuMesh</code> that should be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvery mesh has at least one material.\nDefines how mesh vertices are built.\nNon-empty array of vertex triangle indices.\nBuffer for all vertex data, subdivided in several sections …\nPer-vertex albedo color. Must be equal in length to …\nMust be equal in length to <code>Self::vertex_positions</code>. Use …\nNon-empty array of vertex positions.\nMust be equal in length to <code>Self::vertex_positions</code>.\nNext vertex attribute index that can be used for another …\nVertex buffer layouts describing how vertex data should be …\nDo BGR(A)-&gt;RGB(A) conversion is in the shader.\nHow to map the normalized <code>.r</code> component to a color.\nDescribes a texture and how to map it to a color.\nDebug overlay for quick &amp; dirty display of texture …\nGPU sided data used by a <code>Renderer</code> to draw things to the …\nCombination of flags to extend lines outwards with round …\nBy default, line caps end at the last/first position of …\nAdds a round cap at the end of a line strip (excludes …\nPuts a equilateral triangle at the end of the line strip …\nBy default, line caps end at the last/first position of …\nAdds a round cap at the start of a line strip (excludes …\nPuts a equilateral triangle at the start of the line strip …\nEnable color gradient across the line.\nIf true, draw 2D camera facing circles instead of spheres.\nIf true, we shade all points in the batch like spheres.\nForces spanning the line’s quads as-if the camera was …\nApply the given function.\nThe type of generic skybox to render.\nData that is valid for a batch of line strips.\nA line drawing operation. Encompasses several lines, each …\nProperty flags for a line strip\nColormapping is off. Take the .r color and splat onto rgb.\nColormapping is off. Keep rgb as is.\nProperty flags for a point batch\nData that is valid for a batch of point cloud points.\nA point cloud drawing operation. Expected to be recreated …\nA Renderer encapsulate the knowledge of how to render a …\nDescribes how the color information is encoded in the …\nLook up the color in this texture.\nTexture filter setting for magnification (a texel covers …\nTexture filter setting for minification (several texels …\nConfiguration for the world grid renderer.\nDraw data for a world grid renderer.\nDefines an outline mask for an individual vertex ranges …\nDefines an outline mask for an individual vertex ranges.\nPer-instance (as opposed to per-material/mesh!) tint color …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe color of the grid lines.\nFor any one-component texture, you need to supply a color …\nConfigures color mapping mode.\nTexture that fills the rectangle\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDecode 0-1 sRGB gamma values to linear space before …\nThe intrinsics of the camera used for the projection.\nThe dimensions of the depth texture in pixels.\nDepth offset applied after projection.\nDepth offset applied after projection.\nThe actual data from the depth texture.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCalled once per phase given by …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVector that spans up the rectangle from its top left …\nVector that spans up the rectangle from its top left …\nAdditional properties of this point cloud batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nAssumes a separate/unmultiplied alpha.\nRaise the normalized values to this power (before any …\nGpu mesh used by this instance\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nNumber of vertices covered by this batch.\nThe minimum and maximum depth value in world-space, for …\nTint that is multiplied to the rect, supports …\nMultiply color channels with the alpha channel before …\nCreates a new instance of a mesh with all fields set to …\nTransforms and uploads line strip data to be consumed by …\nTransforms and uploads point cloud data to be consumed by …\nTransforms and uploads mesh instance data to be consumed …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOptional outline mask.\nOption outline mask id preference.\nOptional outline mask setting for this instance.\nOptional outline mask setting for the entire batch.\nOptional outline mask setting for the entire batch.\nCombination of flags indicating in which phases …\nPicking layer id.\nPicking object id that applies for the entire batch.\nPicking object id that applies for the entire batch.\nPicking object id that applies for the entire depth cloud.\nThe plane in which the grid lines are drawn.\nNumber of points covered by this batch.\nPoint radius is calculated as world-space depth times this …\nMin/max range of the values in the texture.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGets or creates a vertex shader module for drawing a …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nFor textures that need decoding in the shader, for example …\nHow far apart the closest sets of lines are.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHow thick the lines are in UI units.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTop left corner position in world space.\nLength factor as multiple of a line’s radius applied to …\nWidth factor as multiple of a line’s radius applied to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMultiplier to get world-space depth from whatever is in …\nWhere this instance is placed in world space and how its …\nTransformation applies to line positions\nTransformation applies to point positions\nThe extrinsics of the camera used for the projection, with …\nWorld-space bounding-box.\nNumber of sentinel vertices, one at the start and one at …\nPosition and radius.\nSentinel vertex used at the start and the end of the line …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRadius of the point in world space\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nSomething went wrong in a user-callback.\nUse full range YUV with all components ranging from 0 to …\nHandle to a 2D resource.\nIdentity matrix, interpret YUV as GBR.\nDescribes image data for the purpose of creating a 2D …\nError that can occur when converting image data to a …\nSomething went wrong when creating the GPU texture &amp; …\nUse limited range YUV, i.e. for 8bit data, Y is valid in […\nImage data format that can be converted to a wgpu texture.\nTexture manager for 2D textures.\nThe source format is already in a wgpu compatible format.\n4:0:0, single plane of chroma only. Also known as I400\nYUV 4:2:2 subsampling, single plane.\n4:2:0 subsampling with a separate Y plane, followed by a …\n4:2:0 subsampling with 3 separate planes. Also known as …\n4:2:2 subsampling with 3 separate planes. Also known as …\n4:4:4 no chroma downsampling with 3 separate planes. Also …\nYUV (== <code>YCbCr</code>) formats, typically using chroma …\nYuv matrix coefficients that determine how a YUV image is …\nSupported chroma subsampling input formats.\nExpected range of YUV values.\nCreates a new 2D texture resource and schedules data …\nCreates a texture that can hold the image data.\nData for the highest mipmap level.\nWhat format the input data texture is expected to be in.\nGiven the dimensions of the output picture, what are the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new 2D texture resource and schedules data …\nCreates a new 2D texture resource and schedules data …\nCreates a new 2D texture resource and schedules data …\nHeight of the texture.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this desc is not used for a texture update, this label …\nReturns <code>None</code> if the <code>texture</code> is not 2D.\nSize of the buffer needed to create the data texture, i.e. …\nThe texture format required in order to store this image …\nThe texture usages required in order to store this image …\nTakes raw image data and transfers &amp; converts it to a GPU …\nReturns a single pixel white pixel with an rgba8unorm …\nReturns a single pixel white pixel with an rgba8unorm …\nWidth of the texture.\nWidth and height of the texture.\nThe size of the resulting output texture / the semantic …\nReturns a single zero pixel with format …\nReturns a single zero pixel with format …\nReturns a single zero pixel with format …\nUtility for dealing with buffers containing raw 2D texture …\nSize required for a padded buffer as it is read/written …\nSize required for an unpadded buffer.\nHow many bytes per row are required to be allocated in …\nHow many bytes per row contain actual data.\ne.g. bad mp4, or bug in mp4 parse\ne.g. unsupported codec\ne.g. unsupported codec\ne.g. unsupported codec\nContains the error value\nContains the success value\nVideo data + decoder(s).\nInformation about the status of a frame decoding.\nError that can occur during playing videos.\nIdentifier for an independent video decoding stream.\nThe video data\nReturns a texture with the latest frame at the given time …\nMeta information about the decoded frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNatural height of the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, the texture is outdated. Keep polling for a fresh …\nLoads a video from the given data.\nRemoves all decoders that have been unused in the last …\nIf true, this texture is so out-dated that it should have …\nFormat information about the original data from the video …\nThe texture to show.\nNatural width of the video.\nPuts the view space origin into the middle of the screen.\nOrthographic projection with the camera position at the …\nConfigures the camera placement in the orthographic …\nPerspective camera looking along the negative z view space …\nHow we project from 3D to 2D.\n<code>ViewBuilder</code> that can be shared between threads.\nBasic configuration for a target view.\nPuts the view space origin at the top-left corner of the …\nThe highest level rendering block in <code>re_renderer</code>. Used to …\nIf true, the <code>composite</code> step will blend the image with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many pixels are there per point.\nThe viewport resolution in physical pixels.\nDefines a viewport transformation from the projected space …\nAspect ratio of the perspective transformation.\nDistance of the far plane to the camera.\nDistance of the near plane.\nViewing angle in view space y direction (which is the …\nSize of the orthographic camera view space y direction …\nSend <code>LogMsg</code>es to a server over TCP.\nServer connection error.\nComes after version.\nAdded <code>PROTOCOL_HEADER</code>. Introduced for Rerun 0.16.\nThe default amount of time to wait for the TCP connection …\nThe default address of a Rerun TCP server which an SDK …\nWait until everything has been sent.\nSwitch to a mode where we drop messages if disconnected.\nStall until all messages so far has been sent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the latency in the <code>LogMsg</code> channel is greater than this, …\nConnect via TCP to this log server.\nTurns <code>info</code>-level logs into <code>debug</code>-level logs.\nListen to multiple SDK:s connecting to us over TCP.\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nRotation defined with an axis and an angle.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nRotation defined by a quaternion.\nA 3D rotation.\nThe serialized contents of a <code>ComponentBatch</code> with …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nDeprecated. Do not use. See …\nExposes the object’s contents as a set of …\nThe component data.\nThe blueprint-specific components.\nSemantic name associated with this data.\nComponents are the basic building blocks of <code>archetypes</code>.\nThe low-level datatypes that <code>components</code> are built from.\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nRe-exports of external crates that are used throughout the …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nImage-related utilities.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nUseful macro for statically asserting that a <code>struct</code> …\nInternal helpers; not part of the public API.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes the batch into an Arrow2 array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nThe format of the image.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\nThe blueprint-specific archetypes.\nThe blueprint-specific components.\nThe blueprint-specific datatypes.\nThe blueprint-specific views.\n<strong>Archetype</strong>: Configuration for the background of a view.\n<strong>Archetype</strong>: The description of a container.\n<strong>Archetype</strong>: The query for the dataframe view.\n<strong>Archetype</strong>: Tries to move the center of mass of the graph …\n<strong>Archetype</strong>: Resolves collisions between the bounding …\n<strong>Archetype</strong>: Aims to achieve a target distance between two …\n<strong>Archetype</strong>: A force between each pair of nodes that …\n<strong>Archetype</strong>: Similar to gravity, this force pulls nodes …\n<strong>Archetype</strong>: Configuration for the 3D line grid.\n<strong>Archetype</strong>: Configuration for the background map of the map …\n<strong>Archetype</strong>: Configuration of the map view zoom level.\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Controls the distance to the near clip plane in …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\n<strong>Archetype</strong>: Configuration for the legend of a plot.\n<strong>Archetype</strong>: Configuration for the scalar axis of a plot.\n<strong>Archetype</strong>: Configures how tensor scalars are mapped to …\n<strong>Archetype</strong>: Specifies a 2D slice of a tensor.\n<strong>Archetype</strong>: Configures how a selected tensor slice is shown …\n<strong>Archetype</strong>: The description of a single view.\n<strong>Archetype</strong>: The contents of a <code>View</code>.\n<strong>Archetype</strong>: The top-level description of the viewport.\n<strong>Archetype</strong>: Configures what range of each timeline is shown …\n<strong>Archetype</strong>: Controls the visual bounds of a 2D view.\nWhich tab is active.\nShould empty cells be filled with latest-at queries?\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nThe class of the view.\nClear all the fields of a <code>Background</code>.\nClear all the fields of a <code>ContainerBlueprint</code>.\nClear all the fields of a <code>DataframeQuery</code>.\nClear all the fields of a <code>ForceCenter</code>.\nClear all the fields of a <code>ForceCollisionRadius</code>.\nClear all the fields of a <code>ForceLink</code>.\nClear all the fields of a <code>ForceManyBody</code>.\nClear all the fields of a <code>ForcePosition</code>.\nClear all the fields of a <code>LineGrid3D</code>.\nClear all the fields of a <code>MapBackground</code>.\nClear all the fields of a <code>MapZoom</code>.\nClear all the fields of a <code>NearClipPlane</code>.\nClear all the fields of a <code>PanelBlueprint</code>.\nClear all the fields of a <code>PlotLegend</code>.\nClear all the fields of a <code>ScalarAxis</code>.\nClear all the fields of a <code>TensorScalarMapping</code>.\nClear all the fields of a <code>TensorSliceSelection</code>.\nClear all the fields of a <code>TensorViewFit</code>.\nClear all the fields of a <code>ViewBlueprint</code>.\nClear all the fields of a <code>ViewContents</code>.\nClear all the fields of a <code>ViewportBlueprint</code>.\nClear all the fields of a <code>VisibleTimeRanges</code>.\nClear all the fields of a <code>VisualBounds2D</code>.\nThe layout shares of each column in the container.\nColor used for the solid background type.\nColor used for the grid.\nHow scalar values map to colors.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nTo what corner the legend is aligned.\nReturns the <code>ComponentDescriptor</code> for <code>Self::active_tab</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::apply_latest_at</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::auto_layout</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::auto_views</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_identifier</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::col_shares</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colormap</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::container_kind</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::contents</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::corner</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::display_name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::display_name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::distance</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::filter_by_range</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::gamma</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::grid_columns</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::height</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::indices</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::iterations</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::iterations</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::kind</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::mag_filter</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::maximized</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::near_clip_plane</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::plane</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::position</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::provider</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::query</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::ranges</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::root_container</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::row_shares</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::scaling</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::select</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::slider</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::space_origin</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::spacing</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::state</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::stroke_width</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::timeline</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::width</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::zoom</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::zoom_lock</code>.\nThe name of the container.\nThe name of the view.\nThe target distance between two nodes.\nWhether the center force is enabled.\nWhether the collision force is enabled.\nWhether the link force is enabled.\nWhether the many body force is enabled.\nWhether the position force is enabled.\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGamma exponent applied to normalized values before mapping …\nHow many columns this grid should have.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies how often this force should be applied per …\nSpecifies how often this force should be applied per …\nThe type of the background.\nFilter used when zooming in on the tensor.\nShow one tab as maximized?\nControls the distance to the near clip plane in 3D scene …\nCreate a new <code>Background</code>.\nCreate a new <code>ContainerBlueprint</code>.\nCreate a new <code>DataframeQuery</code>.\nCreate a new <code>ForceCenter</code>.\nCreate a new <code>ForceCollisionRadius</code>.\nCreate a new <code>ForceLink</code>.\nCreate a new <code>ForceManyBody</code>.\nCreate a new <code>ForcePosition</code>.\nCreate a new <code>LineGrid3D</code>.\nCreate a new <code>MapBackground</code>.\nCreate a new <code>MapZoom</code>.\nCreate a new <code>NearClipPlane</code>.\nCreate a new <code>PanelBlueprint</code>.\nCreate a new <code>PlotLegend</code>.\nCreate a new <code>ScalarAxis</code>.\nCreate a new <code>TensorScalarMapping</code>.\nCreate a new <code>TensorSliceSelection</code>.\nCreate a new <code>TensorViewFit</code>.\nCreate a new <code>ViewBlueprint</code>.\nCreate a new <code>ViewContents</code>.\nCreate a new <code>ViewportBlueprint</code>.\nCreate a new <code>VisibleTimeRanges</code>.\nCreate a new <code>VisualBounds2D</code>.\nHashes of all recommended views the viewer has already …\nIn what plane the grid is drawn.\nThe position where the nodes should be pulled towards.\nMap provider and style to use.\nThe <code>QueryExpression</code> that populates the contents for the …\nThe range of the axis.\nControls the visible range of a 2D view.\nThe time ranges to show for each timeline unless specified …\nThe layout of the views\nThe layout shares of each row of the container.\nHow the image is scaled to fit the view.\nSelected columns. If unset, all columns are selected.\nAny dimension listed here will have a slider for the index.\nThe “anchor point” of this view.\nSpace between grid lines spacing of one line to the next …\nCurrent state of the panels.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nHow thick the lines should be in ui units.\nThe timeline for this query.\nUpdate only some specific fields of a <code>Background</code>.\nUpdate only some specific fields of a <code>ContainerBlueprint</code>.\nUpdate only some specific fields of a <code>DataframeQuery</code>.\nUpdate only some specific fields of a <code>ForceCenter</code>.\nUpdate only some specific fields of a <code>ForceCollisionRadius</code>.\nUpdate only some specific fields of a <code>ForceLink</code>.\nUpdate only some specific fields of a <code>ForceManyBody</code>.\nUpdate only some specific fields of a <code>ForcePosition</code>.\nUpdate only some specific fields of a <code>LineGrid3D</code>.\nUpdate only some specific fields of a <code>MapBackground</code>.\nUpdate only some specific fields of a <code>MapZoom</code>.\nUpdate only some specific fields of a <code>NearClipPlane</code>.\nUpdate only some specific fields of a <code>PanelBlueprint</code>.\nUpdate only some specific fields of a <code>PlotLegend</code>.\nUpdate only some specific fields of a <code>ScalarAxis</code>.\nUpdate only some specific fields of a <code>TensorScalarMapping</code>.\nUpdate only some specific fields of a <code>TensorSliceSelection</code>.\nUpdate only some specific fields of a <code>TensorViewFit</code>.\nUpdate only some specific fields of a <code>ViewBlueprint</code>.\nUpdate only some specific fields of a <code>ViewContents</code>.\nUpdate only some specific fields of a <code>ViewportBlueprint</code>.\nUpdate only some specific fields of a <code>VisibleTimeRanges</code>.\nUpdate only some specific fields of a <code>VisualBounds2D</code>.\nWhether this container is visible.\nWhether the grid is visible.\nWhether the legend is shown at all.\nWhether this view is visible.\nWhich dimension to map to width.\nWhich tab is active.\nShould empty cells be filled with latest-at queries?\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nThe class of the view.\nThe layout shares of each column in the container.\nColor used for the solid background type.\nColor used for the grid.\nHow scalar values map to colors.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nTo what corner the legend is aligned.\nThe name of the container.\nThe name of the view.\nThe target distance between two nodes.\nWhether the center force is enabled.\nWhether the collision force is enabled.\nWhether the link force is enabled.\nWhether the many body force is enabled.\nWhether the position force is enabled.\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nGamma exponent applied to normalized values before mapping …\nHow many columns this grid should have.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nSpecifies how often this force should be applied per …\nSpecifies how often this force should be applied per …\nThe type of the background.\nFilter used when zooming in on the tensor.\nShow one tab as maximized?\nControls the distance to the near clip plane in 3D scene …\nHashes of all recommended views the viewer has already …\nIn what plane the grid is drawn.\nThe position where the nodes should be pulled towards.\nMap provider and style to use.\nThe <code>QueryExpression</code> that populates the contents for the …\nThe range of the axis.\nControls the visible range of a 2D view.\nThe time ranges to show for each timeline unless specified …\nThe layout of the views\nThe layout shares of each row of the container.\nHow the image is scaled to fit the view.\nSelected columns. If unset, all columns are selected.\nAny dimension listed here will have a slider for the index.\nThe “anchor point” of this view.\nSpace between grid lines spacing of one line to the next …\nCurrent state of the panels.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nHow thick the lines should be in ui units.\nThe timeline for this query.\nWhether this container is visible.\nWhether the grid is visible.\nWhether the legend is shown at all.\nWhether this view is visible.\nWhich dimension to map to width.\nZoom level for the map.\nIf enabled, the Y axis range will remain locked to the …\nZoom level for the map.\nIf enabled, the Y axis range will remain locked to the …\n<strong>Component</strong>: The active tab in a tabbed container.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\n<strong>Component</strong>: Whether the viewport layout is determined …\n<strong>Component</strong>: Whether or not views should be created …\n<strong>Component</strong>: The type of the background in a view.\nVisible, but as small as possible on its shorter axis.\n<strong>Component</strong>: The layout share of a column in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\n<strong>Component</strong>: One of four 2D corners, typically used to align …\n<strong>Component</strong>: Whether a procedure is enabled.\nFully expanded.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\n<strong>Component</strong>: Configuration for the filter is not null …\n<strong>Component</strong>: The target distance between two nodes.\n<strong>Component</strong>: Specifies how often this force should be …\n<strong>Component</strong>: The strength of a given force.\nA bright gradient.\nA dark gradient.\nOrganize children in a grid layout\n<strong>Component</strong>: How many columns a grid container should have.\n<strong>Component</strong>: Space between grid lines of one line to the …\nCompletely hidden.\nOrder the children left to right\n<strong>Component</strong>: All the contents in the container.\n<strong>Component</strong>: Whether the entity can be interacted with.\nLeft bottom corner.\nLeft top corner.\n<strong>Component</strong>: Indicate whether the range should be locked …\n<strong>Component</strong>: Name of the map provider to be used in Map …\nMapbox Dark is a dark-themed map designed by Mapbox.\nMapbox Satellite is a satellite map designed by Mapbox.\nMapbox Streets is a minimalistic map designed by Mapbox.\n<strong>Component</strong>: Distance to the near clip plane used for …\n<code>OpenStreetMap</code> is the default map provider.\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Tri-state for panel controls.\n<strong>Component</strong>: An individual query expression used to filter a …\nRight bottom corner.\nRight top corner.\n<strong>Component</strong>: The container that sits at the root of a …\n<strong>Component</strong>: The layout share of a row in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\nSimple uniform color.\nPut children in separate tabs\n<strong>Component</strong>: Show a slider for the index of some dimension …\n<strong>Component</strong>: A timeline identified by its name.\nOrder the children top to bottom\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\n<strong>Component</strong>: Determines whether an image or texture should …\n<strong>Component</strong>: Whether a view is maximized.\n<strong>Component</strong>: The origin of a view.\n<strong>Component</strong>: Hash of a viewer recommendation.\n<strong>Component</strong>: Whether the container, view, entity or instance …\n<strong>Component</strong>: The range of values on a given timeline that …\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\n<strong>Component</strong>: Override the visualizers for an entity.\n<strong>Component</strong>: A zoom level determines how much of the world …\nIs the filter active?\nComponent name of the filter column.\nEntity path of the filter column.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Self</code> from a <code>re_log_types::Timeline</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self is <code>PanelState::Expanded</code>\nReturns <code>true</code> if self is <code>PanelState::Hidden</code>\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\nCreate a new range filter with the provided time …\nCreate a new <code>Self</code>.\nCreates a new <code>TensorDimensionIndexSlider</code> to determine the …\nSets the panel to <code>Self::Hidden</code> if it is collapsed or …\n<strong>Datatype</strong>: Describe a component column to be selected in …\n<strong>Datatype</strong>: Configuration for the filter-by-range feature of …\n<strong>Datatype</strong>: Configuration for the filter is not null feature …\n<strong>Datatype</strong>: List of selected columns in a dataframe.\n<strong>Datatype</strong>: Defines a slider for the index of some dimension.\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\nWhether the filter by event feature is active.\nThe column used when the filter by event feature is used.\nThe name of the component.\nThe component columns to include\nThe dimension number.\nEnd of the time range (inclusive).\nThe entity path for this component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates through the list of strings as Rust <code>str</code> …\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\nBeginning of the time range.\nThe time columns to include\n<strong>View</strong>: A bar chart view.\n<strong>View</strong>: A view to display any data in a tabular form.\n<strong>View</strong>: A graph view to display time-variying, directed or …\n<strong>View</strong>: A 2D map view to display geospatial primitives.\n<strong>View</strong>: For viewing spatial 2D data.\n<strong>View</strong>: For viewing spatial 3D data.\n<strong>View</strong>: A view on a tensor of any dimensionality.\n<strong>View</strong>: A view of a single text document, for use with …\n<strong>View</strong>: A view of a text log, for use with …\n<strong>View</strong>: A time series view for scalars over time, for use …\nConfigures the vertical axis of the plot.\nConfiguration for the background map of the map view.\nConfiguration for the background of the view.\nConfiguration for the background of the view.\nTries to move the center of mass of the graph to the …\nResolves collisions between the bounding spheres, …\nAllows to control the interaction between two nodes …\nA force between each pair of nodes that ressembles an …\nSimilar to gravity, this force pulls nodes towards a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for the 3D line grid.\nConfigures the legend of the plot.\nConfigures the legend of the plot.\nQuery of the dataframe.\nConfigures how scalars are mapped to color.\nHow to select the slice of the tensor to show.\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures how the selected slice should fit into the view.\nEverything within these bounds is guaranteed to be visible.\nThe visible parts of the scene, in the coordinate space of …\nConfigures the zoom level of the map view.\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Component</strong>: The annotation context provides additional …\n<code>*</code>\nAverage all points in the range together.\n<strong>Component</strong>: The length of an axis in local units of the …\n<strong>Component</strong>: A binary blob of data.\nThe transform describes how to transform into the child …\n<code>⏺</code>\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: Configures how a clear operation should behave …\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Component</strong>: Colormap for mapping scalar values within a …\n<code>x</code>\nRasmusgo’s Cyan to Yellow colormap\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\n<code>◆</code>\nThe graph has directed edges.\n<code>▼</code>\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\n<strong>Component</strong>: A path to an entity, usually to reference some …\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Component</strong>: How much a primitive fills out the available …\n<strong>Component</strong>: A gamma correction value to be used with a …\n<strong>Component</strong>: A geospatial line string expressed in EPSG:4326 …\n<strong>Component</strong>: An edge in a graph connecting two nodes.\n<strong>Component</strong>: A string-based ID representing a node in a …\n<strong>Component</strong>: Specifies if a graph has directed or undirected …\nA simple black to white gradient.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n<strong>Component</strong>: A buffer that is known to store image data.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Component</strong>: The distance from the camera origin to the …\nThe Inferno colormap from Matplotlib.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: A geospatial position expressed in EPSG:4326 …\n<code>◀</code>\n<strong>Component</strong>: Length, or one-dimensional size.\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\nLinearly interpolate the nearest neighbors, creating a …\nThe Magma colormap from Matplotlib.\n<strong>Component</strong>: Filter used when magnifying an image/texture …\nLines are drawn around the parts of the shape which …\n<strong>Component</strong>: The visual appearance of a point in e.g. a 2D …\n<strong>Component</strong>: Radius of a marker of a point in e.g. a 2D …\nKeep only the maximum values in the range.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\n<strong>Component</strong>: A display name, typically for an entity or a …\nShow the nearest pixel value.\nNo aggregation.\n<strong>Component</strong>: Degree of transparency ranging from 0.0 (fully …\nThe transform describes how to transform into the parent …\n<strong>Component</strong>: Camera projection, from image coordinates to …\n<strong>Component</strong>: An infinite 3D plane represented by a unit …\nThe Plasma colormap from Matplotlib.\n<code>+</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion that …\n<strong>Component</strong>: A 3D scale factor that doesn’t propagate in …\n<strong>Component</strong>: A 3x3 transformation matrix Matrix that doesn’…\n<strong>Component</strong>: A translation vector in 3D space that doesn’t …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Component</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Component</strong>: A recording URI (Uniform Resource Identifier).\n<strong>Component</strong>: Pixel resolution width &amp; height, e.g. of a …\n<code>▶</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion.\n<strong>Component</strong>: A scalar value, encoded as a 64-bit floating …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Component</strong>: Whether the entity’s <code>components::Text</code> label …\nThe surface of the shape is filled in with a solid color. …\n<code>◼️</code>\n<strong>Component</strong>: The width of a stroke specified in UI points.\n<strong>Component</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: Specifies a concrete index on a tensor …\n<strong>Component</strong>: Specifies which dimension to use for height.\n<strong>Component</strong>: Specifies which dimension to use for width.\n<strong>Component</strong>: A 2D texture UV coordinate.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: A translation vector in 3D space.\n<strong>Component</strong>: The three indices of a triangle in a triangle …\nGoogle’s Turbo colormap map.\nThe graph has undirected edges.\n<code>▲</code>\n<strong>Component</strong>: Range of expected or valid values, specifying a …\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Component</strong>: Timestamp inside a <code>archetypes::AssetVideo</code>.\n<strong>Component</strong>: How we interpret the coordinate system of an …\nThe Viridis colormap from Matplotlib\nBoundary is an absolute value.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Datatype</strong>: A binary blob of data.\n<strong>Datatype</strong>: A single boolean.\n<strong>Datatype</strong>: The innermost datatype of an image.\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Datatype</strong>: A helper type for mapping <code>datatypes::ClassId</code>s to …\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: Specified what color components are present in …\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A double-precision vector in 2D space.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\n<strong>Datatype</strong>: The metadata describing the contents of a …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Datatype</strong>: A 4x4 Matrix.\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Datatype</strong>: An infinite 3D plane represented by a unit …\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Datatype</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Datatype</strong>: An Axis-Aligned Bounding Box in 2D space, …\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: Indexing a specific tensor dimension.\n<strong>Datatype</strong>: Selection of a single tensor dimension.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A uint32 vector in 2D space.\n<strong>Datatype</strong>: A uint32 vector in 3D space.\n<strong>Datatype</strong>: A uint vector in 4D space.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Stores a tuple of UTF-8 strings.\n<strong>Datatype</strong>: A 16-byte UUID.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Datatype</strong>: Presentation timestamp within a …\n<strong>Datatype</strong>: How we interpret the coordinate system of an …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nHow much to rotate around the axis.\nAxis to rotate around.\nThe content/data.\nThe raw bytes representing the UUID.\nThe data type of each channel (e.g. the red channel) of …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nThe color that will be applied to the annotated entity.\nL, RGB, RGBA, …\nThe dimension number to select.\nThe dimension number to select.\nHigh time boundary for sequence timeline.\nThe first string.\nThe height of the image in pixels.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nThe index along the dimension to use.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nInvert the direction of the dimension.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nThe label that will be shown in the UI.\nThe names of the dimensions of the tensor (optional).\nUsed mainly for chroma downsampled formats and differing …\nAngle in radians. One turn is equal to 2π (or τ) radians.\nTime range to use for this timeline.\nThe second string.\nThe shape of the tensor, i.e. the length of each dimension.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nThe width of the image in pixels.\nThe range of the X-axis (usually left and right bounds).\nThe range of the Y-axis (usually top and bottom bounds).\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nEuler rotation sequences.\nA trait for extending <code>f32</code> and <code>f64</code> with extra methods.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nIntrinsic three-axis rotation XYZ\nIntrinsic three-axis rotation XZY\nIntrinsic three-axis rotation YXZ\nIntrinsic three-axis rotation YZX\nIntrinsic three-axis rotation ZXY\nIntrinsic three-axis rotation ZYX\n<code>bool</code> vector mask types.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>f32</code> vector, quaternion and matrix types.\n<code>f64</code> vector, quaternion and matrix types.\n<code>i16</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>i32</code> vector types.\n<code>i64</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nReturns <code>v</code> normalized to the range <code>[a, b]</code>.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nRemap <code>self</code> from the input range to the output range.\nTraits adding swizzle methods to all vector types.\n<code>u16</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>u32</code> vector types.\n<code>u64</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nPixel is 8-bit alpha\n<code>AnimationDecoder</code> trait\nAn Image in AVIF Format\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nPixel is 8-bit CMYK\nAn enumeration over supported color types and bit depths\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format\nAn error was encountered while decoding.\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn error was encountered while encoding.\nContains the error value\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nA flat buffer over a (multi channel) image.\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nThe generic error type for image operations.\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nA multi-format image reader.\nResult of an image decoding/encoding process")