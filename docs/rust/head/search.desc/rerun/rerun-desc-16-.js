searchState.loadedDescShard("rerun", 16, "converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nA subtype of primitive type that represents legal …\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nAn arrow binary array with i32 offsets\n<code>BinaryViewType</code> for string arrays\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nDefault values for <code>DataType</code>\n32-bit date type: the elapsed time since UNIX epoch in …\n64-bit date type: the elapsed time since UNIX epoch in …\nThe decimal type for a Decimal128Array\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\n16-bit floating point number type.\n32-bit floating point number type.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nSigned 16-bit integer type.\nSigned 32-bit integer type.\nSigned 64-bit integer type.\nA signed 8-bit integer type.\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\n32-bit “calendar” interval type: the number of whole …\nAn arrow binary array with i64 offsets\nAn arrow utf8 array with i64 offsets\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA subtype of primitive type that is used as run-ends index …\n<code>ByteViewType</code> for string arrays\nfn to create its <code>DataType</code>\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nUnsigned 16-bit integer type.\nUnsigned 32-bit integer type.\nUnsigned 64-bit integer type.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nAn arrow utf8 array with i32 offsets\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nFormats the decimal value with the provided precision and …\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nCreates a ArrowTimestampType::Native from the provided …\nNumber of milliseconds\nNumber of months\nNumber of nanoseconds\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nA slice-able <code>Buffer</code> containing bit-packed booleans\nBuffer represents a contiguous memory region that can be …\nA <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …\nA <code>BooleanBuffer</code> used to encode validity for arrow arrays\nA non-empty buffer of monotonically increasing, positive …\nA slice-able buffer of monotonically increasing, positive …\nA strongly-typed <code>Buffer</code> supporting zero-copy cloning and …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to one input and return the …\nApply a bitwise and to two inputs and return the result as …\nApply a bitwise and_not to two inputs and return the …\nApply a bitwise or to two inputs and return the result as …\nApply a bitwise xor to two inputs and return the result as …\nApply a bitwise not to one input and return the result as …\nCastOptions provides a way to override the default cast …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nHour of the day, in range <code>0..=23</code>\nA lexicographical comparator that wraps given array data …\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nA computed set of partitions, see <code>partition</code>\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nA trait for Arrow String Arrays, currently three types are …\nOptions that define how <code>take</code> should behave\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns a prepared function optimized to filter multiple …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nPerform bounds check before taking indices from values. If …\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nPerform SQL <code>CONTAINS(left, right)</code>\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nWhether to sort in descending order\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nPerform SQL <code>ENDSWITH(left, right)</code>\nReturns a filtered <code>values</code> Array where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nFormatting options when casting from temporal types to …\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nTakes elements by index from a list of <code>Array</code>, creating a …\nReturns true if all data within this string array is ASCII\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nConstructs a new iterator\nComputation kernels on Arrow Arrays\nUse <code>partition</code> instead. Given a list of already sorted …\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nPerform SQL <code>left LIKE right</code>\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nCopies original array, setting validity bit to false if a …\nWhether to sort nulls first\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nSort options for this column\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nIt’s unstable_sort, may not preserve the order of equal …\nGiven a list of lexicographically sorted columns, computes …\nRemove null values by do a bitmask AND operation with null …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nhow to handle cast failures, either return NULL …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nShifts array by defined number of items (to left or right) …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nPerform SQL <code>STARTSWITH(left, right)</code>\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nApplies a fallible unary function to an array with …\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nApplies an infallible unary function to an array with …\nSee <code>PrimitiveArray::unary_mut</code>\nReturns the value of the target field when selected, or …\nParse the given string into a string representing …\nThe column to sort\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nDefines aggregations over Arrow arrays.\nKernels for operating on <code>PrimitiveArray</code>s\nModule contains bitwise operations on arrays\nDefines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…\nCast kernels to convert <code>ArrayRef</code>  between supported …\nCast <code>array</code> to the provided data type and return a new …\n<code>Parser</code> implementations for converting strings to Arrow …\nComparison kernels for <code>Array</code>s.\nComparison kernels for <code>Array</code>s.\nDefines concat kernel for <code>ArrayRef</code>\nProvides utility functions for concatenation of elements …\nDefines filter kernels\nInterleave elements from multiple arrays\nDefines kernel for length of string arrays and binary …\nImplements the <code>nullif</code> function for Arrow arrays.\nDefines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …\nDefines partition kernel for <code>ArrayRef</code>\nProvides <code>rank</code> function to assign a rank to each value in …\nDefines kernel to extract substrings based on a regular …\nDefines sort kernel for <code>ArrayRef</code>\nDefines kernel to extract a substring of an Array …\nDefines take kernel for Array\nDefines temporal kernels for time and date related …\nDefines union_extract kernel for UnionArray\nDefines windowing functions, like <code>shift</code>ing\nZip two arrays by some boolean mask. Where the mask …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nApplies a fallible unary function to an array with …\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nApplies an infallible unary function to an array with …\nSee <code>PrimitiveArray::unary_mut</code>\nPerform <code>left &amp; right</code> operation on two arrays. If either …\nPerform <code>left &amp; !right</code> operation on two arrays. If either …\nPerform bitwise <code>and</code> every value in an array with the …\nPerform <code>!array</code> operation on array. If array value is null …\nPerform <code>left | right</code> operation on two arrays. If either …\nPerform bitwise <code>or</code> every value in an array with the …\nPerform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &lt;&lt; right</code> every value in an array with …\nPerform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &gt;&gt; right</code> every value in an array with …\nPerform <code>left ^ right</code> operation on two arrays. If either …\nPerform bitwise <code>xor</code> every value in an array with the …\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nCastOptions provides a way to override the default cast …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nFormatting options when casting from temporal types to …\nhow to handle cast failures, either return NULL …\nA Century\nA Day\nA Decade\nAn Hour\nConfig to parse interval strings\nRepresents the units of an interval, with each variant …\nA Microsecond\nA Millisecond\nA Minute\nA Month\nA tuple representing (months, days, nanoseconds) in an …\nA Nanosecond\nSpecialized parsing implementations to convert strings to …\nA Second\nA Week\nA Year\nParse a string to the native type\nParse the string format decimal value to i128/i256 format …\nParse a string to the native type with a format string\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nAccepts a string and parses it relative to the provided …\nAccepts a string in ISO8601 standard format and some …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCompares two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nComparing two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nPerform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>\nPerform <code>left == right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left != right</code> operation on two <code>Datum</code>.\nPerform <code>left IS NOT DISTINCT FROM right</code> operation on two …\nA trait for Arrow String Arrays, currently three types are …\nPerform SQL <code>CONTAINS(left, right)</code>\nPerform SQL <code>ENDSWITH(left, right)</code>\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nReturns true if all data within this string array is ASCII\nConstructs a new iterator\nPerform SQL <code>left LIKE right</code>\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>STARTSWITH(left, right)</code>\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of a <code>GenericByteArray</code>…\nReturns the elementwise concatenation of <code>Array</code>s.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of <code>StringArray</code>.\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nReturns a prepared function optimized to filter multiple …\nReturns a filtered <code>values</code> Array where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nRemove null values by do a bitmask AND operation with null …\nTakes elements by index from a list of <code>Array</code>, creating a …\nReturns an array of Int32/Int64 denoting the number of …\nReturns an array of Int32/Int64 denoting the length of …\nCopies original array, setting validity bit to false if a …\nPerform <code>lhs + rhs</code>, returning an error on overflow\nPerform <code>lhs + rhs</code>, wrapping on overflow for …\nPerform <code>lhs / rhs</code>\nPerform <code>lhs * rhs</code>, returning an error on overflow\nPerform <code>lhs * rhs</code>, wrapping on overflow for …\nNegates each element of  <code>array</code>, returning an error on …\nNegates each element of  <code>array</code>, wrapping on overflow for …\nPerform <code>lhs % rhs</code>\nPerform <code>lhs - rhs</code>, returning an error on overflow\nPerform <code>lhs - rhs</code>, wrapping on overflow for …\nA computed set of partitions, see <code>partition</code>\nUse <code>partition</code> instead. Given a list of already sorted …\nGiven a list of lexicographically sorted columns, computes …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nA lexicographical comparator that wraps given array data …\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nWhether to sort in descending order\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nWhether to sort nulls first\nSort options for this column\nIt’s unstable_sort, may not preserve the order of equal …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nThe column to sort\nReturns an <code>ArrayRef</code> with substrings of all the elements in …\nSubstrings based on character index\nOptions that define how <code>take</code> should behave\nPerform bounds check before taking indices from values. If …\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nHour of the day, in range <code>0..=23</code>\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nParse the given string into a string representing …\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nReturns the value of the target field when selected, or …\nShifts array by defined number of items (to left or right) …\nZip two arrays by some boolean mask. Where the mask …\nA subtype of primitive type that represents legal …\nTrait expressing a Rust type that has the same in-memory …\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nOpaque binary data of variable length.\nAn arrow binary array with i32 offsets\nOpaque binary data of variable length.\n<code>BinaryViewType</code> for string arrays\nA boolean datatype representing the values <code>true</code> and <code>false</code>.\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nThe maximum precision for DataType::Decimal128 values\nThe maximum scale for DataType::Decimal128 values\nThe maximum precision for DataType::Decimal256 values\nThe maximum scale for DataType::Decimal256 values\nThe default scale for DataType::Decimal128 and …\nDefault values for <code>DataType</code>\nDatatypes supported by this implementation of Apache Arrow.\nA signed 32-bit date representing the elapsed time since …\n32-bit date type: the elapsed time since UNIX epoch in …\nA signed 64-bit date representing the elapsed time since …\n64-bit date type: the elapsed time since UNIX epoch in …\nIndicates the number of elapsed days and milliseconds, …\nExact 128-bit width decimal value with precision and scale\nThe decimal type for a Decimal128Array\nExact 256-bit width decimal value with precision and scale\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nDense union layout\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time in either seconds, milliseconds, …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\nDescribes a single column in a <code>Schema</code>.\nA reference counted <code>Field</code>\nA cheaply cloneable, owned slice of <code>FieldRef</code>\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some logical data type with fixed length.\nA 16-bit floating point number.\n16-bit floating point number type.\nA 32-bit floating point number.\n32-bit floating point number type.\nA 64-bit floating point number.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nA signed 16-bit integer.\nSigned 16-bit integer type.\nA signed 32-bit integer.\nSigned 32-bit integer type.\nA signed 64-bit integer.\nSigned 64-bit integer type.\nA signed 8-bit integer.\nA signed 8-bit integer type.\nA “calendar” interval which models types that don’t …\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\nYEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.\n32-bit “calendar” interval type: the number of whole …\nOpaque binary data of variable length and 64-bit offsets.\nAn arrow binary array with i64 offsets\nA list of some logical data type with variable length and …\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nA variable-length string in Unicode with UFT-8 encoding …\nAn arrow utf8 array with i64 offsets\nA list of some logical data type with variable length.\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\n<code>MAX_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the maximum <code>i128</code> …\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nThe maximum value and identity for the <code>min</code> aggregation. …\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the minimum <code>i128</code> …\nThe minimum value and identity for the <code>max</code> aggregation. …\nA Map is a logical nested type that is represented as\nTime in microseconds.\nTime in milliseconds.\nA triple of the number of elapsed months, days, and …\nTime in nanoseconds.\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nNull type\nThe multiplicative identity\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA run-end encoding (REE) is a variation of run-length …\nA subtype of primitive type that is used as run-ends index …\nDescribes the meta-data of an ordered sequence of relative …\nA builder to facilitate building a <code>Schema</code> from iteratively …\nA reference-counted reference to a <code>Schema</code>.\nTime in seconds.\nSparse union layout\n<code>ByteViewType</code> for string arrays\nA nested datatype that contains a number of sub-fields.\nfn to create its <code>DataType</code>\nA signed 32-bit time representing the elapsed time since …\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\nA signed 64-bit time representing the elapsed time since …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nAn absolute length of time in seconds, milliseconds, …\nA timestamp with an optional timezone.\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nAllows conversion from supported Arrow types to a byte …\nAn unsigned 16-bit integer.\nUnsigned 16-bit integer type.\nAn unsigned 32-bit integer.\nUnsigned 32-bit integer type.\nAn unsigned 64-bit integer.\nUnsigned 64-bit integer type.\nAn unsigned 8-bit integer.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nA nested datatype that can represent slots of differing …\nA cheaply cloneable, owned collection of <code>FieldRef</code> and …\nSparse or Dense union layouts\nA variable-length string in Unicode with UTF-8 encoding.\nAn arrow utf8 array with i32 offsets\nA variable-length string in Unicode with UTF-8 encoding\nIndicates the number of elapsed whole months, stored as …\nThe additive identity\nChecked addition operation\nWrapping addition operation\nConvert to usize according to the <code>as</code> operator\nCompare operation\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nChecked division operation\nWrapping division operation\nA sequence of fields that describe the schema.\nFormats the decimal value with the provided precision and …\nConvert native type from i128.\nConvert native type from i32.\nConvert native type from i64.\nConvert native integer type from usize\nReturns the byte width of this native type.\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nA signed 256-bit integer\nEquality operation\nGreater than equals operation\nGreater than operation\nLess than equals operation\nLess than operation\nNot equal operation\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nDetermines whether the specified <code>i256</code> value can be properly\nDetermines whether the specified <code>i128</code> value can be properly\nReturns true if zero else false\nCreates a ArrowTimestampType::Native from the provided …\nA map of key-value pairs containing additional meta data.\nNumber of milliseconds\nChecked remainder operation\nWrapping remainder operation\nNumber of months\nChecked multiplication operation\nWrapping multiplication operation\nNumber of nanoseconds\nChecked negation operation\nWrapping negation operation\nChecked exponentiation operation\nWrapping exponentiation operation\nChecked subtraction operation\nWrapping subtraction operation\nConverts this instance into a byte slice\nConvert native type to i64.\nConvert native type to isize.\nConvert native type to usize.\nConvert from usize according to the <code>as</code> operator\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nError when an arithmetic operation overflows.\nMany different operations in the <code>arrow</code> crate return this …\nError during import or export to/from the C Data Interface\nError during casting from one type to another.\nError during computation.\nError during CSV-related operations.\nError when a dictionary key is bigger than the key type\nError during division by zero.\nContains the error value\nWraps an external error.\nError indicating that an unexpected or bad argument was …\nError during IO operations.\nError during IPC operations in <code>arrow-ipc</code> or <code>arrow-flight</code>.\nError during JSON-related operations.\nMemory or buffer error.\nReturned when functionality is not yet available.\nContains the success value\nError during Parquet operations.\nError during parsing from a string.\nA specialized <code>Result</code> type for Arrow operations.\nError when the run end index in a REE array is bigger than …\nError during schema-related operations.\nOpaque binary data\nLogically the same as Binary, but the internal …\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nFor sending dictionary encoding information. Any Field can …\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nData structures for describing a table row batch (a …\nArrow File metadata\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThe root Message type This union enables us to easily send …\nThese are stored in the flatbuffer in the Type union below\nA data header describing the shared memory layout of a “…\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nA Struct_ in the flatbuffer metadata is the same as an …\nData structures for dense tensors Shape data for a single …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nUtilities for converting between IPC types and native …\nGenerated code\nArrow IPC File and Stream Readers\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nArrow IPC File and Stream Writers\nLow level Arrow Schema to IPC bytes converter\nAn owned container for a validated <code>Message</code>\nDeserialize an ipc crate::Schema` from flat buffers to an …\nPush a key-value metadata into a FlatBufferBuilder and …\nSerialize a schema in IPC format\nAdds a Schema to a flatbuffer and returns the offset\nTry deserialize flat buffer format bytes into a schema\nTry deserialize the IPC format bytes into a schema\nArrow File metadata\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nFor sending dictionary encoding information. Any Field can …\nData structures for describing a table row batch (a …\nThe root Message type This union enables us to easily send …\nA data header describing the shared memory layout of a “…\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOpaque binary data\nLogically the same as Binary, but the internal …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThese are stored in the flatbuffer in the Type union below\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nA Struct_ in the flatbuffer metadata is the same as an …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nData structures for dense tensors Shape data for a single …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nA low-level, push-based interface for reading an IPC file\nArrow File reader\nBuild an Arrow <code>FileReader</code> with custom options.\nA low-level interface for reading <code>RecordBatch</code> data from a …\nArrow Stream reader\nRead the dictionary from the buffer and provided metadata, …\nRead the footer length from the last 10 bytes of an Arrow …\nCreates a record batch from binary data using the …\nKeeps track of dictionaries that have been written, to …\nStores the encoded data, which is an crate::Message, and …\nWriter for an IPC file\nHandles low level details of encoding <code>Array</code> and <code>Schema</code> …\nIPC write options used to control the behaviour of the …\nWriter for an IPC stream\nArrow buffers to be written, should be an empty vec for …\nAn encoded crate::Message\nWrite a message’s IPC data and buffers, returning …\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nConvert a Python object to an arrow-rs type.\nConvert the implemented type into a Python object while …\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nMatch field names of structs and lists. If set to <code>true</code>, …\nReads the next <code>RecordBatch</code>.\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nEncode dictionary values not preserving the dictionary …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nConverts numeric type to a <code>String</code>\nA writer that allows writing to a <code>String</code> like an …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n64-bit hash.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSend <code>LogMsg</code>es to a server over TCP.\nServer connection error.\nComes after version.\nAdded <code>PROTOCOL_HEADER</code>. Introduced for Rerun 0.16.\nThe default amount of time to wait for the TCP connection …\nThe default address of a Rerun TCP server which an SDK …\nIf the latency in the <code>LogMsg</code> channel is greater than this, …\nTurns <code>info</code>-level logs into <code>debug</code>-level logs.\nListen to multiple SDK:s connecting to us over TCP.\nLog an entity using an <code>ArrowMsg</code>.\nSend after all messages in a blueprint to signal that the …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>crate::Chunk</code>.\nContains the error value\nContains the error value\nThe most general log message sent from the SDK to the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA unique ID for a row’s worth of data within a chunk.\nA new recording has begun.\nError spawning one of the background threads.\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nSplit a chunk if it contains &gt;= rows than this threshold …\nThe component data.\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nCallbacks you can install on the <code>ChunkBatcher</code>.\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nUser-specified <code>TimePoint</code> for this event.\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Datatype</strong>: Angle in radians.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Datatype</strong>: Annotation info annotating a class id or …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\nRotation defined with an axis and an angle.\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Datatype</strong>: The innermost datatype of an image.\nThe transform describes how to transform into the child …\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: Specified what color components are present in …\nMany lines are drawn to represent the surface of the shape …\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\nLines are drawn around the parts of the shape which …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\nThe transform describes how to transform into the parent …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRotation defined by a quaternion.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\nA 3D rotation.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\nThe surface of the shape is filled in with a solid color. …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: The three indices of a triangle in a triangle …\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nHow much to rotate around the axis.\nAxis to rotate around.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nThe content/data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nThe color that will be applied to the annotated entity.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nThe format of the image.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nThe <code>datatypes::AnnotationInfo</code> for the class.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nThe label that will be shown in the UI.\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nThe names of the dimensions of the tensor (optional).\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nThe shape of the tensor, i.e. the length of each dimension.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\nStream log messages to an in-memory binary stream.\nErrors that can occur when creating a <code>BinaryStreamSink</code>.\nThe storage used by <code>BinaryStreamSink</code>.\nStore log messages in memory until you call …\nA sink which forwards all log messages to a callback …\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nError encoding a log message.\nError encoding a log message.\nWhere the SDK sends its log messages.\nStore log messages directly in memory.\nThe storage used by <code>MemorySink</code>.\nError spawning the writer thread.\nError spawning the file writer thread.\nStream log messages to a Rerun TCP server.\nDrain all buffered <code>LogMsg</code>es and return them.\nDrops all pending data currently sitting in the sink’s …\nBlocks until all pending data in the sink’s send buffers …\nSend this log message.\nSend all these log messages.\nSend a blueprint directly to the log-sink.\nUsed e.g. for frames in a film.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nFailure to host the Rerun WebSocket server.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nFailure to host a web viewer and/or Rerun server.\nIp to which the http server is bound.\nIf set, adjusts the browser url to force a specific …\nServe log-data over WebSockets and serve a Rerun web …\nIf set to <code>true</code>, opens the default browser after hosting …\nThe url from which a spawned webviewer should source\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.\nStream log messages to an in-memory binary stream.\nErrors that can occur when creating a <code>BinaryStreamSink</code>.\nThe storage used by <code>BinaryStreamSink</code>.\nStore log messages in memory until you call …\nA sink which forwards all log messages to a callback …\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nError encoding a log message.\nError encoding a log message.\nWhere the SDK sends its log messages.\nStore log messages directly in memory.\nThe storage used by <code>MemorySink</code>.\nError spawning the writer thread.\nError spawning the file writer thread.\nStream log messages to a Rerun TCP server.\nAccess the raw <code>MemorySinkStorage</code>\nConvert the stored messages into an in-memory Rerun log …\nDrain the stored messages and return them as an in-memory …\nDrain all buffered <code>LogMsg</code>es and return them.\nDrops all pending data currently sitting in the sink’s …\nFlush the batcher and log encoder to guarantee that all …\nBlocks until all pending data in the sink’s send buffers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a pair of a new <code>BinaryStreamSink</code> and the associated …\nCreate a new <code>MemorySink</code> with an associated <code>RecordingStream</code>.\nCreate a new <code>CallbackSink</code> with the given callback function.\nStart writing log messages to a file at the given path.\nAn empty buffer.\nConnect to the given address in a background thread. …\nHow many messages are currently written to this memory sink\nRead and consume the current contents of the buffer.\nSend this log message.\nSend all these log messages.\nSend a blueprint directly to the log-sink.\nStart writing log messages to standard output.\nGet the <code>StoreId</code> from the associated <code>RecordingStream</code> if it …\nConsumes and returns the inner array of <code>LogMsg</code>.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nReturns the appropriate arrow datatype to represent this …\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor time timelines.\nFor time timelines.\nFor time timelines.\nFor sequence timelines.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an array with the appropriate datatype.\nCreates a new temporal <code>TimeInt</code>.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nFailure to host the Rerun WebSocket server.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nFailure to host a web viewer and/or Rerun server.\nIp to which the http server is bound.\nIf set, adjusts the browser url to force a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper to spawn an instance of the <code>WebViewerServer</code>. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nServe log-data over WebSockets and serve a Rerun web …\nIf set to <code>true</code>, opens the default browser after hosting …\nThe url from which a spawned webviewer should source\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.")