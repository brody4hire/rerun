searchState.loadedDescShard("rerun", 12, "The number of items in the remainder\nSets bit at position <code>i</code> in <code>byte</code>\nSets bit at position <code>i</code> in <code>data</code>\nSets bit at position <code>i</code> in <code>data</code> without doing bound checks\nconvert itself into bytes.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nA vector of trait objects of <code>Array</code> where every item has …\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains the concatenate kernel\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nConcatenate multiple Array of the same type into a single …\nAn extension trait to polyfill <code>Arc::unwrap_or_clone</code> from …\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nThe set of supported logical types in this crate.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nTwo i32 representing days and ms\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nA 16-bit floating point number.\nAn 16-bit float\nA 32-bit floating point number.\nA <code>f32</code>\nA 64-bit floating point number.\nA <code>f64</code>\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nmonths_days_ns(i32, i32, i64)\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nThe set of all implementations of the sealed trait …\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nIts logical <code>DataType</code>\nThe fields composing this schema.\nsupport get extension for metadata\nIts nullability\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nIf we have the only reference to <code>T</code> then unwrap it. …\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nFunctionality to mmap in-memory data regions.\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nThe total size of the file in bytes\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nWrites an <code>Array</code> to <code>arrow_data</code>\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a <code>DataType</code>. …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nwhether it is valid\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nCalculates the scale factor between two TimeUnits. The …\nParses a <code>Utf8Array</code> to naive timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nAn iterator of known, fixed size. A trait denoting Rusts’…\nA chunk of bits. This is used to create masks of a given …\nAn [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …\nAn [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …\nType denoting its representation as bytes. This is <code>[u8; N]</code> …\nTwo i32 representing days and ms\nA 16-bit floating point number.\nA 32-bit floating point number.\nA 64-bit floating point number.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…\nRange of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 64-bit integer.\nA signed 8-bit integer.\nmonths_days_ns(i32, i32, i64)\nSealed trait implemented by all physical types that can be …\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nThe corresponding variant of <code>PrimitiveType</code>.\nThe set of all implementations of the sealed trait …\nAn unsigned 16-bit integer.\nAn unsigned 32-bit integer.\nAn unsigned 64-bit integer.\nAn unsigned 8-bit integer.\nThe in-memory representation of the DayMillisecond variant …\nA 16-bit floating point type implementing the IEEE …\nConvert itself from <code>usize</code>.\nFrom bytes in big endian\nFrom bytes in little endian\nconvert itself from bytes.\nConvert itself from <code>usize</code>.\nPhysical representation of a decimal\nThe in-memory representation of the MonthDayNano variant …\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nContains traits and implementations of multi-data used in …\nTo bytes in big endian\nTo bytes in little endian\nconvert itself into bytes.\nConvert itself to <code>usize</code>.\nThe type holding bits for masks.\nDescribes the ability to convert itself from a <code>BitChunk</code>.\nNumber of lanes\nType used for masking.\nThe <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …\nA struct that lends itself well to be compiled leveraging …\nTrait implemented by some <code>NativeType</code> that have a SIMD …\nThe SIMD type associated with this trait. This type …\nReturns a tuple of 3 items whose middle item is itself, …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nConvert itself from a slice.\nConvert itself from a slice.\ncreates a new Self from <code>v</code> by populating items from <code>v</code> up to …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nSets values to <code>default</code> based on <code>mask</code>.\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nEuler rotation sequences.\nA trait for extending <code>f32</code> and <code>f64</code> with extra methods.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nIntrinsic three-axis rotation XYZ\nIntrinsic three-axis rotation XZY\nIntrinsic three-axis rotation YXZ\nIntrinsic three-axis rotation YZX\nIntrinsic three-axis rotation ZXY\nIntrinsic three-axis rotation ZYX\n<code>bool</code> vector mask types.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>f32</code> vector, quaternion and matrix types.\n<code>f64</code> vector, quaternion and matrix types.\n<code>i16</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>i32</code> vector types.\n<code>i64</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nReturns <code>v</code> normalized to the range <code>[a, b]</code>.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nRemap <code>self</code> from the input range to the output range.\nTraits adding swizzle methods to all vector types.\n<code>u16</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\n<code>u32</code> vector types.\n<code>u64</code> vector types.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional <code>bool</code> vector mask.\nA 3-dimensional <code>bool</code> vector mask.\nA 3-dimensional SIMD vector mask.\nA 4-dimensional <code>bool</code> vector mask.\nA 4-dimensional SIMD vector mask.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2D affine transform, which can represent translation, …\nA 3D affine transform, which can represent translation, …\nA 2x2 column major matrix.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2x2 matrix from two column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nCreates a 2-dimensional vector.\nCreates a 3-dimensional vector.\nCreates a 4-dimensional vector.\nPixel is 8-bit alpha\n<code>AnimationDecoder</code> trait\nAn Image in AVIF Format\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nPixel is 8-bit CMYK\nAn enumeration over supported color types and bit depths\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format\nAn error was encountered while decoding.\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn error was encountered while encoding.\nContains the error value\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nA flat buffer over a (multi channel) image.\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nThe generic error type for image operations.\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nA multi-format image reader.\nResult of an image decoding/encoding process\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 32-bit float Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 32-bit float Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nAn error occurred while interacting with the environment.\nAn Image in JPEG Format\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nSet of supported strict limits for a decoder.\nResource limits for decoding.\nCompleting the operation would have required more …\nGrayscale colors.\nGrayscale colors + alpha channel\nContains the success value\nAn Image in OpenEXR Format\nAn error was encountered in input arguments.\nA generalized pixel.\nThe type of pixel.\nThe pixel with an associated <code>ColorType</code>. Not all possible …\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in general PNM Format\nThe type of each channel in a pixel. For example, this can …\nAn Image in QOI Format\nRGB colors.\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel is 32-bit float RGB\nPixel is 32-bit float RGB\nAn image buffer for 32-bit float RGB pixels, where the …\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 32-bit float RGBA\nPixel is 32-bit float RGBA\nAn image buffer for 32-bit float RGBA pixels, where the …\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe scalar type that is used to store each channel in this …\nAn Image in TGA Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nAn operation can not be completed by the chosen …\nAn Image in WEBP Format\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nGet the bytes of this value.\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nEncoding and decoding for various image file formats.\nSupplementary color information.\nReturns the color type of the image data produced by this …\nCopies all of the pixels from another image into this …\nCopies all of the pixels from one part of this image to …\nReturns a tuple containing the width and height of the …\nThe width and height of this image.\nContains detailed error representation.\nReturns the raw Exif chunk, if it is present. A …\nImage representations for ffi.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGuess image format from memory block\nThe height of this image.\nReturns the ICC color profile embedded in the image, or …\nRead a tuple containing the (width, height) of the image …\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nConsume the decoder producing a series of frames.\nInvert this pixel\ndeprecated io module the original io module has been …\nA <code>repr(C)</code> description of the layout of buffer samples.\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nTypes describing image metadata\nOpen the image located at the path specified. The image’…\nReturns the orientation of the image.\nReturns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nPut a pixel at location (x, y). Indexed from top left.\nReturns all the bytes in the image.\nUse <code>read_image</code> instead; this method is an implementation …\nDecode a rectangular section of the image.\nUnderlying linear container holding sample values.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified …\nSet the ICC profile to use for the image.\nSet the decoder to have the specified limits. See <code>Limits</code> …\nReturns a mutable subimage that is a view into this image. …\nConvert this pixel to luma\nConvert this pixel to luma with an alpha channel\nConvert this pixel to RGB\nConvert this pixel to RGB with an alpha channel\nReturns the total number of bytes in the decoded image.\nReturns the pixel located at (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nReturns a subimage that is an immutable view into this …\nThe width of this image.\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nDecoding and Encoding of JPEG Images\nDecoding and Encoding of PNG Images\nPixels per centimeter\nPixels per inch (2.54 cm)\nJPEG decoder\nThe representation of a JPEG encoder\nRepresents the absence of a unit, the values indicate only …\nRepresents the pixel density of an image\nRepresents a unit in which the density of an image is …\nA couple of values for (Xdensity, Ydensity)\nThe unit in which the density is measured\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nThe required color type can not be handled.\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nThe given limits\nThe supported strict limits\nThe color format did not match the channel count.\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nDeprecated - <code>ChannelCountMismatch</code> is used instead\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nA <code>repr(C)</code> description of the layout of buffer samples.\nUnderlying linear container holding sample values.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nA bi-level color map\nCubic Filter\nThe color type on which the map operates on\nA color map\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nPerforms a Gaussian blur on the supplied image. <code>sigma</code> is a …\nBrighten the supplied image. <code>value</code> is the amount to …\nFunctions for altering and converting the color of …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nReduces the colors of the image using the supplied …\nApproximation of Gaussian blur after Kovesi, P.:  Fast …\nPerform a 3x3 box filter on the supplied image. <code>kernel</code> is …\nFlip an image horizontally\nFlip an image horizontally and put the result into the …\nFlip an image horizontally in place.\nFlip an image vertically\nFlip an image vertically and put the result into the …\nFlip an image vertically in place.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nFill the image with a linear horizontal gradient\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nLinearly sample from an image using coordinates in [0, w-1]…\nSample from an image using coordinates in [0, w-1] and [0, …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nResize the supplied image to the specified dimensions. …\nRotate an image 180 degrees clockwise.\nRotate an image 180 degrees clockwise and put the result …\nRotate an image 180 degrees clockwise in place.\nRotate an image 270 degrees clockwise.\nRotate an image 270 degrees clockwise and put the result …\nRotate an image 90 degrees clockwise.\nRotate an image 90 degrees clockwise and put the result …\nLinearly sample from an image using coordinates in [0, 1].\nSample from an image using coordinates in [0, 1], taking …\nResize the supplied image to the specific dimensions.\nTile an image by repeating it multiple times\nPerforms an unsharpen mask on the supplied image. <code>sigma</code> is …\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place.\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nDeprecated re-export of <code>LimitSupport</code>\nDeprecated re-export of <code>Limits</code>\nDeprecated re-export of <code>ImageReader</code> as <code>Reader</code>\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nA Rectangle defined by its top left corner, width and …\nThe rectangle’s height.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nFlip horizontally. Can be performed in-place.\nFlip vertically. Can be performed in-place.\nDo not perform any transformations.\nDescribes the transformations to be applied to the image. …\nRotate by 180 degrees. Can be performed in-place.\nRotate by 270 degrees clockwise. Equivalent to rotating by …\nRotate by 270 degrees clockwise and flip horizontally.\nRotate by 90 degrees clockwise.\nRotate by 90 degrees clockwise and flip horizontally.\nAn array where the data has shared ownership and is copy …\none-dimensional shared ownership array\ntwo-dimensional shared ownership array\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nA producer element that can be assigned to once\nAn axis index.\nDescription of the axis, its length and its stride.\nColumn major or “F” order\nContinue folding with this value\nAn array with copy-on-write behavior.\nCowArray’s representation.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nDimension description.\nCreate a new dimension value.\nDimension type of the producer\nDimension type\nAdds the two dimensions at compile time.\nArray shape and index trait.\nFold is complete and will return this value\nThe array element type.\nError code for an error related to array shape or layout.\nValue controlling the execution of <code>.fold_while</code> on <code>Zip</code>.\nincompatible memory layout\nincompatible shape\nA single index.\nExtra indexing methods for array views\nArgument conversion a dimension.\nArgument conversion into a producer.\nThe element produced per iteration.\nThe element produced per iteration.\nArray index type\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nDynamic dimension or index type.\nArray index type (signed)\nNext larger dimension\nElements that support linear algebra operations.\nAn iterator of a sequence of evenly spaced floats.\nAn iterator of a sequence of logarithmically spaced number.\nA transparent wrapper of <code>Cell&lt;T&gt;</code> which is identical in …\nCorresponding owned data with MaybeUninit elements\nSlicing information describing multiple mutable, disjoint …\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nTuple or fixed size arrays that can be used to index an …\nA producer of an n-dimensional set of elements; for …\nToken to represent a new axis in a slice description.\nA new axis of length 1.\nArray order\nDimensionality of the output array.\nout of bounds indexing\nThe resulting array storage of the same kind but …\nThe type of the slices created by <code>.multi_slice_move()</code>.\nThe resulting dimension type after broadcasting.\nThe sum of the two dimensions.\nThe type of the reference to the element that is produced, …\noverflow when computing offset, length, etc.\nOwned data.\nArcArray’s representation.\nArray’s representation.\nPattern matching friendly form of the dimension value.\nthe shape does not fit inside type limits\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray pointer’s representation.\nArray shape with a next smaller dimension.\nRow major or “C” order\nElements that can be used as direct operands in arithmetic …\nA contiguous array shape of n dimensions.\nArray shape argument with optional order parameter\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nAn error related to array shape or layout.\nA slice (range with step size).\nA range with step size. <code>end</code> is an exclusive index. …\nA type that can slice an array of dimension <code>D</code>.\nRepresents all of the necessary information to perform a …\nA slice (range with step), an index, or a new axis token.\nNext smaller dimension (if applicable)\nAn array shape of n dimensions in c-order, f-order or …\naliasing array elements\nBorrowed data.\nArray view’s representation.\nLock step function application across several arrays or …\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two, three, four, five, or six …\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nAssign the value <code>input</code> to the element that self represents.\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nCreate a two-dimensional read-write array view with …\nAxis identifier (index)\nArray zip macro: lock step function application across …\nConcatenate arrays along the given axis.\nConcatenate arrays along the given axis.\nUnsafely translate the data representation from one element\nend index; negative are counted from the back of the axis; …\nGet a reference of a element through the view.\nReturns the number of axes in the input array.\nGet a reference of a element through the view.\nCreate an iterable of the array shape <code>shape</code>.\nReturn an iterable of the indices of the passed-in array.\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert the dimension into a pattern matching friendly …\nConvert the value into an <code>NdProducer</code>.\nProducers, iterables and iterators.\nLength in count of elements of the current axis\nLinear algebra.\nReturn an iterator of evenly spaced floats.\nAn iterator of a sequence of logarithmically spaced …\nSplit the view into multiple disjoint slices.\nReturns the number of dimensions (number of axes).\nReturns the number of axes in the output array.\nndarray prelude.\nReturn an iterator of floats from <code>a</code> to <code>b</code> (exclusive), …\nReturn the shape of the producer.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nSlice argument constructor.\nCompute the size of the dimension (number of elements)\nCompute the size while checking for overflow.\nStack arrays along the new axis.\nStack arrays along the new axis.\nstart index; negative are counted from the back of the axis\nstep size in elements; the default is 1, for every element.\nStride in count of elements of the current axis\nGet a reference of a element through the view without …\nCreates a dimension of all zeros with the specified ndim.\nend index; negative are counted from the back of the axis; …\nstart index; negative are counted from the back of the axis\nstep size in elements; the default is 1, for every element.\nAn iterator over the length and stride of each axis of an …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over an axis and and yields …\nAn iterator that traverses over an axis and and yields …\nWindow producer and iterable\nExact chunks producer and iterable.\nExact chunks iterator.\nExact chunks iterator.\nExact chunks producer and iterable.\nAn iterator over the indexes and elements of an array.\nAn iterator over the indexes and elements of an array …\nIndices producer and iterable.\nAn iterator over the indexes of an array shape.\nBy-value iterator for an array\nAn iterator over the elements of an array.\nAn iterator over the elements of an array (mutable).\nSee <code>.lanes()</code> for more information.\nAn iterator that traverses over all axes but one, and …\nAn iterator that traverses over all dimensions but the …\nSee <code>.lanes_mut()</code> for more information.\nWindow producer and iterable\nMatrix Multiplication\nThe result of the operation.\nGeneral matrix-matrix multiplication.\nGeneral matrix-vector multiplication.\nKronecker product of 2D matrices.\nAn array where the data has shared ownership and is copy …\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nAn axis index.\nAn array with copy-on-write behavior.\nDimension description.\nCreate a new dimension value.\nArray shape and index trait.\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nNext larger dimension\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nToken to represent a new axis in a slice description.\nPattern matching friendly form of the dimension value.\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nNext smaller dimension (if applicable)\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two, three, four, five, or six …\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nArray zip macro: lock step function application across …\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert the dimension into a pattern matching friendly …\nReturns the number of dimensions (number of axes).\nSlice argument constructor.\nCompute the size of the dimension (number of elements)\nCompute the size while checking for overflow.\nCreates a dimension of all zeros with the specified ndim.\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by versions 1 and 6 UUIDs to …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nThe type of sequence returned by this counter.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nAdapters for alternative string formats.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nAdapters for alternative <code>serde</code> formats.\nGenerating UUIDs from timestamps.\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nThe tensor did not have the right shape for an image (e.g. …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nThe <code>ChannelDatatype</code> for this type.\nHappens if you try to cast <code>NV12</code> or <code>YUY2</code> to a depth image …\nA normal grayscale or color image (<code>crate::archetypes::Image</code>…\nA depth map (<code>crate::archetypes::DepthImage</code>).\ne.g. failed to decode a JPEG file.\nTypes that implement this can be used as image channel …\nError returned when trying to interpret a tensor as an …\nErrors when converting images from the <code>image</code> crate to an …\nFailure to convert the loaded image to a …\nThe kind of image data, either color, segmentation, or …\nErrors when loading image files.\ne.g. failed to find a file on disk.\nA segmentation image (<code>crate::archetypes::SegmentationImage</code>…\nCould not convert source to <code>TensorData</code>.\nFailed to read the MIME type from inspecting the image …\nUnknown color type from the image crate.\nThe encountered MIME type is not supported for decoding …\nYuv matrix coefficients that determine how a YUV image is …\nConverts it to what is useful for the image API.\nReturns the indices of an appropriate set of dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns sRGB from YUV color.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nGenerates reflection about all known components.\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n16-bit floating point number.\n16-bit floating point number.\n32-bit floating point number.\n32-bit floating point number.\n64-bit floating point number.\n64-bit floating point number.\nSigned 16 bit integer.\nSigned 16 bit integer.\nSigned 32 bit integer.\nSigned 32 bit integer.\nSigned 64 bit integer.\nSigned 64 bit integer.\nSigned 8 bit integer.\nSigned 8 bit integer.\nErrors when trying to cast <code>TensorData</code> to an <code>ndarray</code>\nThe data types supported by a <code>crate::datatypes::TensorData</code>.\nThe data that can be stored in a …\nErrors when loading <code>TensorData</code> from the <code>image</code> crate.\nUnsigned 16 bit integer.\nUnsigned 16 bit integer.\nUnsigned 32 bit integer.\nUnsigned 32 bit integer.\nUnsigned 64 bit integer.\nUnsigned 64 bit integer.\nUnsigned 8 bit integer.\nUnsigned 8 bit integer.\nGet the value as a 64-bit floating point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\nNumber of bytes used by the type\nConvert the value to a <code>u16</code>, but only if it can be …\nLarge struct used for benchmarking.\nBuilds len instances of <code>LargeStruct</code>\nThe total number of components in the archetype: 22 …\nThe total number of components in the archetype: 19 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1019</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1020</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1021</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1022</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1118</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1122</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2118</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer1</code>.\nCreate a new <code>AffixFuzzer2</code>.\nCreate a new <code>AffixFuzzer3</code>.\nCreate a new <code>AffixFuzzer4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaby’s got it.\nFeeling blue.\n<strong>Datatype</strong>: A test of the enum type.\nIt’s the only way to go.\nIt’s what’s remaining.\nOne.\nCorrect.\nThe answer to life, the universe, and everything.\nThree.\nTwo.\nGreat film.\n<strong>Datatype</strong>: A test of an enumate with specified values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe first value.\nThe second value.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nThe six cardinal directions for 3D view-space and …\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nReturns the argument unchanged.\nConvert an upper case letter to one of the six cardinal …\nCalls <code>U::from(self)</code>.\nLong description of the direction, e.g. “Up”, “Down…\nRepresent this direction as the first letter of the …\nPositive or negative.\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nThe serialized contents of a <code>ComponentBatch</code> with …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nDeprecated. Do not use. See …\nExposes the object’s contents as a set of …\nThe component data.\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe number of instances of T stored in this buffer.\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nThe number of bytes stored in this buffer\nReturns a new <code>ArrowBuffer</code> that is a slice of this buffer …\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nGet the backtrace for this Error.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nThe lowest level cause of this error — this error’s …\nWrap the error value with additional context that is …\nArrow crate version\nDefines the low-level <code>Allocation</code> API for shared memory …\nStatically typed implementations of Arrow Arrays\nTypes of shared memory region\nComputation kernels on Arrow Arrays\nDefines the logical data types of Arrow arrays.\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDefines <code>ArrowError</code> for representing failures in various …\nPass Arrow objects from and to PyArrow, using Arrow’s C …\nContains the <code>RecordBatch</code> type and associated traits\nArrow Tensor Type, defined in <code>format/Tensor.fbs</code>.\nUtility functions for working with Arrow data\nCache and allocation multiple alignment size\nThe owner of an allocation. The trait implementation is …\nBuffer is always null. Unused currently in Rust …\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nDon’t preallocate inner buffers and rely on array growth …\nA generic trait for accessing the values of an <code>Array</code>\nTrait for dealing with different array builders at runtime\nA generic representation of Arrow array data which …\nBuilder for <code>ArrayData</code> type\nA thread-safe, shared reference to the Arrow array data.\nAn iterator that returns Some(T) or None, that can be used …\nA reference-counted reference to a generic <code>Array</code>\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nBinary, Utf8 and LargeUtf8 data types\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nArray builder for <code>BinaryViewArray</code>\nBuffer holds a bitmap.\nAn array of boolean values\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for creating a Buffer object.\nLayout specification for a single data type buffer\nHelper to access views of <code>GenericByteViewArray</code> (…\nDefine capacities to pre-allocate for child data or data …\nData type of the array.\nthe corresponding Arrow data type of this primitive type.\nThe data type constructor of list array. The input is the …\nThe data type constructor of listview array. The input is …\nLayout specification for a data type\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nA possibly <code>Scalar</code> <code>Array</code>\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nDictionary type\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nCompare the values at two arbitrary indices in two arrays.\nAn array of fixed size binary arrays\nBuilder for <code>FixedSizeBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of [fixed length lists], similar to JSON arrays …\nBuilder for <code>FixedSizeListArray</code>\nan iterator that returns Some(T) or None, that can be used …\nEach element is a fixed width primitive, with the given …\nA <code>PrimitiveArray</code> of <code>f16</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f32</code>\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f64</code>\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nA <code>GenericBinaryArray</code> for storing <code>[u8]</code>\nArray builder for <code>GenericBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of variable length byte arrays\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nVariable-size Binary View Layout: An array of variable …\nA builder for <code>GenericByteViewArray</code>\nAn array of variable length lists, similar to JSON arrays …\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>GenericListArray</code>\nDifferent from <code>crate::GenericListArray</code> as it stores both …\nan iterator that returns Some(T) or None, that can be used …\nA <code>GenericByteArray</code> for storing <code>str</code>\nArray builder for <code>GenericStringArray</code>\nan iterator that returns Some(T) or None, that can be used …\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>LargeListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nList and LargeList data types\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>ListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value and identity for the <code>max</code> aggregation. …\nAn array of key-value maps\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nEfficiently create an ArrayData from one or more existing …\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nBuilder for <code>NullArray</code>\nThe multiplicative identity\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nAn array of run-end encoded values\nA wrapper around a single value <code>Array</code> that implements <code>Datum</code>…\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nA <code>GenericByteViewArray</code> that stores utf8 data\nArray builder for <code>StringViewArray</code>\nStruct type\nAn array of structs\nBuilder for <code>StructArray</code>\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nBuilder for <code>UnionArray</code>\nVariable width, such as string data for utf8 data\nThe additive identity\nAdds a single buffer to the ArrayData’s buffers\nAdds multiple buffers to the ArrayData’s buffers\nChecked addition operation\nAdds a single child data to the ArrayData’s child data\nWrapping addition operation\nVerifies that the buffers meet the minimum alignment …\nThe concrete array definitions\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns the builder as a non-mutable <code>Any</code> reference.\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nReturns the builder as a mutable <code>Any</code> reference.\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an Array, such as an ArrayRef to …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nConvert <code>ByteView</code> to <code>u128</code> by concatenating the fields\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nReturns the <code>buffer</code> as a slice of type <code>T</code> starting at …\nThe buffer index.\nReturns the <code>Buffer</code> storing data for this <code>ArrayData</code>\nSets the buffers of the ArrayData\nA vector of buffer layout specifications, one for each …\nCreates an array data, validating all inputs\nCreates an array data, validating all inputs, and aligning …\nCreates an array data, without any validation\nDefines push-based APIs for constructing arrays\nReturns a builder to construct a <code>ArrayData</code> instance of the …\nReturns a new primitive array builder\nReturns a new boolean array builder\nReturns a new null array builder\nReturns an iterator over the bytes of this array, …\nCan contain a null bitmask\nDefines helper functions for downcasting <code>dyn Array</code> to …\nAccesses the child array for <code>type_id</code>.\nReturns a slice of children <code>ArrayData</code>. This will be non …\nSets the child data of the ArrayData\nWrite footer or termination data, then mark the writer as …\nReturns the field at <code>pos</code>.\nReturn child array whose field name equals to column_name\nReturn field names in this struct array\nReturns the fields of the struct array\nReturns child array refs of the struct array\nCompare operation\nCompare two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nCreates an array from a literal slice of values, suitable …\nReturns the buffers storing string data\nReturns a reference to the <code>DataType</code> of this array.\nReturns a reference to the <code>DataType</code> of this <code>ArrayData</code>\nCreates a new array data builder from an existing one, …\nReturns a default value of this primitive type.\nChecked division operation\nWrapping division operation\nDowncast this <code>RunArray</code> to a <code>TypedRunArray</code>\nDowncasts a <code>dyn Array</code> to a concrete type\nDowncast this dictionary to a <code>TypedDictionaryArray</code>\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDowncast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …\nReturns a reference to the <code>StructArray</code> entries of this map\n<code>Field</code> name for map entries\nExports an array to raw pointers of the C Data Interface …\nExtends the in progress array with a region of the input …\nExtends the in progress array with null elements, ignoring …\nReturns the number of non null, false values within this …\nContains declarations to bind to the C Data Interface.\nContains declarations to bind to the C Stream Interface.\nReturns the <code>Fields</code> of this <code>StructArray</code>\nBuilds the array\nBuilds the array without resetting the underlying builder.\nCreates a ArrayData from the in progress array, consuming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>BooleanArray</code> by evaluating the binary operation …\nCreates a <code>GenericListArray</code> from an iterator of primitive …\nCreates a <code>FixedSizeListArray</code> from an iterator of primitive …\nCreates a <code>GenericByteArray</code> based on an iterator of values …\nCreates a PrimitiveArray based on an iterator of values …\nCreates a <code>GenericByteViewArray</code> based on an iterator of …\nCreates a PrimitiveArray based on an iterator of values …\nCreates a GenericBinaryArray from a vector of Optional …\nConstruct a timestamp array from a vec of <code>Option&lt;i64&gt;</code> …\nCreates a <code>PrimitiveArray</code> from an iterator of trusted …\nApplies a unary infallible function to each value in an …\nCreate a <code>BooleanArray</code> by evaluating the operation for each …\nCreates a PrimitiveArray based on a constant value with …\nCreates a GenericBinaryArray from a vector of byte slices\nConstruct a timestamp array from a vec of i64 values and …\nReturns a “compacted” version of this array\nReturns the value for this <code>Datum</code> and a boolean indicating …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the total number of bytes of memory occupied by the\nReturns the byte width of this primitive type.\nGet the data type of the array.\nGet the data type of the array.\nReturns the physical index at which the array slice ends.\nReturns index to the physical array for the given index to …\nReturns the physical indices of the input logical indices. …\nReturns the total number of the bytes of memory occupied by\nReturns the physical index at which the array slice starts.\nGet a reference to a column’s array by name.\nReturns the first <code>len</code> bytes the inline value of the view.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns <code>GenericByteBuilder</code> of this byte array for mutating …\nConsume self and returns the in progress array as …\nConverts this <code>ArrayData</code> into an <code>ArrayDataBuilder</code>\nReturns a <code>PrimitiveBuilder</code> for this array, suitable for …\nReturns the underlying data of this array\nReturns the inner array\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nReturns <code>PrimitiveDictionaryBuilder</code> of this dictionary …\nReturns true if all data within this string array is ASCII\nReturns true if all data within this array is ASCII\nReturns true if all data within this array is ASCII\nReturns if this <code>PrimitiveArray</code> is compatible with the …\nReturns whether this array is empty.\nWhether this dictionary is empty\nReturns true if len is 0\nReturns whether this <code>ArrayData</code> is empty\nReturns whether this array is empty.\nReturns whether number of array slots is zero\nReturns whether this array is empty.\nEquality operation\nGreater than equals operation\nGreater than operation\nLess than equals operation\nLess than operation\nNot equal operation\nReturns whether the element at index <code>i</code> is null\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nCurrently exists for compatibility purposes with Arrow IPC.\nReturns whether the element at index <code>i</code> is not null\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nReturns true if zero else false\nConstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nConstructs a new iterator for iterating over the values of …\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nConstructs a new iterator\nIdiomatic iterators for <code>Array</code>\nReturn the value of <code>keys</code> (the dictionary key) at index <code>i</code>, …\n<code>Field</code> name for map key\nReturns the data type of the map’s keys.\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturn an array view of the keys of this dictionary as a …\nReturns the keys of this <code>TypedDictionaryArray</code>\nReturns a reference to the keys of this map\nReturn an iterator over the keys (indexes into the …\nReturn the expected <code>DataTypeLayout</code> Arrays of this data …\nReturns the length (i.e., number of elements) of this …\nReturns the number of array slots in the builder\nThe length of the dictionary is the length of the keys …\nReturns the current length\nReturns the length (i.e., number of elements) of this …\nSets the length of the ArrayData\nReturns the length of this array.\nReturns the length of this array.\nThe length of the string/bytes.\nCalculates the logical length of the array encoded by the …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nIf <code>value</code> is present in <code>values</code> (aka the dictionary), …\nConstructs an array using the input <code>data</code>. Returns a …\nReturns a builder with capacity for <code>capacity</code> elements of …\nReturns a comparison function that compares two values at …\nCreate a view based on the given data, block id and offset.\nMatch field names of structs and lists. If set to <code>true</code>, …\nChecked remainder operation\nWrapping remainder operation\nChecked multiplication operation\nWrapping multiplication operation\nCorresponding Rust native type if available\nChecked negation operation\nWrapping negation operation\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nAttempt to create a new DictionaryArray with a specified …\nReturns a new MutableArrayData with capacity to <code>capacity</code> …\nCreates a new array data builder\nCreate a new <code>GenericListArray</code> from the provided parts\nConstruct a <code>ByteView</code> for data <code>length</code> of bytes with the …\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>BooleanArray</code> from the provided values and …\nCreate a new <code>FixedSizeBinaryArray</code> with <code>size</code> element size, …\nCreate a new <code>FixedSizeListArray</code> with <code>size</code> element size, …\nCreate a new <code>MapArray</code> from the provided parts\nCreate a new <code>NullArray</code> of the specified length\nCreate a new <code>StructArray</code> from the provided parts, …\nCreate a new <code>GenericListViewArray</code> from the provided parts\nCreate a new <code>Scalar</code> from an <code>Array</code>\nDescribes a basic numeric array where each element has a …\nReturns a new empty ArrayData valid for <code>data_type</code>.\nDescribes arrays which have no data of their own (e.g. …\nCreates a new empty array\nCreate a new <code>StructArray</code> containing no fields\nDescribes a basic numeric array where each element has …\nCreate a new <code>BooleanArray</code> from a <code>Buffer</code> specified by <code>offset</code>…\nCreates map array from provided keys, values and …\nCreate a new <code>BooleanArray</code> from <code>&amp;[u8]</code> This method uses …\nDescribes a list view type\nCreate a new <code>GenericByteArray</code> of length <code>len</code> where all …\nReturns a new <code>ArrayData</code> valid for <code>data_type</code> containing <code>len</code> …\nCreate a new <code>GenericListArray</code> of length <code>len</code> where all …\nCreate a new <code>PrimitiveArray</code> of the given length where all …\nCreate a new <code>GenericByteViewArray</code> of length <code>len</code> where all …\nCreate a new <code>BooleanArray</code> with length <code>len</code> consisting only …\nCreate a new <code>FixedSizeBinaryArray</code> of length <code>len</code> where all …\nCreate a new <code>FixedSizeListArray</code> of length <code>len</code> where all …\nCreate a new <code>StructArray</code> of length <code>len</code> where all values …\nCreate a new <code>GenericListViewArray</code> of length <code>len</code> where all …\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nDescribes arrays which have no data of their own but may …\nCreate a new <code>Scalar</code> from <code>v</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nCreate a new <code>DictionaryArray</code> without performing validation\nCreate a new ArrayData instance;\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>StructArray</code> from the provided parts without …\nCreates a new <code>UnionArray</code>.\nDescribes a view type\nReads the next <code>RecordBatch</code>.\nReturns the keys of this dictionary as usize\nSets the <code>null_bit_buffer</code> of the ArrayData\nReturns the current null count\nReturns the total number of nulls in this array\nSets the null count of the ArrayData\nReturns the total number of physical null values in this …\nValidates the Decimal Array, if the value of slot is …\nReturns the null buffer of this array if any.\nReturns a reference to the null buffer of this <code>ArrayData</code> …\nSets the null buffer of the ArrayData\nReturns the number of <code>Unicode Scalar Value</code> in the string …\nReturn the number of fields in this struct array\nComputes an occupancy mask for this dictionary’s values\nReturns the offset into the underlying data used by this …\nReturns the offset of this <code>ArrayData</code>\nSets the offset of the ArrayData\nThe offset into the buffer.\nReturns a reference to the offsets of this array\nReturns a reference to the offsets of this list\nReturns a reference to the offsets of this map\nReturns the <code>offsets</code> buffer if this is a dense array\nReturns a reference to the offsets of this list\nChecked exponentiation operation\nWrapping exponentiation operation\nReturns the decimal precision of this array\nFirst 4 bytes of string/bytes data.\nReturns an iterator over the first <code>prefix_len</code> bytes of …\nReturns true if this <code>ArrayData</code> is equal to <code>other</code>, using …\nCreates a record batch from literal slice of values, …\nReinterprets this array’s contents as a different data …\nOptional row count, useful for specifying a row count for …\nReturns the run array of this <code>TypedRunArray</code>\nReturns a reference to <code>RunEndBuffer</code>\nReturns the run_ends of this <code>TypedRunArray</code>\nIdiomatic iterator for <code>RunArray</code>\nReturns the decimal scale of this array\nReturns the schema of this <code>RecordBatchReader</code>.\nShrinks the capacity of any exclusively owned buffer as …\nReturns a reference to the sizes of this list\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nCreates a zero-copy slice of itself. This creates a new …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nChecked subtraction operation\nWrapping subtraction operation\nReturns an iterator over the last <code>suffix_len</code> bytes of each …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nConversion methods for dates and times.\nTimezone for timestamp arrays\nReturns the timezone of this array if any\nConvert the <code>StringViewArray</code> to <code>BinaryViewArray</code>\nReturns the underlying data of this array\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code> If items …\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code>\nReturns the number of non null, true values within this …\nbuilds a StructArray from a vector of names and arrays.\nFallibly creates a <code>GenericStringArray</code> from a …\nCreate an array from an iterable argument of byte slices.\nCreate an array from an iterable argument of sparse byte …\nCreate an array from an iterable argument of sparse byte …\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nAttempt to create a new DictionaryArray with a specified …\nCreate a new ArrayData, validating that the provided …\nCreate a new <code>GenericListArray</code> from the provided parts\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nAttempts to create RunArray using given run_ends (index …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>FixedSizeBinaryArray</code> from the provided parts, …\nCreate a new <code>FixedSizeListArray</code> from the provided parts, …\nCreate a new <code>MapArray</code> from the provided parts\nCreate a new <code>StructArray</code> from the provided parts, …\nAttempts to create a new <code>UnionArray</code>, validating the inputs …\nCreate a new <code>GenericListViewArray</code> from the provided parts\nApplies a unary fallible function to all valid values in a …\nApplies a unary fallible function to all valid values in a …\nReturns the <code>type_id</code> for the array slot at <code>index</code>.\nReturns the <code>type_ids</code> buffer for this array\nReturns the names of the types in the union.\nZero-sized types used to parameterize generic array …\nApplies a unary infallible function to a primitive array, …\nApplies an unary and infallible function to a mutable …\nApplies a unary and infallible function to the array in …\nApplies a unary and nullable function to all valid values …\n“cheap” validation of an <code>ArrayData</code>. Ensures buffers are\nValidate that the data contained within this <code>ArrayData</code> is …\nValidates values in this array can be properly interpreted …\nPerforms a full recursive validation of this <code>ArrayData</code> and …\nValidates the values stored within this <code>ArrayData</code> are valid\nValidates the values stored within this <code>ArrayData</code> are valid\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns ith value of this list array.\nReturns the primitive value at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the boolean value at index <code>i</code>.\nReturns the element at index <code>i</code> as a byte slice.\nReturns ith value of this list array.\nReturns ith value of this map array.\nReturns the array’s value at index <code>i</code>.\nReturns ith value of this list view array.\n<code>Field</code> name for map value\nReturns value as a chrono <code>NaiveDate</code> by using …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns a value as a chrono <code>Duration</code>\nReturns <code>Self::value</code> formatted as a string\nReturns a value as a chrono <code>NaiveTime</code>\nReturns the raw value data\nReturns the raw value data.\nReturns the length for value at index <code>i</code>.\nReturns the length for value at index <code>i</code>.\nReturns the length for an element.\nReturns the length for an element.\nReturns the length for value at index <code>i</code>.\nReturns the offset for the element at index <code>i</code>.\nReturns the offset for value at index <code>i</code>.\nReturns the offset into the underlying values array for …\nReturns the offset for value at index <code>i</code>.\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer\nReturns the size for value at index <code>i</code>.\nReturns the sizes values in the offsets buffer\nReturns a clone of the value type of this list.\nReturns a clone of the value type of this list.\nReturns a clone of the value type of this list.\nReturns the data type of the map’s values.\nReturns a clone of the value type of this list.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns ith value of this list array.\nReturns the primitive value at index <code>i</code>.\nReturns the element at index <code>i</code> without bounds checking\nReturns the boolean value at index <code>i</code>.\nReturns the element at index <code>i</code> as a byte slice.\nReturns ith value of this map array.\nReturns ith value of this list view array.\nReturns the values of this dictionary\nReturns the values of this array\nReturns a reference to the dictionary values array\nReturns the values of this <code>TypedDictionaryArray</code>\nReturns a reference to the values of this list\nReturns the values of this array\nReturns a reference to values array\nReturns the values of this <code>TypedRunArray</code>\nReturns the underlying <code>BooleanBuffer</code> holding all the …\nReturns the values of this array.\nReturns a reference to the values of this list.\nReturns a reference to the values of this map\nReturns a reference to the values of this list\nThis field only applies to the view type …\nReturns the views buffer\nSet the <code>Self::buffer_index</code> field\nSimilar to MutableArrayData::new, but lets users define the\nOverrides the <code>DataType</code> of this <code>PrimitiveArray</code>\nSet the <code>Self::offset</code> field\nReturns a Decimal array with the same data as self, with …\nConstruct a timestamp array with new timezone\nConstruct a timestamp array with an optional timezone\nConstruct a timestamp array with UTC\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nReturns a new dictionary with the same keys as the current …\nWrite a single batch to the writer.\nThe alignment required by Rust for an array of the …\nThe width of each element in bytes\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nA generic trait for accessing the values of an <code>Array</code>\nA reference-counted reference to a generic <code>Array</code>\nTrait for primitive values.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nAn array of boolean values\nthe corresponding Arrow data type of this primitive type.\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nAn array of fixed size binary arrays\nAn array of [fixed length lists], similar to JSON arrays …\nA <code>PrimitiveArray</code> of <code>f16</code>\nA <code>PrimitiveArray</code> of <code>f32</code>\nA <code>PrimitiveArray</code> of <code>f64</code>\nA <code>GenericBinaryArray</code> for storing <code>[u8]</code>\nAn array of variable length byte arrays\nVariable-size Binary View Layout: An array of variable …\nAn array of variable length lists, similar to JSON arrays …\nDifferent from <code>crate::GenericListArray</code> as it stores both …\nA <code>GenericByteArray</code> for storing <code>str</code>\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nAn array of key-value maps\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nAn array of run-end encoded values\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> that stores utf8 data\nAn array of structs\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns a reference to the <code>DataType</code> of this array.\nReturns a default value of this primitive type.\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the byte width of this primitive type.\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nConstructs a new iterator\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturns the length (i.e., number of elements) of this …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nConstructs an array using the input <code>data</code>. Returns a …\nCorresponding Rust native type if available\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReturns the keys of this dictionary as usize\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nShrinks the capacity of any exclusively owned buffer as …\nReturns a zero-copy slice of this array with the indicated …\nReturns the underlying data of this array\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nTrait for dealing with different array builders at runtime\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nArray builder for <code>BinaryViewArray</code>\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nBuilder for creating a Buffer object.\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nBuilder for <code>FixedSizeBinaryArray</code>\nBuilder for <code>FixedSizeListArray</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nArray builder for <code>GenericBinaryArray</code>\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nA builder for <code>GenericByteViewArray</code>\nBuilder for <code>GenericListArray</code>\nArray builder for <code>GenericStringArray</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>LargeListArray</code>\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nBuilder for <code>ListArray</code>\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nBuilder for <code>NullArray</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nArray builder for <code>StringViewArray</code>\nBuilder for <code>StructArray</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …")