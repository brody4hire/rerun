searchState.loadedDescShard("rerun", 14, "Extracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nParse the given string into a string representing …\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nReturns the value of the target field when selected, or …\nShifts array by defined number of items (to left or right) …\nZip two arrays by some boolean mask. Where the mask …\nA subtype of primitive type that represents legal …\nTrait expressing a Rust type that has the same in-memory …\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nOpaque binary data of variable length.\nAn arrow binary array with i32 offsets\nOpaque binary data of variable length.\n<code>BinaryViewType</code> for string arrays\nA boolean datatype representing the values <code>true</code> and <code>false</code>.\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nThe corresponding Arrow data type\nThe maximum precision for DataType::Decimal128 values\nThe maximum scale for DataType::Decimal128 values\nThe maximum precision for DataType::Decimal256 values\nThe maximum scale for DataType::Decimal256 values\nThe default scale for DataType::Decimal128 and …\nDefault values for <code>DataType</code>\nDatatypes supported by this implementation of Apache Arrow.\nA signed 32-bit date representing the elapsed time since …\n32-bit date type: the elapsed time since UNIX epoch in …\nA signed 64-bit date representing the elapsed time since …\n64-bit date type: the elapsed time since UNIX epoch in …\nIndicates the number of elapsed days and milliseconds, …\nExact 128-bit width decimal value with precision and scale\nThe decimal type for a Decimal128Array\nExact 256-bit width decimal value with precision and scale\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nDense union layout\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time in either seconds, milliseconds, …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\nDescribes a single column in a <code>Schema</code>.\nA reference counted <code>Field</code>\nA cheaply cloneable, owned slice of <code>FieldRef</code>\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some logical data type with fixed length.\nA 16-bit floating point number.\n16-bit floating point number type.\nA 32-bit floating point number.\n32-bit floating point number type.\nA 64-bit floating point number.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nA signed 16-bit integer.\nSigned 16-bit integer type.\nA signed 32-bit integer.\nSigned 32-bit integer type.\nA signed 64-bit integer.\nSigned 64-bit integer type.\nA signed 8-bit integer.\nA signed 8-bit integer type.\nA “calendar” interval which models types that don’t …\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\nYEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.\n32-bit “calendar” interval type: the number of whole …\nOpaque binary data of variable length and 64-bit offsets.\nAn arrow binary array with i64 offsets\nA list of some logical data type with variable length and …\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nA variable-length string in Unicode with UFT-8 encoding …\nAn arrow utf8 array with i64 offsets\nA list of some logical data type with variable length.\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nThe maximum value that can be represented by this integer …\nThe maximum value that can be represented\nThe maximum value that can be represented\n<code>MAX_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the maximum <code>i128</code> …\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value that can be represented by this integer …\nThe minimum value that can be represented\nThe minimum value that can be represented\nThe multiplicative inverse for this integer type, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the minimum <code>i128</code> …\nThe minimum value and identity for the <code>max</code> aggregation. …\nA Map is a logical nested type that is represented as\nTime in microseconds.\nTime in milliseconds.\nA triple of the number of elapsed months, days, and …\nTime in nanoseconds.\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nNull type\nThe multiplicative identity for this integer type, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA run-end encoding (REE) is a variation of run-length …\nA subtype of primitive type that is used as run-ends index …\nDescribes the meta-data of an ordered sequence of relative …\nA builder to facilitate building a <code>Schema</code> from iteratively …\nA reference-counted reference to a <code>Schema</code>.\nTime in seconds.\nSparse union layout\n<code>ByteViewType</code> for string arrays\nA nested datatype that contains a number of sub-fields.\nfn to create its <code>DataType</code>\nA signed 32-bit time representing the elapsed time since …\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\nA signed 64-bit time representing the elapsed time since …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nAn absolute length of time in seconds, milliseconds, …\nA timestamp with an optional timezone.\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nAllows conversion from supported Arrow types to a byte …\nAn unsigned 16-bit integer.\nUnsigned 16-bit integer type.\nAn unsigned 32-bit integer.\nUnsigned 32-bit integer type.\nAn unsigned 64-bit integer.\nUnsigned 64-bit integer type.\nAn unsigned 8-bit integer.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nA nested datatype that can represent slots of differing …\nA cheaply cloneable, owned collection of <code>FieldRef</code> and …\nSparse or Dense union layouts\nA variable-length string in Unicode with UTF-8 encoding.\nAn arrow utf8 array with i32 offsets\nA variable-length string in Unicode with UTF-8 encoding\nIndicates the number of elapsed whole months, stored as …\nThe additive identity for this integer type, i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity\nChecked addition operation\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow Date32Type\nAdds the given IntervalDayTimeType to an arrow Date64Type\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nWrapping addition operation\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow Date32Type\nAdds the given IntervalYearMonthType to an arrow Date64Type\nReturns a vector with references to all fields (including …\nWraps this <code>i256</code> into an <code>i128</code>\nConvert to usize according to the <code>as</code> operator\nComputes the absolute value of this i256 returning <code>None</code> if …\nComputes the absolute value\nComputes the absolute value\nPerforms checked addition\nPerforms checked addition\nPerforms checked addition\nPerforms checked division\nPerforms checked division\nPerforms checked division\nPerforms checked multiplication\nPerforms checked multiplication\nPerforms checked multiplication\nNegates this i256 returning <code>None</code> if <code>Self == Self::MIN</code>\nNegates the value\nNegates the value\nPerforms checked exponentiation\nPerforms checked exponentiation\nPerforms checked exponentiation\nPerforms checked remainder\nPerforms checked remainder\nPerforms checked remainder\nPerforms checked subtraction\nPerforms checked subtraction\nPerforms checked subtraction\nLook up a column by name and return a immutable reference …\nCompare operation\nCheck to see if <code>self</code> is a superset of <code>other</code>\nCheck to see if <code>self</code> is a superset of <code>other</code> field. …\nCheck to see if <code>self</code> is a superset of <code>other</code>\nCheck to see if <code>self</code> is a superset of <code>other</code> schema.\nReturns an immutable reference to the <code>Field</code>’s  <code>DataType</code>.\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nReturns the dictionary ID, if this is a dictionary type.\nReturns whether this <code>Field</code>’s dictionary is ordered, if …\nChecked division operation\nWrapping division operation\nReturns a new empty <code>Fields</code>\nCreate a new <code>UnionFields</code> with no fields\nCreates an empty <code>Schema</code>\nCompares the datatype with another, ignoring nested field …\nReturns an immutable reference to the <code>FieldRef</code> at index <code>idx</code>\nReturns an immutable reference of a specific <code>Field</code> …\nReturns a mutable reference to the <code>FieldRef</code> at index <code>idx</code>\nReturns an immutable reference of a specific <code>Field</code> …\nReturns an immutable reference of the vector of <code>Field</code> …\nA sequence of fields that describe the schema.\nReturns a vector of immutable references to all <code>Field</code> …\nReturns a copy of this <code>Fields</code> containing only those …\nSearches for a field by name, returning it along with its …\nConsume this <code>SchemaBuilder</code> yielding the final <code>Schema</code>\nReturns a vector with references to all fields (including …\nFormats the decimal value with the provided precision and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an integer value from its representation as a byte …\nCreate an optional i256 from the provided <code>f64</code>. Returning …\nConvert native type from i128.\nCreate an <code>i256</code> value from a 128-bit value.\nConvert native type from i32.\nConvert native type from i64.\nCreate an integer value from its representation as a byte …\nConverts a chrono::NaiveDate into an arrow Date32Type\nConverts a chrono::NaiveDate into an arrow Date64Type\nCreate an i256 from the provided low u128 and high i128\nCreate an integer value from its representation as string.\nConvert native integer type from usize\nReturns the byte width of this native type.\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nA signed 256-bit integer\nFind the index of the column with the given name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this type is valid as a dictionary key\nReturns <code>true</code> if this is empty\nEquality operation\nReturns true if this type is floating: (Float*).\nGreater than equals operation\nGreater than operation\nReturns true if this type is integer: (Int*, UInt*).\nLess than equals operation\nLess than operation\nNot equal operation\nReturns <code>true</code> if this <code>i256</code> is negative\nReturns true if this type is nested (List, FixedSizeList, …\nReturns true if this type is DataType::Null.\nIndicates whether this <code>Field</code> supports null values.\nReturns true if this type is numeric: (UInt*, Int*, Float*…\nReturns <code>true</code> if this <code>i256</code> is positive\nReturns true if the type is primitive: (numeric, temporal).\nReturns true if this type is valid for run-ends array in …\nReturns true if this type is signed integer: (Int*).\nReturns true if this type is temporal: (Date*, Time*, …\nReturns true if this type is unsigned integer: (UInt*).\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nDetermines whether the specified <code>i256</code> value can be properly\nDetermines whether the specified <code>i128</code> value can be properly\nReturns true if zero else false\nReturns an iterator over the fields and type ids in this …\nReturns the number of fields in this <code>UnionFields</code>\nCreates a ArrowTimestampType::Native from the provided …\nCreates a IntervalYearMonthType::Native\nCreates a IntervalDayTimeType::Native\nCreates a IntervalMonthDayNanoType::Native\nReturns the immutable reference to the <code>Field</code>’s optional …\nReturns an immutable reference to the Map of custom …\nReturns an immutable reference to the Map of custom …\nA map of key-value pairs containing additional meta data.\nReturns a mutable reference to the Map of custom metadata …\nNumber of milliseconds\nChecked remainder operation\nWrapping remainder operation\nNumber of months\nChecked multiplication operation\nWrapping multiplication operation\nReturns an immutable reference to the <code>Field</code>’s name.\nNumber of nanoseconds\nChecked negation operation\nWrapping negation operation\nCreates a new field with the given name, type, and …\nCreate a new <code>UnionFields</code> from a <code>Fields</code> and array of …\nCreates a new empty <code>SchemaBuilder</code>\nCreates a new <code>Schema</code> from a sequence of <code>Field</code> values.\nCreate a new <code>IntervalMonthDayNano</code>\nCreate a new <code>IntervalDayTime</code>\nCreates a new field that has additional dictionary …\nCreate a new <code>Field</code> with <code>DataType::Dictionary</code>\nCreate a <code>DataType::FixedSizeList</code> with elements of the …\nCreate a new <code>Field</code> with <code>DataType::FixedSizeList</code>\nCreate a <code>DataType::LargeList</code> with elements of the …\nCreate a new <code>Field</code> with <code>DataType::LargeList</code>\nCreate a <code>DataType::List</code> with elements of the specified type\nCreate a new <code>Field</code> with <code>DataType::List</code>\nCreates a new <code>Field</code> suitable for <code>DataType::List</code> and …\nCreate a new <code>Field</code> with <code>DataType::Map</code>\nCreate a new <code>Field</code> with <code>DataType::Struct</code>\nCreate a new <code>Field</code> with <code>DataType::Union</code>\nCreates a new <code>Schema</code> from a sequence of <code>Field</code> values and …\nChecked exponentiation operation\nWrapping exponentiation operation\nReturns the byte width of this type if it is a primitive …\nReturns a new schema with only the specified columns in …\nAppends a <code>FieldRef</code> to this <code>SchemaBuilder</code> without checking …\nRemoves and returns the <code>FieldRef</code> as index <code>idx</code>\nReverse the fileds\nSets the <code>Field</code>’s optional custom metadata.\nReturns a number <code>i256</code> representing sign of this <code>i256</code>.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nChecked subtraction operation\nWrapping subtraction operation\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nReturn the memory representation of this integer as a byte …\nConverts this instance into a byte slice\nConverts this <code>i256</code> into an <code>i128</code> returning <code>None</code> if this …\nConvert native type to i64.\nConvert native type to isize.\nReturn the memory representation of this integer as a byte …\nTurns a IntervalYearMonthType type into an i32 of months.\nConverts an arrow Date32Type into a chrono::NaiveDate\nConverts an arrow Date64Type into a chrono::NaiveDate\nReturns this <code>i256</code> as a low u128 and high i128\nTurns a IntervalDayTimeType into a tuple of (days, …\nTurns a IntervalMonthDayNanoType into a tuple of (months, …\nConvert native type to usize.\nReturns a copy of this <code>Fields</code> containing only those …\nSee CDataInterface docs\nMerge this field into self if it is compatible.\nAppends a <code>FieldRef</code> to this <code>SchemaBuilder</code> checking for …\nMerge schema into self if it is compatible. Struct fields …\nConvert from usize according to the <code>as</code> operator\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nCreates a new empty <code>SchemaBuilder</code> with space for <code>capacity</code> …\nSet <code>DataType</code> of the <code>Field</code> and returns self.\nSets the metadata of this <code>Field</code> to be <code>metadata</code> and returns …\nSets the metadata of this <code>Schema</code> to be <code>metadata</code> and …\nSet the name of the <code>Field</code> and returns self.\nSet <code>nullable</code> of the <code>Field</code> and returns self.\nComputes the absolute value of this i256\nComputes the absolute value\nComputes the absolute value\nPerforms wrapping addition\nPerforms wrapping addition\nPerforms wrapping addition\nPerforms wrapping division\nPerforms wrapping division\nPerforms wrapping division\nPerforms wrapping multiplication\nPerforms wrapping multiplication\nPerforms wrapping multiplication\nNegates this i256\nNegates the value\nNegates the value\nPerforms wrapping exponentiation\nPerforms wrapping exponentiation\nPerforms wrapping exponentiation\nPerforms wrapping remainder\nPerforms wrapping remainder\nPerforms wrapping remainder\nPerforms wrapping subtraction\nPerforms wrapping subtraction\nPerforms wrapping subtraction\nError when an arithmetic operation overflows.\nMany different operations in the <code>arrow</code> crate return this …\nError during import or export to/from the C Data Interface\nError during casting from one type to another.\nError during computation.\nError during CSV-related operations.\nError when a dictionary key is bigger than the key type\nError during division by zero.\nContains the error value\nWraps an external error.\nError indicating that an unexpected or bad argument was …\nError during IO operations.\nError during IPC operations in <code>arrow-ipc</code> or <code>arrow-flight</code>.\nError during JSON-related operations.\nMemory or buffer error.\nReturned when functionality is not yet available.\nContains the success value\nError during Parquet operations.\nError during parsing from a string.\nA specialized <code>Result</code> type for Arrow operations.\nError when the run end index in a REE array is bigger than …\nError during schema-related operations.\nReturns the argument unchanged.\nWraps an external error in an <code>ArrowError</code>.\nCalls <code>U::from(self)</code>.\nEach constituent buffer is first compressed with the …\nOpaque binary data\nLogically the same as Binary, but the internal …\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nA Buffer represents a single contiguous memory segment\nThe stream makes use of compressed bodies as described in …\nThe stream makes use of multiple full dictionaries with the\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nFor sending dictionary encoding information. Any Field can …\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nData structures for describing a table row batch (a …\nArrow File metadata\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThe root Message type This union enables us to easily send …\nThese are stored in the flatbuffer in the Type union below\nA data header describing the shared memory layout of a “…\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nA Struct_ in the flatbuffer metadata is the same as an …\nData structures for dense tensors Shape data for a single …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nNeeded to make flatbuffers happy.\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\n0.1.0 (October 2016).\n0.2.0 (February 2017). Non-backwards compatible with V1.\n0.3.0 -&gt; 0.7.1 (May - December 2017). Non-backwards …\n= 0.8.0 (December 2017). Non-backwards compatible with V3.\n= 1.0.0 (July 2020). Backwards compatible with V4 (V5 …\naxisOrder stores the sequence in which dimensions were …\nNumber of bits per value. The only accepted widths are 128 …\nLength of the data (this is aligned so there can be a gap …\nBuffers correspond to the pre-ordered flattened buffer tree\nNumber of bytes per value\nchildren apply only to nested data types like Struct, List …\nCompressor library. For LZ4_FRAME, each compressed buffer …\nWhich axis, row or column, is compressed\nOptional compression of the message body\nUtilities for converting between IPC types and native …\nUser-defined metadata\nUser-defined metadata\nThe location and size of the tensor’s data\nThe location and size of the tensor’s data\nPresent only if the field is dictionary encoded.\nendianness of the buffer it is Little Endian by default if …\nReturns true if the endianness of the source system …\nFeatures used in the stream/file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerated code\nThe known dictionary id in the application where this data …\nThe dictionary indices are constrained to be non-negative …\nThe location and size of the indices matrix’s data\nindicesBuffer stores the location and size of the array …\nindicesBuffers stores values of nodes. Each tensor …\nNon-negative byte offsets to advance one value cell along …\nThe type of values in indicesBuffer\nThe type of values in indicesBuffer\nThe type of values in indicesBuffers\nindptrBuffer stores the location and size of indptr array …\nindptrBuffers stores the sparsity structure. Each two …\nThe type of values in indptrBuffer\nCSF is a generalization of compressed sparse row (CSR) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis flag is true if and only if the indices matrix is …\nIf isDelta is true the values in the dictionary are to be …\nBy default, dictionaries are not ordered, or the order …\nSet to true if the keys within each value are sorted\nThe number of value slots in the Arrow array at this level …\nnumber of records / rows. The arrays in the batch should …\nThe absolute length (in bytes) of the memory buffer. The …\nNumber of list items per value\nLength of the metadata\nIndicates the way the record batch body was compressed\nName is not required, in i.e. a List\nName of the dimension, optional\nNodes correspond to the pre-ordered flattened logical …\nThe number of non-zero values in a sparse tensor.\nThe number of observed nulls. Fields with null_count == 0 …\nWhether or not this field can contain nulls. Should be …\nIndex to the start of the RecordBlock (note this is past …\nThe relative offset into the shared memory page where the …\nTotal number of decimal digits\nArrow IPC File and Stream Readers\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nNumber of digits after the decimal point “.”\nThe dimensions of the tensor, optionally named.\nThe dimensions of the tensor, optionally named\nLength of dimension\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nSparse tensor index\nNon-negative byte offsets to advance one value cell along …\nThe timezone is an optional string indicating the name of …\nThis is the type of the decoded value if the field is …\nThe type of data contained in a value cell. Currently only …\nThe type of data contained in a value cell. Currently only …\nSome types such as Utf8View are represented using a …\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nArrow IPC File and Stream Writers\nLow level Arrow Schema to IPC bytes converter\nAn owned container for a validated <code>Message</code>\nReturn the <code>Message</code>\nDeserialize an ipc crate::Schema` from flat buffers to an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPush a key-value metadata into a FlatBufferBuilder and …\nCreate a new schema encoder\nSerialize a schema in IPC format\nSerialize a schema in IPC format, returning a completed …\nAdds a Schema to a flatbuffer and returns the offset\nSerialize a schema to an in progress <code>FlatBufferBuilder</code>, …\nTry to create a <code>MessageBuffer</code> from the provided <code>Buffer</code>\nTry deserialize flat buffer format bytes into a schema\nTry deserialize the IPC format bytes into a schema\nSpecify a dictionary tracker to use\nArrow File metadata\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nFor sending dictionary encoding information. Any Field can …\nData structures for describing a table row batch (a …\nThe root Message type This union enables us to easily send …\nA data header describing the shared memory layout of a “…\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOpaque binary data\nLogically the same as Binary, but the internal …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThese are stored in the flatbuffer in the Type union below\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nA Struct_ in the flatbuffer metadata is the same as an …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nData structures for dense tensors Shape data for a single …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nA low-level, push-based interface for reading an IPC file\nArrow File reader\nBuild an Arrow <code>FileReader</code> with custom options.\nA low-level interface for reading <code>RecordBatch</code> data from a …\nArrow Stream reader\nBuild <code>FileReader</code> with given reader.\nReturn user defined customized metadata\nTry to read the next <code>RecordBatch</code> from the provided <code>Buffer</code>\nSignal the end of stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying reader.\nGets a reference to the underlying reader.\nGets a reference to the underlying reader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the stream is finished\nCreate a new <code>StreamDecoder</code>\nCreate a new <code>FileDecoder</code> with the given schema and version\nOptions for creating a new <code>FileReader</code>.\nReturn the number of batches in the file\nRead the dictionary from the buffer and provided metadata, …\nRead the dictionary with the given block and data buffer\nRead the footer length from the last 10 bytes of an Arrow …\nCreates a record batch from binary data using the …\nRead the RecordBatch with the given block and data buffer\nReturn the schema of the file\nReturn the schema of the stream\nRead a specific record batch\nTry to create a new file reader.\nTry to create a new stream reader.\nTry to create a new file reader with the reader wrapped in …\nTry to create a new stream reader with the reader wrapped …\nDeprecated, use <code>StreamReader::try_new</code> instead.\nFlatbuffers option for parsing the footer. Controls the …\nFlatbuffers option for parsing the footer. Controls the …\nSpecify a projection\nOptional projection for which columns to load (zero-based …\nSpecifies whether or not array data in input buffers is …\nSpecifies whether or not array data in input buffers is …\nKeeps track of dictionaries that have been written, to …\nStores the encoded data, which is an crate::Message, and …\nWriter for an IPC file\nHandles low level details of encoding <code>Array</code> and <code>Schema</code> …\nIPC write options used to control the behaviour of the …\nWriter for an IPC stream\nArrow buffers to be written, should be an empty vec for …\nReturn the sequence of dictionary IDs in the order they …\nEncodes a batch to a number of EncodedData items …\nWrite footer and closing tag, then mark the writer as done\nWrite continuation bytes, and mark the stream as done\nFlush the underlying writer.\nFlush the underlying writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying writer.\nGets a reference to the underlying writer.\nGets a reference to the underlying writer.\nKeep track of the dictionary with the given ID and values. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the the underlying writer.\nUnwraps the the underlying writer.\nAn encoded crate::Message\nCreate a new <code>DictionaryTracker</code>.\nCreate a new <code>DictionaryTracker</code>.\nReturn whether the writer is configured to preserve the …\nReturns the arrow <code>SchemaRef</code> for this arrow file.\nConverts a schema to an IPC message and returns it encoded …\nConverts a schema to an IPC message along with …\nSet the dictionary ID for <code>field</code>.\nTry to create a new writer, with the schema written as …\nTry to create a new writer, with the schema written as …\nTry to create IpcWriteOptions, checking for incompatible …\nTry to create a new file writer with the writer wrapped in …\nTry to create a new stream writer with the writer wrapped …\nTry to create a new writer with IpcWriteOptions\nTry to create a new writer with <code>IpcWriteOptions</code>.\nConfigures compression when writing IPC files.\nSet whether the IPC writer should preserve the dictionary …\nWrite a record batch to the file\nWrite a record batch to the stream\nWrite a message’s IPC data and buffers, returning …\nAdds a key-value pair to the FileWriter’s custom metadata\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a Python object to an arrow-rs type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the implemented type into a Python object while …\nCreates a new <code>PyErr</code> of this type.\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nGet a reference to a column’s array by index.\nGet a reference to a column’s array by name.\nGet a reference to all columns in the record batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the total number of bytes of memory occupied …\nGet a reference to a column’s array by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch field names of structs and lists. If set to <code>true</code>, …\nCreate a new RecordBatchIterator.\nCreates a new <code>RecordBatchOptions</code>\nCreates a new empty <code>RecordBatch</code>.\nReads the next <code>RecordBatch</code>.\nReturns the number of columns in the record batch.\nReturns the number of rows in each column.\nProjects the schema onto the specified columns\nRemove column by index and return it.\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nReturns the <code>Schema</code> of the record batch.\nReturns a reference to the <code>Schema</code> of the record batch.\nReturn a new RecordBatch where each column is sliced …\nCreate a <code>RecordBatch</code> from an iterable list of pairs of the …\nCreate a <code>RecordBatch</code> from an iterable list of tuples of the\nCreates a <code>RecordBatch</code> from a schema and columns.\nCreates a <code>RecordBatch</code> from a schema and columns, with …\nSets the match_field_names of RecordBatchOptions and …\nSets the row_count of RecordBatchOptions and returns self\nOverride the schema of this <code>RecordBatch</code>\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nConvert <code>ArrayRef</code> columns appending to an existing <code>Rows</code>\nSets the length of this <code>Rows</code> to 0\nConvert <code>ArrayRef</code> columns into <code>Rows</code>\nConvert <code>Rows</code> columns into <code>ArrayRef</code>\nThe row’s bytes, with the lifetime of the underlying …\nReturns an empty <code>Rows</code> with capacity for <code>row_capacity</code> rows …\nEncode dictionary values not preserving the dictionary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Rows instance from the given binary data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the <code>Row</code> in this <code>Rows</code>\nCreate a new <code>RowConverter</code> with the provided schema\nCreate a new column with the given data type\nCreate a new column with the given data type and …\nReturns the number of <code>Row</code> in this <code>Rows</code>\nCreate owned version of the row to detach it from the …\nCreates a <code>Row</code> from the provided <code>bytes</code>.\nReturns a <code>RowParser</code> that can be used to parse <code>Row</code> from …\nAppend a <code>Row</code> to this <code>Rows</code>\nReturns the row at index <code>row</code>\nGet borrowed <code>Row</code> from owned version.\nReturns the row at <code>index</code> without bounds checking\nReturns the size of this instance in bytes\nReturn size of this instance in bytes.\nReturns the size of this instance in bytes\nCheck if the given fields are supported by the row format.\nCreate a BinaryArray from the Rows data without …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nReturns a reference to the underlying <code>Buffer</code>\nThe data type of the <code>Tensor</code>\nThe name of dimension i\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates if the memory layout column major\nIndicates if the data is laid out contiguously in memory\nIndicates if the memory layout row major\nThe names of the dimensions\nThe number of dimensions\nCreates a new Tensor using column major memory layout\nCreates a new Tensor using row major memory layout\nThe sizes of the dimensions\nThe total number of elements in the <code>Tensor</code>\nThe number of bytes between elements in each dimension\nCreates a new <code>Tensor</code>\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nReturns the number of chunks\nReturns reference to the chunks\nCounts the number of ones\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the chunks\nReturns an iterator over chunks of 64 bits represented as …\nReturns an iterator over chunks of 64 bits, with the …\nReturns the number of leading padding bits\nCreate a from a byte array, and and an offset and length …\nCreate a new <code>BitChunks</code> from a byte array, and an offset …\nReturns the prefix, if any\nReturns the bitmask of remaining bits\nReturns the number of remaining bits, guaranteed to be …\nReturns the suffix, if any\nReturns the number of trailing padding bits\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BitIterator</code> from the provided <code>buffer</code>, and …\nCreate a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …\nCreate a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts numeric type to a <code>String</code>\nCreates a new set of format options\nReturns an <code>ArrayFormatter</code> that can be used to format <code>array</code>\nFallibly converts this to a string\nReturns a <code>ValueFormatter</code> that implements <code>Display</code> for the …\nOverrides the format used for <code>DataType::Date32</code> columns\nOverrides the format used for <code>DataType::Date64</code> columns\nIf set to <code>true</code> any formatting errors will be written to …\nOverrides the format used for duration columns\nOverrides the string used to represent a null\nOverrides the format used for <code>DataType::Time32</code> and …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nWrites this value to the provided <code>Write</code>\nA writer that allows writing to a <code>String</code> like an …\nExecutes the given command directly.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StringWriter</code>\nQueues the given command for further execution.\nPerforms a set of actions within a synchronous update.\nWe give an actual name to <code>Tuid</code>, and inject that name into …\nAll ones.\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.\nCreate a new unique <code>Tuid</code> based on the current time.\nReturns the next logical <code>Tuid</code>.\nA shortened string representation of the <code>Tuid</code>.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes a placeholder for a given arrow datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nThe name of the field (i.e. same as …\nIterate over this archetype’s required fields.\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\nIf true, we hide the native window decoration (the top bar …\nA table mapping all combination of <code>Hue</code> and <code>Scale</code> to a …\nA token representing a color in the global color table.\nExtension trait for <code>egui::Context</code>.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nA hue for a <code>ColorToken</code>.\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nDisplay a short summary. Used in lists.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nA color scale for a <code>ColorToken</code>.\nA collapsible section header, with support for optional …\nDisplay everything as wide as available, without height …\nDisplay as much information as possible in a compact way. …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nSpecifies the context in which the UI is used and the …\nLabel displaying the placeholder text for a yet unnamed …\nApply the Rerun design tokens to the given egui context …\nFor the streams view (time panel)\nDraw a bullet (for text lists).\nSet the button to be shown in the header.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nLayout area to allocate for the collapsing triangle.\nGet the <code>egui::Color32</code> corresponding to the provided …\nColor table for all colors used in the UI.\nSet the default open state of the section header.\nReturn a reference to the global design tokens structure.\nHelpers for drag and drop support for reordering …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nStroke used to indicate that a UI element is a container …\nShows an error label with the entire error text and copies …\nText colored to indicate an error.\nShows a small error label with the given text on hover and …\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturn the keyboard shortcut for this command, nicely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nHeight of the top bar\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nHovered UI and spatial primitives should have this outline.\nHuman readable unique id\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll keyboard shortcuts, with the primary first.\nSecond-generation list item.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nConvenience function to create a <code>list_item::list_item_scope</code>…\nLoad design tokens from <code>data/design_tokens.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nShow some markdown\nConditionally collapsing header.\nShow this command as a menu-button.\nShow some close/maximize/minimize buttons for the native …\nCreate a new <code>Self</code>.\nBuild a new color table by calling the provided closure …\nPaint a collapsing triangle in the Rerun’s style.\nPaints a time cursor for indicating the time on a time …\nPaint a watermark\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nThe color for the background of …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nSelected UI and spatial primitives should have this …\nDisplay the header.\nShow the command palette, if it is visible.\nAdds a non-interactive, optionally tinted small icon.\nShows a success label with a large border.\nText colored to indicate success.\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nBinary toggle switch.\nHeight of the top-most bar.\nMargin on all sides of views.\nShows a warning label with a large border.\nText colored to indicate a warning.\nA small, self-container pan-and-zoom area for <code>egui</code>.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\nFull-text, case-insensitive matcher.\nState and UI for the filter widget.\nReturn a filter matcher for the current query.\nGiven a list of highlight sections defined by start/end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDoes the given text match the filter?\nIs the filter set to match everything?\nReturns a formatted version of the text with the matching …\nIs the filter set to match nothing?\nReturn the filter if any.\nReturn the current session ID of the filter widget, if …\nDisplay the filter widget.\n<code>&gt;</code>\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nHuman readable unique id\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that mostly delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nAlways show the buttons.\nBackground area\nResponse from the body, if it was displayed.\nAdd a right-aligned <code>super::ItemButton</code>.\nAdd a right-aligned <code>super::ItemButton</code>.\nThe desired width of the content.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nMake the item draggable.\nHighlight the item as the current drop target.\nSets whether the button is enabled.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the hover text of the button.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nResponse from the item itself.\nStyle the label for an unnamed items.\nLayout information to use for rendering.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired for the content.\nSet the minimum desired width for the entire content.\nCreate a content with a custom UI closure.\nCreate a new <code>ListItem</code> with the given label.\nCalled when the button is clicked.\n0.0 if fully closed, 1.0 if fully open, and something …\nArea available for the content to draw in.\nRegister the desired width of the left column.\nIndicate whether right-aligned space should be reserved …\nList item response.\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nDisplay value only for leaf or collapsed items.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nUI for everything that is after the indent and the …\nDraw the button.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nSet the desired width based on the provided content width. …\nSet the desired width for the entire content.\nSet the item height.\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nProvide a custom closure to draw an icon on the left of …\nHelper object to handle a <code>ModalWrapper</code> window.\nShow a modal window with Rerun style using <code>egui::Modal</code>.\nResponse returned by <code>ModalWrapper::ui</code>.\nSet the default height of the modal window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nWhat the content closure returned if it was actually run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model the next time the <code>ModalHandler::ui</code> method …\nWhether the modal should remain open.\nEnclose the contents in a scroll area.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nAn enum representing the available verbosity levels of the …\nThe “trace” level.\nThe “warn” level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormats an instance number enclosed in square brackets: …\nEasily build syntax-highlighted text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a transformation that fits a given scene rectangle …\nProvides a zoom-pan area for a given view.\nThe payload type is acceptable and could successfully be …\nMake this the active application.\nIf this is a recording, switch to it.\nWe are looping the entire recording.\nSelect a specific application, to see which recordings and …\nGlobal options for the viewer.\nList of entities that are <em>applicable</em> to a given visualizer.\nSelection and hover state.\nA unique id for a type of Blueprint contents.\nThe stream tree from the blueprint debug time panel\nThe stream tree from the blueprint debug time panel, when …\nBlueprint tree from the blueprint panel (left panel)\nWe store the entire edit history of a blueprint in its …\nA cache for memoizing things in order to speed up …\nDoes memoization of different objects for the immediate …\nClear the active blueprint.\nClear the active blueprint and enable heuristics.\nClear everything that came from this source, and close the …\nClose all stores and show the welcome screen again.\nClose this app and all its recordings.\nClose a recording or blueprint (free its memory).\nThe various kinds of items that may be represented and for …\nThe various scopes for which we want to track collapsed …\nA collapsed identifier.\nColormap together with the range of image values that is …\nReceiver for the <code>CommandSender</code>\nSender that queues up the execution of commands.\nError type for a fallback request.\nProvides fallback values for components, implemented …\nResult for a fallback request to a provider.\nThe fallback provider is not able to handle the given …\nA component of an entity from the chunk store.\nHow to display components in a Ui.\nSpecifies which UI callbacks are available for a component.\nA viewport container.\nThe dragged content is made only of <code>Contents</code>.\nThe name of a <code>Contents</code>.\nThe screenshot will be copied to the clipboard.\nThe result of executing a single data query for a specific …\nThis is the primary mechanism through which data is passed …\nAn entity or instance in the context of a view’s data …\nIdentifier for a <code>DataResultNode</code>\nA single node in the <code>DataResultTree</code>\nA hierarchical tree of <code>DataResult</code>s\nA place where data comes from, e.g. the path to a .rrd or …\nDisplay the component in a read-only way.\nHelper to handle drag-and-drop operations.\nDrop a specific entity from a store.\nShow a timeline of the blueprint data.\nThe dragged content is made of entities.\nAdd a task, run on a background thread, that saves …\nFollow the latest available data\nGive this view lots of space. Used for spatial views …\nHover highlight, sorted from weakest to strongest.\nApply hover highlight, does <em>not</em> exclude a selection …\nTrait for naming/identifying <code>crate::VisualizerSystem</code>s &amp; …\nThe payload type is irrelevant to me.\nCaches the results of decoding …\nRepresents the contents of an <code>Image</code>, <code>SegmentationImage</code> or …\nStats about an image.\nList of entities that match the indicator components of a …\nAn entity or instance from the chunk store.\nCombination of selection &amp; hover highlight which can occur …\nThe dragged content is made of a collection of <code>Item</code>s we do …\nOne “thing” in the UI.\nAn ordered collection of <code>Item</code> and optional associated …\nContext information that a view might attach to an item …\nUse latest-at semantics.\nDisplay a short summary. Used in lists.\nLoad some data.\nThis view can share space with others\nAll different\nA reference to a value that is <em>maybe</em> mutable.\nEdit the component over multiple <code>re_ui::list_item::ListItem</code>…\nThis <code>Contents</code> has been given a name by the user.\nNo selection highlight at all.\nNo hover highlight.\nLooping is off.\nPath to a specific entity in a specific store used for …\nTime doesn’t move\nThis <code>Contents</code> is unnamed and should be displayed with this …\nTime move steadily\nInformation about a view that is published each frame by …\nContext for a latest-at query in a specific view.\nRange &amp; type of chunk store query.\nProperties of a view that as recommended to be spawned by …\nUI config for the current recording (found in <code>EntityDb</code>).\nThe payload type is correct, but it’s content cannot be …\nReset the <code>Viewer</code> to the default state\nMany <code>ResolvedAnnotationInfo</code>, with optimization for a …\nAll the same\nThe screenshot will be saved to disk.\nInfo given to egui when taking a screenshot.\nWhere to put the screenshot.\nShould apply selection highlight (i.e. the exact selection …\nWe are looping within the current loop selection.\nSelection highlight, sorted from weakest to strongest.\nDisplay everything as wide as available, without height …\nArrow serialization failed.\nSet the active timeline for the given recording.\nSets the focus to the given item.\nSet the item selection.\nA closely related object is selected, should apply similar …\nEdit the component in a single <code>re_ui::list_item::ListItem</code> …\nThe current Blueprint and Recording being displayed by the …\nInterface for accessing all blueprints and recordings\nA recording (or blueprint)\nStream tree from the time panel\nHovering/selecting in one of the streams trees.\nStream tree from the time panel, when the filter is active\nCommands used by internal system components\nInterface for sending <code>SystemCommand</code> messages.\nOutput of view system execution.\nStats about a tensor or image.\nCaches tensor stats using a <code>RowId</code>, i.e. a specific …\nHovering/Selecting in a 3D space.\nControls the global view and progress of the time.\nDrag value widget for editing time values for both …\nUse a time range on the currently active timeline.\nThe time range we are currently zoomed in on.\nDisplay as much information as possible in a compact way. …\nHovering/Selecting in a 2D space.\nProvides a fallback value for a given component with known …\nSpecifies the context in which the UI is used and the …\nNot directly returned by the fallback provider, but useful …\nUpdate the blueprint with additional data\nA fallback value was successfully provided.\nCaches meshes based on media type &amp; row id.\nA viwport view.\nDefines a class of view without any concrete types making …\nRegistry of all known view types.\nThe context associated with a view.\nView context that can be used by view parts and ui methods …\nHighlights of a specific entity path in a specific view.\nHighlights in a specific view.\nUsed to publish info aboutr each view.\nHeuristics for spawning views of a given class.\nUnserialized frame to frame state of a view.\nState for the <code>View</code>s that persists across frames but …\nUnique name for a system within a given <code>crate::ViewClass</code>.\nUtility for registering view systems, passed on to …\nCommon things needed by many parts of the viewer.\nList of entities that can be visualized at some point in …\nContext object returned by …\nAdditional filter for applicability on top of the default …\nElement of a scene derived from a single archetype query.\nWhat is the active blueprint for the active application?\nDirectly access the <code>Caches</code> for the active recording.\nThe current loop range, iff selection looping is turned on.\nDirectly access the <code>EntityDb</code> for the active recording.\nDirectly access the <code>EntityDb</code> for the active recording.\nAdds a new highlight to the entity highlight, combining it …\nAdd a new outline mask to this entity path, combining it …\nAdds a new view class.\nAdds a new hover highlight to the entity highlight, …\nRegisters how to show a given component in the UI.\nRegisters how to view, and maybe edit, a given component …\nAdds a new selection highlight to the entity highlight, …\nRegisters how to view, and maybe edit, a given component …\nGet a flags value with all known bits set.\nThe <code>app_id</code> of the current recording.\nGlobal options for the whole viewer.\nAdditional filter for applicability.\nFor each visualizer, return the set of entities that is …\nMapping from class and system to entities for the store\nArchetype name in which context the component is needed.\nChecks if items are draggable based on the list of …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a mutable reference of <code>Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nReturns the mutable reference, if possible.\nCalled once per frame to potentially flush the cache.\nCall once per frame to potentially flush the cache(s).\nSee <code>re_viewer_context::Cache::begin_frame</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current active blueprint.\nOptional archetype of the View’s blueprint properties.\nUI config for the current blueprint.\nThe active blueprint.\nThe active blueprint.\nThe <code>StorageEngine</code> for the active blueprint.\nDisable garbage collection of the blueprint.\nThe blueprint query used for resolving blueprint in this …\nThe timepoint to use when writing an update to the …\nThe timepoint to use when writing an update to the …\nThe image data, row-wise, with stride=width.\nThe row id that contained the blob.\nAll the loaded recordings and blueprints.\nThings that need caching and are shared across the whole …\nPath to the directory suitable for storing cache data.\nThings that need caching.\nChoose the default visualizers to enable for this entity.\nClear the currently active blueprint\nClear the currently active blueprint and enable the …\nCloned blueprints are the ones the user has edited, i.e. …\nClears a component in the blueprint store by logging an …\nClears a component in the blueprint store by logging an …\nRemove all open recordings and applications, and go to the …\nAfter calling this, there is no way to redo what was once …\nClears the current selection out.\nClose this application and all its recordings.\nReturns <code>ColorModel::L</code> for depth and segmentation images.\nCreates a new command channel.\nInterface for sending commands back to the app\nReturns all the component sets that the system is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nLatest-at results for all component defaults in this view.\nReturns from which entity path an override originates from.\nHow to display components.\nCreate a <code>CollapsedId</code> for a container in this scope.\nWhether all set bits in a source flags value are also set …\nReturns true if the exact selection is part of the current …\nThe style to use for displaying this view name in the UI.\nExecuted context systems, may hold state that the ui …\nThe current time query, based on the current time control.\nThe current time query, based on the current time control.\nQuery for latest value at the currently selected time on …\nOptionally retrieves a chunk store reference from the …\nShow data while respecting the given UI layout.\nCreate a <code>CollapsedId</code> for a data result in this scope.\nThe default blueprint (i.e. the one logged from code), if …\nDefault cache directory\nDefault latest-at query\nDefault query range for this view.\nDetermines the set of visible entities for a given view.\nThe intersection of a source flags value with the …\nUser-facing name of this view class.\nReturns the user-facing name for the given view class.\nDowncasts this state to a mutable reference of a concrete …\nDowncasts this state to a reference of a concrete type.\nHelper object to manage drag-and-drop operations.\nDraw data gathered during execution of the view part …\nThe <code>egui::Context</code>.\nConvert to an <code>egui::Id</code>.\nGet a flags value with all bits unset.\nCreate a <code>CollapsedId</code> for an entity in this scope.\nMutable access to a <code>EntityDb</code> by id\nWhere to retrieve the data from.\nAccesses a cache for reading and writing.\nDecode some image data and cache the result.\nThe key should be the <code>RowId</code> of the <code>TensorData</code>. NOTE: …\nRead in some video data and cache the result.\nQueries the chunk store and performs data conversions to …\nQueries the chunk store and performs data conversions to …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtend the selection with more items.\nExtend the selection with the provided items.\nAdditional UI displayed in the tab title bar, between the …\nProvides a fallback value for a given component, first …\nReturns the fallback provider for this visualizer.\nFilters a set of applicable entities (entities that have …\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nThe first selected object if any.\nItem that got focused on the last frame if any.\nDescribes the format of <code>Self::buffer</code>.\nplayback fps\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe full range of times for the current timeline\nQueries a View type by class name and logs if it fails, …\nGet the value of the element at the given index.\nBridge to <code>re_renderer</code>\nHandle updating last frame state and trigger callbacks on …\nConsistently handle the selection, hover, drag start …\nPrecomputed hash of the string.\nHelp text describing how to interact with this view in the …\nRange with special highlight.\nHover/select highlighting information for this view.\nReturns the currently hovered objects.\nReturns the currently hovered objects.\nReturns the currently hovered objects.\nThe store hub, which keeps track of all the default and …\nIcon used to identify this view class.\nDetermines the icon to use for a given container kind.\nUnique name for a system within a given <code>crate::ViewClass</code>.\nIdentifier string of this view class.\nImplements the <code>ComponentFallbackProvider</code> trait for a given …\nInclude the “Welcome screen” application in the …\nFor each visualizer, the set of entities that have at …\nFor each visualizer, the set of entities that have at …\nThese are not required, but if <em>any</em> of these are found, it …\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert a new recording or blueprint into the <code>StoreHub</code>.\nInspect the blueprint timeline.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each item in this selection, if it refers to the first …\nIs the given blueprint id the active blueprint for any app …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nCheck if the selection is empty.\nReturns true if the current component’s value was …\nShorthand for checking for interactivity on data overrides.\nCheck the collapsed state for the given <code>CollapsedId</code>.\nAre we running inside the Safari browser?\nDo we have a lot of vertical space?\nShould the UI fit on one line?\nIs the current time in the selection range (if any), or at …\nShorthand for checking for visibility on data overrides.\nYield a set of contained flags values.\nReturns an iterator over the items and their selected …\nIterates over all <code>DataResult</code>s of the <code>ViewQuery</code>.\nIterates over all entities of the <code>ViewQuery</code>.\nReturns a mutable iterator over the items and their …\nYield a set of contained named flags values.\nIterates over all registered View class types, sorted by …\nIter over all of the currently visible <code>DataResult</code>s for a …\nIterate over all visualizer data that can be downcast to …\nColor, Depth, or Segmentation?\nShow a label while respecting the given UI layout.\nThe time on the timeline we’re currently at.\nControls how likely this view will get a large tile in the …\nReturns the number of items in the selection.\nFor each passed <code>EntityPath</code>, walk up the tree and find the …\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResultNode</code> in the tree based on an <code>EntityPath</code>…\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on an <code>EntityPath</code>.\nThe selected slice of time that is called the “loop …\nMapbox API key (used to enable Mapbox-based map view …\nPicks the stronger selection &amp; hover highlight from two …\nReturn the maximum time set for this drag value.\nWhere start of the range.\nReturn the minimum time set for this drag value.\nFast access to an <code>Arc</code> sharing the same <code>Annotations::missing</code>…\nShow a multi-line editor for this instance of this …\nName of the screenshot (e.g. view name), excluding file …\nHuman-readable name of the view.\nCreate a <code>DragAndDropManager</code> by providing a list of …\nCreate a new <code>StoreHub</code>.\nCalled once for every new view instance of this class.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of entities that matched the query, including …\nOf the matched queries, the number of entities that are …\nHow far back in time can we undo?\nCalled at the start of each frame\nFired when the timeline is paused.\nFired when the timeline is played.\nCalled once upon registration of the class\nReact to the chunk store’s changelog, if needed.\nReact to the chunk store’s changelog, if needed.\nFired when the a different timeline is selected.\nFired when the timepoint changes.\nDisplay the currently dragged payload as a pill in the UI.\nAll <code>DataResult</code>s that are queried by active visualizers.\nReturns a placeholder value for a given component, solely …\nPreferred aspect ratio for the ui tiles of this view.\nThe accumulated property overrides for this <code>DataResult</code>.\nRemove any empty <code>EntityDb</code>s from the hub\nCall <code>EntityDb::purge_fraction_of_ram</code> on every recording\nAttempt to free up memory.\nAttempt to free up memory.\nReturns the list of components that the system <em>queries</em>.\nQuery which didn’t yield a result for the component at …\nReturns the query range for this data result.\nWhat range is queried on the chunk store.\nAll the query results for this frame.\nThe range of values, ignoring <code>NaN</code>s.\nThe range of values, ignoring <code>NaN</code>s.\nAllowed range for value.\nQueries a raw component from the default blueprint.\nGet a read-only <code>StoreContext</code> from the <code>StoreHub</code> if one is …\nUI config for the current recording (found in <code>EntityDb</code>).\nHash together with the View class id to the …\nDetermines a suitable origin given the provided set of …\nThe active recording.\nThe active recording.\nThe current active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StoreId</code> of the active recording.\nThe <code>StoreId</code> of the active recording.\nWhere on screen (in ui coords).\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nReceive a <code>SystemCommand</code> to be executed if any is queued.\nReceive a <code>UICommand</code> to be executed if any is queued.\nIf set, everything after this time is in “redo-space” …\nRuntime info about components and archetypes.\nRegisters a new <code>ViewContextSystem</code> type for a view class …\nRegisters a new <code>VisualizerSystem</code> type for a view class …\nQueries which UI types are registered for a component.\nThe intersection of a source flags value with the …\nRemoves a view class from the registry.\nRemove the current loop selection.\nRemove any recordings with a network source pointing at …\nThe global <code>re_renderer</code> context, holds on to all GPU …\nReturns the minimal set of components that the system …\nResets a blueprint component to the value it had in the …\nThe range of time we are currently zoomed in on.\nAn alternative store and entity path to use for the …\nRetains elements that fulfill a certain condition.\nReplace “dangerous” characters by a safe one.\nPersist any in-use blueprints to durable storage.\nHelper to save a component to the blueprint store.\nSave some bytes to disk, after first showing a save dialog.\nSaves a recursive override OR clears both (!) individual &amp; …\nMake sure the selected timeline is a valid one\nReturns the current selection.\nReturns the current selection.\nReturns the current selection.\nSelection &amp; hovering state.\nUi shown when the user selects a view of this class.\nSend a command to be executed.\nSend a command to be executed.\nShow a sequence drag value widget.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nActivate a recording by its <code>StoreId</code>.\nChange the active <code>ApplicationId</code>\nChange the active/visible recording id.\nMake blueprint active for a given <code>ApplicationId</code>\nChange which blueprint is the default for a given …\nSet the feedback to display to the user based on drop …\nplayback fps\nSet the hovered objects. Will be in <code>Self::hovered_items</code> on …\nSet the current loop selection without enabling looping.\nSet the collapsed state for the given <code>CollapsedId</code>.\nSet the collapsed state for the given item in every …\nSets several objects to be selected, updating history as …\nplayback speed\nThe range of time we are currently zoomed in on.\nShould we enable the heuristics during this frame?\nShow milliseconds, RAM usage, etc.\nDisplays an overlay for debugging picking.\nCheck if the selection contains a single item and returns …\nShow a single-line editor for this instance of this …\nThe root of the space in which context the query happens.\nDetermines which views should be spawned by default for …\nplayback speed\nPopulate a <code>StoreHubStats</code> based on the active app.\nAll the loaded recordings and blueprints.\nThe current view of the store\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nControls whether the visible time range UI should be …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild an egui table and configure it for the given UI …\nWhere to put the screenshot.\nTarget entity path which is lacking the component and …\nShow a temporal drag value widget.\nUsed only for tests\nThe current time.\nThe current time of the time panel, how fast it is moving, …\nThe current time.\nThe current time.\nHow much time the full view covers.\nThe time type of the currently selected timeline\nThe range of time we are currently zoomed in on.\nWhat time zone to display timestamps in.\nThe currently selected timeline\nThe timeline we’re on.\nBest-effort.\nConvert this image to an encoded PNG\nSee <code>Self::to_dynamic_image</code>.\nCast the buffer to the given type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSelect passed objects unless already selected in which …\nThe <code>DataResultTree</code> for the query\nIf true, this path is not actually included in the query …\nTries to provide a fallback value for a given component.\nTries to show a UI for editing a component.\nDraws the ui for this view class and handles ui events.\nShow a UI for a component instance.\nShow a UI for a single raw component.\nWhat portion of the UI to take a screenshot of (in ui …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMove the time forward (if playing), and perhaps pause if we…\nUpdates the internal applicability filter state based on …\nCustom path to the FFmpeg binary.\nPreferred method for video decoding on web.\nOverride the path to the FFmpeg binary.\nGet the video decoder settings.\nCreate a <code>CollapsedId</code> for a view in this scope.\nRegistry of all known classes of views.\nThe view context, if available.\nThe id of the space in which context the query happens.\nThe view state of the view in which the query is executed.\nExecuted view systems, may hold state that the ui method …\nDepth-first traversal of the tree, calling <code>visitor</code> on each …\nCreate context object that is passed to all of this …\nInformation about which components are queried by the …\nWhich <code>ViewSystems</code>s to pass the <code>DataResult</code> to.\nApp ID used as a marker to display the welcome screen.\nCorresponding 2D spaces and pixel coordinates (with …\nWhere in this 2D space (+ depth)?\nThe point in 3D space that is hovered, if any.\nThe 3D space with the camera(s)\nWhich store does this streams tree correspond to?\nPath to an entity that is currently tracked by the …\nGet a valid, finite range for the gpu to use.\n<code>colormap</code> is currently only used for depth images.\nRender the given image, respecting the clip rectangle of …\nDetermines if and how the shader needs to decode the image.\nReturn whether a tensor should be assumed to be encoded in …\nCreates a <code>ImageDataDesc</code> for creating a texture from an …\nLoad a blueprint from persisted storage, e.g. disk. …\nHow to save and load blueprints\nSave a blueprint to persisted storage, e.g. disk.\nValidate a blueprint against the current blueprint schema …\nInterface for accessing all blueprints and recordings\nConvenient information used for <code>MemoryPanel</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHarness to execute code that rely on <code>crate::ViewerContext</code>.\nTimeline the recording config is using by default.\nReturns the argument unchanged.\nBest-effort attempt to meaningfully handle some of the …\nCalls <code>U::from(self)</code>.\nRun the provided closure with a <code>ViewerContext</code> produced by …\nRun the given function with a <code>ViewerContext</code> produced by …\nDefines the UI and layout of the Viewport.\nThe blueprint that drives this viewport. This is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrapper that contains the results of a latest-at query …\nThe iterator type backing <code>HybridResults::iter_as</code>.\nExtension traits to abstract query result handling for all …\nGap between lines and their outline.\nGap between points and their outline.\nClamp the last value in <code>values</code> in order to reach a length …\nIterate as indexed deserialized batches.\nUtility for implementing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>UnitChunkShared</code> for the specified …\nUtility for retrieving a single instance of a component.\nUtility for retrieving a single instance of a component.\nUtility for retrieving the first instance of a component.\nUtility for retrieving the first instance of a component.\nReturns component data for the given component or an empty …\nReturns component data for the given component, ignores …\nUtility for retrieving a single instance of a component, …\nUtility for retrieving the first instance of a component, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a zero-copy iterator over all the results for the …\nQueries for the given <code>component_names</code> using latest-at …\nProduce an <code>re_renderer::OutlineConfig</code> based on the …\nResolves all annotations and keypoints for the given …\nResolves all annotations for the given entity view.\nProcess <code>Color</code> components using annotations and default …\nQueries for the given <code>component_names</code> using range …\nIterate as indexed, sliced, deserialized component batches.\nIterate as indexed, sliced, deserialized component batches …\nSpawns a view for each single entity which is visualizable …\nDraw view property ui for a single component of a view …\nDraw view property ui for a single component of a view …\nDisplay the UI for editing all components of a blueprint …\nModifier to press for scroll to change aspect ratio.\nWhich mouse button to drag for panning a 2D view.\nWhich mouse button to drag for panning a 2D view.\nModifier to press for scroll to pan horizontally.\nClicking this button moves the timeline to where the …\nWhich mouse button rolls the camera.\nWhich mouse button rolls the camera if the roll modifier …\nSee <code>ROLL_MOUSE_ALT</code>.\nWhich mouse button to drag for rotating a 3D view.\nRectangles drawn with this mouse button zoom in 2D views.\nWhich modifier speeds up the 3D camera movement.\nKey to restore the camera.\nModifier to press for scroll to zoom.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by versions 1 and 6 UUIDs to …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nThe type of sequence returned by this counter.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a reference to the underlying <code>Uuid</code>.\nGet a <code>Braced</code> formatter.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nAdapters for alternative string formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a <code>Builder</code> for a version 8 UUID using the supplied …\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values.\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values in little-endian …\nConstruct a <code>Timestamp</code> from the number of 100 nanosecond …\nCreates a <code>Builder</code> for a version 1 UUID using the supplied …\nCreates a <code>Builder</code> for a version 3 UUID using the supplied …\nCreates a <code>Builder</code> for a version 4 UUID using the supplied …\nCreates a <code>Builder</code> for a version 5 UUID using the supplied …\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a <code>Builder</code> for a version 6 UUID using the supplied …\nCreates a <code>Builder</code> from a 128bit value.\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nCreates a <code>Builder</code> for a version 7 UUID using the supplied …\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConvert the builder into a <code>Uuid</code>.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nThe ‘max UUID’ (all ones).\nCreates a random UUID.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nThe ‘nil UUID’ (all zeros).\nGet a timestamp representing the current system time and …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nAdapters for alternative <code>serde</code> formats.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nGet a <code>Simple</code> formatter.\nGenerating UUIDs from timestamps.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nGet the value of the timestamp as the number of 100 …\nReturns a 128bit little-endian value containing the value.\nGet the value of the timestamp as a Unix timestamp, as …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a braced <code>Uuid</code> string.\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case hyphenated string …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>Braced</code> from a <code>Uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a thread-local container with a context.\nAlways flushes ASAP.\nLog an entity using an <code>ArrowMsg</code>.\nSend after all messages in a blueprint to signal that the …\nThe key used to identify a Rerun <code>EntityPath</code> in chunk-level …\nThe key used to identify the size in bytes of the data, …\nThe key used to identify a Rerun <code>ChunkId</code> in chunk-level …\nThe marker used to identify whether a chunk is sorted in …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>crate::Chunk</code>.\nDefault configuration, applicable to most use cases.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::flush_num_bytes</code>.\nEnvironment variable to configure <code>Self::flush_num_rows</code>.\nEnvironment variable to configure <code>Self::flush_tick</code>.\nContains the error value\nContains the error value\nThe key used to identify the <code>crate::ArchetypeFieldName</code> in …\nThe key used to identify the <code>crate::ArchetypeName</code> in …\nThe key used to identify the kind of a Rerun column in …\nThe marker used to identify whether a column is sorted in …\nThe value used to identify a Rerun control column in …\nThe value used to identify a Rerun data column in …\nThe value used to identify a Rerun time column in …\nThe most general log message sent from the SDK to the …\nNever flushes unless manually told to (or hitting one the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA unique ID for a row’s worth of data within a chunk.\nA new recording has begun.\nError spawning one of the background threads.\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nUnconditionally inserts an <code>ArrowListArray</code> as a component …\nUnconditionally inserts an <code>Arrow2ListArray</code> as a component …\nUnconditionally inserts a <code>TimeColumn</code>.\nReturns a copy of <code>self</code>, overriding existing fields with …\nCheck for equality while ignoring possible <code>Extension</code> type …\nReturns <code>true</code> is two <code>Chunk</code>s are similar, although not …\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nInitializes a new <code>ChunkBuilder</code>.\nReturns the cell corresponding to the specified <code>RowId</code> for …\nSplit a chunk if it contains &gt;= rows than this threshold …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns a <em>shared</em> channel in which are sent the batched …\nClones the chunk and assign new IDs to the resulting chunk …\nReturns the deserialized data for the specified component.\nReturns the raw data for the specified component.\nReturns the component data of the specified instance.\nReturns the raw data for the specified component at the …\nReturns the deserialized data for the specified component, …\nReturns the raw data for the specified component, assuming …\nReturns an iterator over the <code>RowId</code>s of a <code>Chunk</code>, for a …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nIterates all data columns present in this chunk.\nThe component data.\nRemoves all component columns from the <code>Chunk</code>.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nReturns true if two chunks are concatenable.\nConcatenates two <code>Chunk</code>s into a new one.\nConcatenates two <code>TimeColumn</code>s into a new one.\nIterates all control columns present in this chunk.\nRemoves duplicate rows from sections of consecutive …\nDensifies the <code>Chunk</code> vertically based on the <code>component_name</code> …\nEmpties the <code>Chunk</code> vertically.\nEmpties the <code>TimeColumn</code> vertically.\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nApplies a filter kernel to the <code>Chunk</code> as a whole.\nInitiates a flush of the pipeline and returns immediately.\nInitiates a flush the batching pipeline and waits for it …\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.")