searchState.loadedDescShard("rerun", 2, "A unique ID for a row’s worth of data within a chunk.\nUsed e.g. for frames in a film.\nSpecifies how null values should be filled in the returned …\nNormal wall time.\nDescribes a time column, such as <code>log_time</code>.\nSelect a time column.\nA 64-bit number describing either nanoseconds, sequence …\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nThe view contents specify which subset of the database …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nWorkaround for downcasting support, simply return <code>self</code>:\nWorkaround for downcasting support, simply return <code>self</code>:\nThe chunk that was added or removed.\nWhat is the threshold, in bytes, after which a <code>Chunk</code> …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nReports which <code>Chunk</code>s were merged into a new <code>Chunk</code> during a …\nSemantic name associated with this data.\nSemantic name associated with this data.\nThe Arrow datatype of the column.\nWhat actually changed?\nIf <code>true</code> (the default), the store will emit events when its …\nThe path of the entity.\nThe path of the entity.\nMonotonically increasing ID of the event.\nThe index used to filter out <em>rows</em> from the view contents.\nThe range of index values used to filter out <em>rows</em> from the …\nThe specific index values used to filter out <em>rows</em> from the …\nThe component column used to filter out <em>rows</em> from the view …\nIf true, the results will include one extra tick on each …\nWhether the <code>view_contents</code> should ignore columns …\nWhether the <code>view_contents</code> should ignore semantically empty …\nWhether the <code>view_contents</code> should ignore columns …\nWhether this column represents an indicator component.\nWhether this column represents an indicator component.\nWhether this column contains either no data or only …\nWhether this column contains either no data or only …\nWhether this column represents static data.\nWhether this column represents static data.\nWhether this column represents a <code>Clear</code>-related components.\nWhether this column represents a <code>Clear</code>-related component.\nShould the results contain all extra component information …\nShould the results contain all extra timeline information …\nAddition or deletion?\nArbitrary name for the subscriber.\nArbitrary name for the subscriber.\nThe new chunk that was created as the result of the …\nThe number of chunks this is the stats for.\nHow many <em>component batches</em> (“cells”).\nNumber of rows.\nThe core of this trait: get notified of changes happening …\nGet notified of changes happening in a <code>ChunkStore</code>, see …\nHow many component revisions to preserve on each timeline.\nDo not remove any data within these time ranges.\nThe specific <em>columns</em> to sample from the final view …\nSpecifies how null values should be filled in the returned …\nThe chunks that were merged into a new chunk.\nThe Arrow datatype of the stored column.\nWhat was the store’s generation when it sent that event?\nWhich <code>ChunkStore</code> sent this event?\nWhat target threshold should the GC try to meet.\nHow long the garbage collection in allowed to run for.\nThe timeline this column is associated with.\nThe name of the timeline.\nIncludes everything: arrow payloads, timelines, rowids, …\nThe specific index values used to sample <em>rows</em> from the …\nThe subset of the database that the query will run on: a …\nStats for a single <code>crate::RangeCache</code>.\nStats for all primary caches.\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nContains the error value\nResults for a latest-at query.\nContains the success value\nA ref-counted, inner-mutable handle to a <code>QueryCache</code>.\nUniquely identifies cached query results in the <code>QueryCache</code>.\nResults for a range query.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nKeeps track of handles towards a <code>ChunkStore</code> and its …\nAnything that can expose references to a <code>ChunkStore</code> and …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nResults for each individual component.\nResults for each individual component.\nThe compound index of this query result.\nThe associated <code>EntityPath</code>.\nThe query that yielded these results.\nThe query that yielded these results.\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nWhat is the actual size of this cache after deduplication?\nHow many chunks in the cache?\nWhat would be the size of this cache in the worst case, …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nA range of zero length exactly at the time cursor.\nPut the boundary at the current time cursor.\nBoundary is an absolute value.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Datatype</strong>: A binary blob of data.\n<strong>Datatype</strong>: A single boolean.\n<strong>Datatype</strong>: The innermost datatype of an image.\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Datatype</strong>: A helper type for mapping <code>datatypes::ClassId</code>s to …\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: Specified what color components are present in …\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A double-precision vector in 2D space.\nThe range encompassing all time, from -∞ to +∞.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\nThe identity matrix.\nRange that expands from negative infinity to positive …\nRange that expands from negative infinity to positive …\n<strong>Datatype</strong>: The metadata describing the contents of a …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Datatype</strong>: A 4x4 Matrix.\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\nThe unit vector <code>[1, 1, 1]</code>, i.e. the multiplicative …\nThe unit vector <code>[1, 1, 1]</code>, i.e. the multiplicative …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Datatype</strong>: An infinite 3D plane represented by a unit …\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Datatype</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Datatype</strong>: An Axis-Aligned Bounding Box in 2D space, …\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: Indexing a specific tensor dimension.\n<strong>Datatype</strong>: Selection of a single tensor dimension.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A uint32 vector in 2D space.\n<strong>Datatype</strong>: A uint32 vector in 3D space.\n<strong>Datatype</strong>: A uint vector in 4D space.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Stores a tuple of UTF-8 strings.\n<strong>Datatype</strong>: A 16-byte UUID.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Datatype</strong>: Presentation timestamp within a …\n<strong>Datatype</strong>: How we interpret the coordinate system of an …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nThe X^Y plane with normal = +Z.\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\nThe Y^Z plane with normal = +X.\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nThe zero vector, i.e. the additive identity.\nThe zero vector, i.e. the additive identity.\nThe zero vector, i.e. the additive identity.\nThe zero vector, i.e. the additive identity.\nThe Z^X plane with normal = +Y.\nAbsolute length of the range.\nHow much to rotate around the axis.\nReturns the timestamp as nanoseconds.\nReturns the timestamp as seconds.\nAxis to rotate around.\nThe content/data.\nThe raw bytes representing the UUID.\nThe data type of each channel (e.g. the red channel) of …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nReturns the matrix column for the given <code>index</code>.\nThe color that will be applied to the annotated entity.\nThe color model represented by this image format.\nL, RGB, RGBA, …\nThe datatype represented by this image format.\nCreate a new depth image format with the given resolution …\nThe dimension number to select.\nThe dimension number to select.\nThe distance of the plane from the origin (in multiples of …\nHigh time boundary for sequence timeline.\nReturns the correct time assuming this boundary is an end …\nThe first string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new timestamp from nanoseconds since video start.\nFrom a speicifc pixel format.\nDetermine if the image format has an alpha channel.\nThe height of the image in pixels.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nThe index along the dimension to use.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvert the direction of the dimension.\nDetermine if the image format represents floating point …\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nThe label that will be shown in the UI.\nThe names of the dimensions of the tensor (optional).\nCreate a new vector.\nCreate a new plane from a normal and distance.\nCreate a new vector.\nCreate a new vector.\nCreate a new vector.\nThe normal of the plane (unnormalized if the plane is …\nNumber of bytes for the whole image.\nUsed mainly for chroma downsampled formats and differing …\nAngle in radians. One turn is equal to 2π (or τ) radians.\nTime range to use for this timeline.\nCreate a new rgb image format with 8 bit per channel with …\nCreate a new rgba image format with 8 bit per channel with …\nThe second string.\nCreate a new segmentation image format with the given …\nAssign a new x\nAssign a new y\nThe shape of the tensor, i.e. the length of each dimension.\nReturns a new <code>Blob</code> that is a slice of this buffer starting …\nLow time boundary for sequence timeline.\nReturns the time assuming this boundary is a start …\nName of the timeline this applies to.\nThe w-coordinate, i.e. index 3.\nThe width of the image in pixels.\nThe x-coordinate, i.e. index 0.\nThe x-coordinate, i.e. index 0.\nThe x-coordinate, i.e. index 0.\nThe x-coordinate, i.e. index 0.\nThe range of the X-axis (usually left and right bounds).\nThe y-coordinate, i.e. index 1.\nThe y-coordinate, i.e. index 1.\nThe y-coordinate, i.e. index 1.\nThe y-coordinate, i.e. index 1.\nThe range of the Y-axis (usually top and bottom bounds).\nThe z-coordinate, i.e. index 2.\nThe z-coordinate, i.e. index 2.\nA linear interpolator that bounces between <code>a</code> and <code>b</code> as <code>t</code> …\nCreate a spiral of points with colors along the Z axis.\nReturns sRGB polynomial approximation from Turbo color …\nGiven two 3D vectors <code>from</code> and <code>to</code>, linearly interpolates …\nLinear interpolator.\nLinearly interpolates from <code>a</code> through <code>b</code> in <code>n</code> steps, …\nA <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nContains the <code>Array</code> and <code>MutableArray</code> trait objects …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\ncontains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.\nContains <code>Buffer</code>, an immutable container for all Arrow …\nContains <code>Chunk</code>, a container of <code>Array</code> where every array has …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\ncontains a wide range of compute operations (e.g. […\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nContains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nDefines <code>Error</code>, representing all errors returned by this …\nExecutes the given command directly.\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\ncontains FFI bindings to import and export <code>Array</code> via Arrow…\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nThis crates a hashmap from the provided iterator using …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nContains modules to interface with other formats such as […\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nMemory maps regions defined on the IPC format into <code>Array</code>.\nThis crates a hashmap using RandomState::new which obtains …\nContains the declaration of <code>Offset</code>\nQueues the given command for further execution.\nRemoves a key from the map, returning the value at the key …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\ncontains the <code>Scalar</code> trait object representing individual …\nPerforms a set of actions within a synchronous update.\nConversion methods for dates and times.\nDeclares <code>TrustedLen</code>.\nSealed traits and implementations to handle all <em>physical </em>…\nReturns the left value\nReturns the right value\nMisc utilities used in different places in the crate.\nThis crates a hashmap with the specified capacity using …\nA trait representing an immutable Arrow array. Arrow …\nIterator of values of an <code>ArrayAccessor</code>.\nTrait providing bi-directional conversion between arrow2 …\nA <code>BinaryArray</code> is Arrow’s semantically equivalent of an …\nIterator of values of an <code>BinaryArray</code>.\nA <code>BooleanArray</code> is Arrow’s semantically equivalent of an …\nA type definition <code>PrimitiveArray</code> for <code>days_ms</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>\nAn <code>Array</code> whose values are stored as indices. This <code>Array</code> is …\nTrait denoting <code>NativeType</code>s that can be used as keys of a …\nThe Arrow’s equivalent to an immutable …\nThe Arrow’s equivalent to an immutable …\nA type definition <code>PrimitiveArray</code> for <code>f16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f16</code>\nA type definition <code>PrimitiveArray</code> for <code>f32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f32</code>\nA type definition <code>PrimitiveArray</code> for <code>f64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f64</code>\nTrait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …\nA type definition <code>PrimitiveArray</code> for <code>i128</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i128</code>\nA type definition <code>PrimitiveArray</code> for <code>i16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i16</code>\nA type definition <code>PrimitiveArray</code> for <code>i256</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i256</code>\nA type definition <code>PrimitiveArray</code> for <code>i32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i32</code>\nA type definition <code>PrimitiveArray</code> for <code>i64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i64</code>\nA type definition <code>PrimitiveArray</code> for <code>i8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i8</code>\nThe corresponding <code>IntegerType</code> of this key\nAn <code>Array</code> semantically equivalent to …\nIterator of values of a <code>ListArray</code>.\nAn array representing a (key, value), both of arbitrary …\nA type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>\nA trait describing a mutable array; i.e. an array whose …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …\nA <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …\nA mutable, strong-typed version of <code>DictionaryArray</code>.\nThe Arrow’s equivalent to a mutable …\nThe mutable version of <code>FixedSizeListArray</code>.\nThe mutable version of <code>ListArray</code>.\nA distinct type to disambiguate clashing methods\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …\nConverting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nThe concrete <code>Array</code> of <code>DataType::Null</code>.\nA <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …\nA trait describing the ability of a struct to receive new …\nA <code>StructArray</code> is a nested <code>Array</code> with an optional validity …\nA trait describing the ability of a struct to create …\nA trait describing the ability of a struct to extend from …\nA trait describing the ability of a struct to receive new …\nA type definition <code>PrimitiveArray</code> for <code>u16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u16</code>\nA type definition <code>PrimitiveArray</code> for <code>u32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u32</code>\nA type definition <code>PrimitiveArray</code> for <code>u64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u64</code>\nA type definition <code>PrimitiveArray</code> for <code>u8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u8</code>\n<code>UnionArray</code> represents an array whose each slot can contain …\nA <code>Utf8Array</code> is arrow’s semantic equivalent of an …\nIterator of values of an <code>Utf8Array</code>.\nIf the key type always can be converted to <code>usize</code>.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the values of this array, cloning …\nApplies a function <code>f</code> to the values of this array, cloning …\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nConverts itself to a reference of <code>Any</code>, which enables …\nConvert to <code>Any</code>, to enable dynamic casting.\nConverts itself to a mutable reference of <code>Any</code>, which …\nConvert itself to an (immutable) atomically reference …\nConvert itself to an (immutable) <code>Array</code>.\nConvert to mutable <code>Any</code>, to enable dynamic casting.\nRepresents this key as a <code>usize</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nReturns the capacity in number of items\nReturns the capacity of this array\nReturns the capacity of this <code>MutablePrimitiveArray</code>.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReturns the capacity in number of items\nClones a dynamic <code>Array</code>.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nThe <code>DataType</code> of the array.\nReturns the <code>DataType</code> of this array.\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this <code>DictionaryArray</code>\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this array.\nReturns the default <code>DataType</code> of this container: …\nReturns the default <code>DataType</code>, <code>DataType::Binary</code> or …\nReturns the default <code>DataType</code> of this container: …\nReturns a default <code>DataType</code> of this array, which depends on …\nReturns a <code>DataType</code> consistent with <code>FixedSizeListArray</code>.\nReturns a default <code>DataType</code>: inner field is named “item”…\nLogically compares two <code>Array</code>s. Two arrays are logically …\nExtends the <code>MutablePrimitiveArray</code> with a constant\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtends the <code>MutablePrimitiveArray</code> from a slice\nExtends the <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of trusted …\nExtends the <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nExtends <code>MutableBinaryValuesArray</code> from an iterator of …\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends <code>MutableUtf8Array</code> from an iterator of trusted len.\nExtends <code>MutableUtf8ValuesArray</code> from an iterator of trusted …\nExtends the <code>MutableBinaryArray</code> from an iterator of trusted …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an iterator of values. …\nExtends the <code>MutableUtf8Array</code> from an iterator of values. …\nReturns the field (guaranteed to be a <code>Struct</code>)\nReturns the fields of this <code>StructArray</code>.\nThe fields.\nReturns the argument unchanged.\nCreates a new <code>MutableBinaryArray</code> from a slice of optional …\nReturns the argument unchanged.\nCreates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.\nReturns the argument unchanged.\nCreates a new <code>MutableBooleanArray</code> out of a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nCreates a new <code>FixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableUtf8Array</code> from a slice of optional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\narrow-rs -&gt; arrow2\nConvert from <code>arrow-rs</code> <code>PrimitiveArray</code>\nConvert an <code>arrow_data::ArrayData</code> to arrow2 <code>Array</code>\nCreate this <code>Array</code> from [<code>ArrayData</code>]\nCreate this array from <code>ArrayData</code>\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>[BooleanArray]</code> from its internal representation. …\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>FixedSizeBinaryArray</code> from an iterator of …\nCreates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nReturns a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.\nCreates a new <code>BooleanArray</code> from a slice of <code>bool</code>.\nCreates a <code>FixedSizeBinaryArray</code> from a slice of arrays of …\nCreates a <code>MutablePrimitiveArray</code> from a slice of values.\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nReturns a <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nCreates a <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from a <code>TrustedLen</code>\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.\nCreates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates a <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator of …\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>MutablePrimitiveArray</code> from an iterator of …\nCreates a <code>PrimitiveArray</code> from an iterator of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator of …\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nReturns a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.\nCreates a new <code>MutablePrimitiveArray</code> out an iterator over …\nCreates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …\nCreates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.\nReturns a (non-null) <code>Utf8Array</code> created from a <code>TrustedLen</code> …\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …\nCreates a new <code>MutablePrimitiveArray</code> from an iterator over …\nCreates a new <code>PrimitiveArray</code> from an iterator over values\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates an empty <code>MutableDictionaryArray</code> preloaded with a …\nCreates a (non-null) <code>PrimitiveArray</code> from an iterator of …\nCreates a (non-null) <code>MutablePrimitiveArray</code> from a vector …\nCreates a (non-null) <code>PrimitiveArray</code> from a vector of …\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns a the inner <code>Field</code>\nReturns a the inner <code>DataType</code>\nReturns a function that writes the element of <code>array</code> at …\nReturns the fields the <code>DataType::Struct</code>.\nReturns all fields from <code>DataType::Union</code>.\nReturns an option of a mutable reference to the values of …\nReturns a function that writes the value of the element of …\nContains the trait <code>Growable</code> and corresponding concreate …\nReturns the index and slot of the field to select from …\nReturns the index and slot of the field to select from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Arc&lt;dyn Array&gt;</code>\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nDeconstructs the <code>StructArray</code> into its individual …\nExtract the low-end APIs from the <code>MutableUtf8Array</code>.\nCreates an empty <code>MutableDictionaryArray</code> retaining the same …\nExtract the low-end APIs from the <code>MutableBinaryValuesArray</code>.\nReturns its internal representation\nReturns its internal representation\nExtract the low-end APIs from the <code>MutablePrimitiveArray</code>.\nReturns its internal representation\nExtract the low-end APIs from the <code>MutableStructArray</code>.\nExtract the low-end APIs from the <code>MutableUtf8ValuesArray</code>.\nReturns its internal representation\nTry to convert this <code>BinaryArray</code> to a <code>MutableBinaryArray</code>\nTry to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>\nTry to convert this <code>PrimitiveArray</code> to a …\nTry to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>\nwhether the array is empty\nWhether the array is empty.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether the values of this <code>DictionaryArray</code> are …\nReturns whether the <code>DataType::Union</code> is sparse or not.\nReturns whether slot <code>i</code> is valid.\nWhether <code>index</code> is valid / set.\nReturns an iterator of <code>&amp;[u8]</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code> over every element of …\nReturns an iterator over the optional values of this …\nReturns an iterator over the optional values of this …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Scalar&gt;&gt;</code>.\nconstructs a new iterator\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator over <code>Option&lt;T&gt;</code>\nReturns an iterator over the values and validity, …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator over the the optional values of  …\nReturns iterator over the values of …\nReturns the keys’ value of the <code>DictionaryArray</code> as <code>usize</code>\nReturns the dictionary keys\nReturns the keys of the <code>DictionaryArray</code>. These keys can be …\nReturns an iterator of the keys’ of the <code>DictionaryArray</code> …\nReturns an iterator of the keys’ values of the …\nThe length of the <code>Array</code>. Every array has a length …\nThe length of the array.\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe values as a mutable reference\nThe values\nThe mutable values\nReturns an empty <code>MutableBinaryValuesArray</code>.\nCreates a new empty <code>MutableBinaryArray</code>.\nAlias for unwrapping <code>Self::try_new</code>\nCreates an new empty <code>MutableBooleanArray</code>.\nAlias to <code>Self::try_new().unwrap()</code>\nCreates an empty <code>MutableDictionaryArray</code>.\nCreates a new empty <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nAlias to <code>Self::try_new(...).unwrap()</code>\nCreates a new empty <code>MutableListArray</code>.\nCreates a new <code>ListArray</code>.\nCreates a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>MutableNullArray</code>.\nCreates a new empty <code>MutablePrimitiveArray</code>.\nAlias for <code>Self::try_new(..).unwrap()</code>.\nCreates a new <code>MutableStructArray</code>.\nReturns a new <code>StructArray</code>\nReturns a new <code>UnionArray</code>.\nInitializes a new empty <code>MutableUtf8Array</code>.\nReturns an empty <code>MutableUtf8ValuesArray</code>.\nCreates a new <code>Utf8Array</code>.\nCreates a new <code>ArrayValuesIter</code>\nCreates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.\nReturns a new empty <code>BooleanArray</code>.\nReturns a new empty <code>DictionaryArray</code>.\nReturns a new empty <code>FixedSizeBinaryArray</code>.\nReturns a new empty <code>FixedSizeListArray</code>.\nReturns a new empty <code>ListArray</code>.\nReturns a new empty <code>MapArray</code>.\nReturns a new empty <code>NullArray</code>.\nReturns a new empty (zero-length) <code>PrimitiveArray</code>.\nCreates an empty <code>StructArray</code>.\nCreates a new empty <code>UnionArray</code>.\nReturns a new empty <code>Utf8Array</code>.\nCreates a new <code>Array</code> with a <code>Array::len</code> of 0.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>, <code>Offsets</code>…\nCreates an null <code>BinaryArray</code>, i.e. whose …\nReturns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.\nReturns an <code>DictionaryArray</code> whose all elements are null\nReturns a new null <code>FixedSizeBinaryArray</code>.\nReturns a new null <code>FixedSizeListArray</code>.\nReturns a new null <code>ListArray</code>.\nReturns a new null <code>MapArray</code> of <code>length</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>PrimitiveArray</code> where all slots are null / …\nCreates a null <code>StructArray</code> of length <code>length</code>.\nCreates a new null <code>UnionArray</code>.\nReturns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.\nCreates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …\nCreate a <code>MutableUtf8Array</code> out of low-end APIs.\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nCreates a new <code>Utf8Array</code> without checking for offsets …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>.\nThe number of null slots on this <code>Array</code>.\nThe offsets of the array\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>BinaryArray</code>.\nThe offsets\nThe offsets [<code>Buffer</code>].\nreturns the offsets\nThe optional offsets.\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>Utf8Array</code>.\nContains functions and function factories to order values …\nPop the last entry from <code>MutableBinaryValuesArray</code>. This …\nPop the last entry from <code>MutableBinaryArray</code>. This function …\nPop an entry from <code>MutableBooleanArray</code>. Note If the values …\nPop the last entry from <code>MutableFixedSizeBinaryArray</code>. This …\nPop a value from the array. Note if the values is empty, …\nPop the last entry from <code>MutableUtf8Array</code>. This function …\nPop the last entry from <code>MutableUtf8ValuesArray</code>. This …\nPushes a new item to the array.\nPushes a new element to the array.\nPushes a new entry to <code>MutableBooleanArray</code>.\npushes a new entry to <code>MutableFixedSizeBinaryArray</code>.\nAdds a new value to the array.\nCall this once for each “row” of children you push.\nPushes a new element to the array.\nPushes a new item to the array.\nAdds a new null element to the array.\npushes a null value\nPush a new element that holds the invariants of the struct.\nSafety\nNeeds to be called when a valid value was extended to this …\nReserves additional slots to its capacity.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of the keys of this <code>DictionaryArray</code>.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the values of this <code>BooleanArray</code>.\nSets values.\nUpdate the values of this <code>PrimitiveArray</code>.\nShrink the array to fit its length.\nShrinks the capacity of the <code>MutableBinaryValuesArray</code> to …\nShrinks the capacity of the <code>MutableBinaryArray</code> to fit its …\nShrinks the capacity of the <code>MutableBooleanArray</code> to fit its …\nShrinks the capacity of the <code>MutableDictionaryArray</code> to fit …\nShrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …\nShrinks the capacity of the <code>MutableFixedSizeListArray</code> to …\nShrinks the capacity of the <code>MutableListArray</code> to fit its …\nShrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …\nShrinks the capacity of the <code>MutableStructArray</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8Array</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8ValuesArray</code> to fit …\nreturns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…\nReturns the size\nReturns the size (number of elements per slot) of this …\nReturns the size (number of elements per slot) of this …\nSlices this <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nSlices the <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a new <code>FixedSizeBinaryArray</code> with a different …\nChanges the arrays’ <code>DataType</code>, returning a new …\nReturns a new <code>PrimitiveArray</code> with a different logical type.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nConvert an arrow2 <code>Array</code> to <code>arrow_data::ArrayData</code>\nConvert this <code>Array</code> into [<code>ArrayData</code>]\nConvert this array into <code>arrow_data::ArrayData</code>\nSame as <code>into_empty</code> but clones the inner value map instead …\nCreates an empty <code>MutableDictionaryArray</code> from a given empty …\nFallible version of <code>Extend::extend</code>.\nThis is infalible and is implemented for consistency with …\nThis is infalible and is implemented for consistency with …\nExpand this array, using elements from the underlying …\nTries to extend itself with elements from <code>other</code>, failing …\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …\nCreates a <code>FixedSizeBinaryArray</code> from an fallible iterator …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator.\nReturns a new <code>DictionaryArray</code>.\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an fallible iterator of trusted …\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an fallible iterator of trusted …\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an falible iterator of trusted …\nReturns a the inner <code>Field</code>\nReturns a <code>MutableBinaryValuesArray</code> created from its …\nReturns a <code>MutableBinaryArray</code> created from its internal …\nReturns a <code>BinaryArray</code> created from its internal …\nThe canonical method to create a <code>MutableBooleanArray</code> out …\nThe canonical method to create a <code>BooleanArray</code> out of …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeListArray</code>.\nCreates a new <code>ListArray</code>.\nReturns a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nThe canonical method to create a <code>MutablePrimitiveArray</code> out …\nThe canonical method to create a <code>PrimitiveArray</code> out of its …\nCreate a <code>MutableStructArray</code> out of low-end APIs.\nReturns a new <code>StructArray</code>.\nReturns a new <code>UnionArray</code>.\nReturns a <code>MutableUtf8Array</code> created from its internal …\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nReturns a <code>Utf8Array</code> created from its internal …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>Utf8Array</code> without checking for offsets …\nTries to push a new element.\nThis is infalible and is implemented for consistency with …\ntries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.\nThis is infalible and is implemented for consistency with …\nNeeds to be called when a valid value was extended to this …\nNeeds to be called when a valid value was extended to this …\nThe types.\nThe validity of the <code>Array</code>: every array has an optional …\nThe optional validity of the array.\nThe optional validity.\nReturns the optional validity.\nThe optional validity. Equivalent to <code>self.keys().validity()</code>…\nThe optional validity.\nThe optional validity.\nThe optional validity.\nReturns the optional validity.\nThe optional validity.\nThe optional validity.\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the value at index <code>i</code>\nReturns the value of the <code>DictionaryArray</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns value at position <code>i</code>.\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>.\nReturns the value at slot <code>i</code>.\nReturn the <code>i</code>th child array.\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code> as bool\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns the element at index <code>i</code> as &amp;str\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as &amp;str\nReturns the element at index <code>i</code>.\nReturns the value at index <code>i</code>. The value on null slots is …\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nThe values of the array\nreturns its values.\nreturns its values.\nReturns the values of this <code>BinaryArray</code>.\nReturns its values.\nThe values <code>Bitmap</code>. Values on null slots are undetermined …\nreturns a reference to the inner values.\nReturns the values of the <code>DictionaryArray</code>.\nReturns its values.\nReturns the values allocated on this <code>FixedSizeBinaryArray</code>.\nThe inner values\nReturns the inner array.\nThe values\nThe values.\nReturns its values.\nThe values <code>Buffer</code>. Values on null slots are undetermined …\nThe values\nReturns the values of this <code>StructArray</code>.\nreturns its values.\nreturns its values.\nReturns the values of this <code>Utf8Array</code>.\nReturns an iterator over the values of this array\nReturns an iterator of <code>&amp;[u8]</code> over every element of this …\nReturns an iterator over the values of this …\nReturns an iterator over the values of this <code>BooleanArray</code>.\nReturns an iterator of <code>Box&lt;dyn Scalar&gt;</code>\nReturns iterator over the values of <code>FixedSizeBinaryArray</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>T</code>\nReturns an iterator of the values, <code>&amp;T</code>, ignoring the arrays…\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator over the the values [<code>V::IterValue</code>].\nReturns a mutable slice of values.\nReturns a mutable slice of values.\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nCreates an new <code>MutableBooleanArray</code> with a capacity of …\nCreates a new <code>MutableFixedSizeBinaryArray</code> with capacity …\nCreates a new <code>MutableListArray</code> with a capacity.\nCreates a new <code>MutablePrimitiveArray</code> with a capacity.\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nCreates a new <code>MutablePrimitiveArray</code> from a capacity and …\nClones this <code>Array</code> with a new new assigned bitmap.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this <code>DictionaryArray</code> with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns a clone of this <code>BooleanArray</code> with new values.\nReturns this <code>PrimitiveArray</code> with new values.\nDescribes a struct that can be extended from slices of …\nConcrete <code>Growable</code> for the <code>BinaryArray</code>.\nConcrete <code>Growable</code> for the <code>BooleanArray</code>.\nConcrete <code>Growable</code> for the <code>DictionaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeListArray</code>.\nConcrete <code>Growable</code> for the <code>ListArray</code>.\nConcrete <code>Growable</code> for the <code>MapArray</code>.\nConcrete <code>Growable</code> for the <code>NullArray</code>.\nConcrete <code>Growable</code> for the <code>PrimitiveArray</code>.\nConcrete <code>Growable</code> for the <code>StructArray</code>.\nConcrete <code>Growable</code> for the <code>UnionArray</code>.\nConcrete <code>Growable</code> for the <code>Utf8Array</code>.\nConverts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …\nConverts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …\nExtends this <code>Growable</code> with elements from the bounded <code>Array</code> …\nExtends this <code>Growable</code> with null elements, disregarding the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current length of the <code>Growable</code>.\nCreates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.\nCreates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUnion</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …\nCreates a new <code>GrowableNull</code>.\nCreates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableMap</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …\nCompare the values at two arbitrary indices in two arrays.\nreturns a comparison function that compares values at two …\nTotal order of all native types whose Rust implementation …\nimplements comparison using IEEE 754 total ordering for f32\nimplements comparison using IEEE 754 total ordering for f64\nAn immutable container semantically equivalent to …\nThis crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.\nA container of booleans. <code>MutableBitmap</code> is semantically …\nCompute bitwise AND operation\nReturns the byte slice of this <code>Bitmap</code>.\nReturns the slice of bytes of this <code>MutableBitmap</code>. Note …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise binary operation to a <code>MutableBitmap</code>.\nReturns the capacity of <code>MutableBitmap</code> in number of bits.\nCreates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.\nReturns an iterator over bits in bit chunks <code>BitChunk</code>.\nEmpties the <code>MutableBitmap</code>.\nExtends <code>MutableBitmap</code> by <code>additional</code> values of constant …\nExtends the <code>MutableBitmap</code> from a <code>Bitmap</code>.\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends <code>self</code> from a <code>TrustedLen</code> iterator.\nExtends <code>self</code> from an iterator of trusted len.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>arrow-rs</code> <code>NullBuffer</code>\nCreates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nInitializes a <code>MutableBitmap</code> with all values set to valid/ …\nInitializes a zeroed <code>MutableBitmap</code>.\nCreate a new <code>Bitmap</code> from an arrow <code>NullBuffer</code>\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a slice and length.\nAlias for <code>Bitmap::try_new().unwrap()</code> This function is <code>O(1)</code>\nInitializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …\nReturns whether the bit at position <code>i</code> is set.\nReturns whether the position <code>index</code> is set.\nReturns whether the bit at position <code>i</code> is set.\nUnsafely returns whether the bit at position <code>i</code> is set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nConverts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …\nReturns whether <code>Bitmap</code> is empty\nReturns whether <code>MutableBitmap</code> is empty.\nReturns a new iterator of <code>bool</code> over this bitmap\nconstructs a new iterator over the bits of <code>MutableBitmap</code>.\nReturns the length of the <code>Bitmap</code>.\nReturns the length of the <code>MutableBitmap</code>.\nConverts this <code>Bitmap</code> into a <code>MutableBitmap</code>, cloning its …\nInitializes an empty <code>Bitmap</code>.\nCreates a new <code>IntoIter</code> from a <code>Bitmap</code>\nInitializes an empty <code>MutableBitmap</code>.\nInitializes an new <code>Bitmap</code> filled with set/unset values.\nInitializes an new <code>Bitmap</code> filled with set values.\nInitializes an new <code>Bitmap</code> filled with unset values.\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nCounts the nulls (unset bits) starting from <code>offset</code> bits …\nCompute bitwise OR operation\nPop the last bit from the <code>MutableBitmap</code>. Note if the …\nPushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …\nPushes a new bit to the <code>MutableBitmap</code>\nApply a bitwise operation <code>op</code> to four inputs and return the …\nReserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …\nSets the position <code>index</code> to <code>value</code>\nSets the position <code>index</code> to <code>value</code>\nShrinks the capacity of the <code>MutableBitmap</code> to fit its …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nApply a bitwise operation <code>op</code> to three inputs and return …\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an falible iterator of …\nInitializes a new <code>Bitmap</code> from vector of bytes and a length.\nInitializes a new <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a …\nApply a bitwise operation <code>op</code> to one input and return the …\nApplies a function to every bit of this <code>MutableBitmap</code> in …\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nGeneral utilities for bitmaps representing items where LSB …\nInitializes a pre-allocated <code>MutableBitmap</code> with capacity …\nCompute bitwise XOR operation\nA chunk of bits. This is used to create masks of a given …\nTrait representing an exact iterator over bytes in <code>BitChunk</code>…\nThis struct is used to efficiently iterate over bit masks …\nAn iterator over a slice of bytes in <code>BitChunk</code>s.\nAn iterator over mutable slices of bytes of exact size.\nAn iterator over bits according to the LSB, i.e. the bytes …\nThere are null values\nThere are no null values\nIterator over a bitmap that returns slices of set regions …\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the number of bytes required to hold <code>bits</code> bits.\nReturns the number of zero bits in the slice offsetted by …\nFormats <code>bytes</code> taking into account an offset and length of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconvert itself from bytes.\nReturns whether bit at position <code>i</code> in <code>data</code> is set\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are still elements in this iterator\nReturns whether bit at position <code>i</code> in <code>byte</code> is set or not\nReturns the number of chunks of this iterator\nCreates a new <code>BitChunksExact</code>.\nCreates a <code>BitChunks</code>.\nReturns a new <code>BitChunksExactMut</code>\nCreates a new <code>BitmapIter</code>.\nCreates a new <code>SlicesIterator</code>\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nThe remainder of the iterator.\nReturns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…\nReturns the remainder <code>BitChunk</code>.\nThe remainder slice\nAn iterator over individual items of the remainder\nThe number of items in the remainder\nReturns the remainder bits in <code>BitChunks::remainder</code>.\nThe length of the remainder slice in bits.\nSets bit at position <code>i</code> in <code>byte</code>\nSets bit at position <code>i</code> in <code>data</code>\nSets bit at position <code>i</code> in <code>data</code> without doing bound checks\nReturns the total number of slots. It corresponds to the …\nconvert itself into bytes.\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nReturns the byte slice stored in this buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns a mutable reference to its slice, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns whether the buffer is empty.\nReturns whether underlying data is sliced. If sliced the …\nReturns the number of bytes in the buffer\nCreates an empty <code>Buffer</code>.\nReturns the offset of this buffer.\nSafety\nGet the strong count of underlying <code>Arc</code> data buffer.\nGet the weak count of underlying <code>Arc</code> data buffer.\nSlices this buffer starting at <code>offset</code>.\nSlices this buffer starting at <code>offset</code>.\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nA vector of trait objects of <code>Array</code> where every item has …\nreturns the <code>Array</code>s in <code>Chunk</code>\nreturns the <code>Array</code>s in <code>Chunk</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes <code>Chunk</code> into its underlying arrays. The arrays are …\nreturns whether the columns have any rows\nreturns the number of rows of every array\nCreates a new <code>Chunk</code>.\nCreates a new <code>Chunk</code>.\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains the concatenate kernel\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nConcatenate multiple Array of the same type into a single …\nAn extension trait to polyfill <code>Arc::unwrap_or_clone</code> from …\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nThe set of supported logical types in this crate.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nTwo i32 representing days and ms\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nA 16-bit floating point number.\nAn 16-bit float\nA 32-bit floating point number.\nA <code>f32</code>\nA 64-bit floating point number.\nA <code>f64</code>\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nmonths_days_ns(i32, i32, i64)\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nThe set of all implementations of the sealed trait …\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nReturns the <code>Field</code>’s <code>DataType</code>.\nIts logical <code>DataType</code>\nWhether this physical type equals <code>PhysicalType::Primitive</code> …\nThe fields composing this schema.\nReturns a new <code>Schema</code> with a subset of all fields whose …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nsupport get extension for metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mode is dense\nIts nullability\nReturns whether the mode is sparse\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nCreates a new <code>Field</code>.\nConstructs a <code>UnionMode::Sparse</code> if the input bool is true, …\nReturns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …\nthe <code>PhysicalType</code> of this <code>DataType</code>.\nIf we have the only reference to <code>T</code> then unwrap it. …\nCreates a new <code>Field</code> with metadata.\nAttaches a <code>Metadata</code> to <code>Schema</code>\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nReturns the argument unchanged.\nWraps an external error in an <code>Error</code>.\nCalls <code>U::from(self)</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\ncreate an empty ArrowSchema\ncreates an empty <code>ArrowArray</code>, which can be used to import …\nCreates an empty <code>ArrowArrayStream</code> used to import from a …\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nReturns the field provided by the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality to mmap in-memory data regions.\nAdvances this iterator by one array\nReturns a new <code>ArrowArrayStreamReader</code>\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this FileReader, returning the underlying reader\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nCheck if the stream is finished\nReturns the <code>FileMetadata</code>\nReturn the schema of the stream\nCreates a new <code>FileReader</code>. Use <code>projection</code> to only take …\nTry to create a new stream reader\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nReturn the schema of the file\nReturn the schema of the file\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nSet the inner memory scratches so they can be reused in a …\nThe total size of the file in bytes\nReturn the data inside this wrapper.\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nGet the Arrow columns in this record.\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nGet the IPC fields for this record.\nWrite continuation bytes, and mark the stream as done\nWrite footer and closing tag, then mark the writer as done\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes itself, returning the inner writer.\nConsumes itself into the inner writer\nCreates a new <code>StreamWriter</code>\nCreates a new <code>FileWriter</code>.\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nSet the inner memory scratches so they can be reused in a …\nStarts the stream by writing a Schema message to it. Use …\nWrites the header and first (schema) message to the file.\nCreates a new <code>FileWriter</code> from an existing file, seeking to …\nCreates a new <code>FileWriter</code> and writes the header to <code>writer</code>\nWrites an <code>Array</code> to <code>arrow_data</code>\nWrites <code>Chunk</code> to the stream\nWrites <code>Chunk</code> to the file\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nReturns the byte slice stored in this buffer\nReturns the byte slice stored in this buffer\nReturns a reference to its internal <code>Buffer</code>.\nReturns the capacity of <code>Offsets</code>.\nExtends itself with <code>additional</code> elements equal to the last …\nReturns the first offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>Vec</code>.\nReturns the inner <code>Buffer</code>.\nCopy-on-write API to convert <code>OffsetsBuffer</code> into <code>Offsets</code>.\nReturns the last offset of this container.\nReturns the last offset.\nReturns the number of offsets in this container.\nReturns the number of offsets in this container.\nReturns the length an array with these offsets would be.\nReturns the length an array with these offsets would be.\nReturns an iterator with the lengths of the offsets\nReturns an empty <code>Offsets</code> (i.e. with a single element, the …\nReturns an empty <code>OffsetsBuffer</code> (i.e. with a single …\nReturns <code>Offsets</code> assuming that <code>offsets</code> fulfills its …\nSafety\nReturns an <code>Offsets</code> whose all lengths are zero.\nPops the last element\nReturns the range of the offsets.\nReserves <code>additional</code> entries.\nShrinks the capacity of self to fit.\nSlices this <code>OffsetsBuffer</code>.\nSlices this <code>OffsetsBuffer</code> starting at <code>offset</code>.\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nTry extend from an iterator of lengths\nExtends itself from another <code>Offsets</code>\nExtends itself from another <code>Offsets</code> sliced by <code>start, length</code>\nCreates a new <code>Offsets</code> from an iterator of lengths\nTry to create a new <code>Offsets</code> from a sequence of <code>lengths</code>\nPushes a new element with a given length.\nPushes a new element with a given length.\nReturns a new <code>Offsets</code> with a capacity, allocating at least …\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a <code>DataType</code>. …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether it is valid\nreturns a new <code>DictionaryScalar</code>\nReturns a new <code>PrimitiveScalar</code>.\nReturns a new <code>Utf8Scalar</code>\nReturns a new <code>BinaryScalar</code>.\nReturns a new <code>BooleanScalar</code>\nreturns a new <code>ListScalar</code>\nreturns a new <code>MapScalar</code>\nA new <code>NullScalar</code>\nReturns a new <code>StructScalar</code>\nreturns a new <code>FixedSizeListScalar</code>\nReturns a new <code>FixedSizeBinaryScalar</code>.\nReturns a new <code>UnionScalar</code>\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nReturns a new <code>PrimitiveScalar</code> with the same value but …\nReturns the type of the union scalar\nThe values of the <code>DictionaryScalar</code>\nReturns the optional value.\nReturns the value irrespectively of the validity.\nIts value\nThe value\nIts value\nReturns the inner value\nThe values of the <code>ListScalar</code>\nThe values of the <code>MapScalar</code>\nReturns the values irrespectively of the validity.\nThe values of the <code>FixedSizeListScalar</code>\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nCalculates the scale factor between two TimeUnits. The …\nParses a <code>Utf8Array</code> to naive timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nAn iterator of known, fixed size. A trait denoting Rusts’…\nA chunk of bits. This is used to create masks of a given …\nAn [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …\nAn [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …\nType denoting its representation as bytes. This is <code>[u8; N]</code> …\nApproximate number of [<code>f16</code>] significant digits in base 10\nTwo i32 representing days and ms\n[<code>f16</code>] Euler’s number (ℯ)\n[<code>f16</code>] machine epsilon value\n[<code>f16</code>] 1/π\n[<code>f16</code>] 1/√2\n[<code>f16</code>] 2/π\n[<code>f16</code>] 2/√π\n[<code>f16</code>] π/2\n[<code>f16</code>] π/3\n[<code>f16</code>] π/4\n[<code>f16</code>] π/6\n[<code>f16</code>] π/8\nA 16-bit floating point number.\nA 32-bit floating point number.\nA 64-bit floating point number.\n[<code>f16</code>] positive Infinity (+∞)\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…\nRange of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 64-bit integer.\nA signed 8-bit integer.\n[<code>f16</code>] 𝗅𝗇 10\n[<code>f16</code>] 𝗅𝗇 2\n[<code>f16</code>] 𝗅𝗈𝗀₁₀2\n[<code>f16</code>] 𝗅𝗈𝗀₁₀ℯ\n[<code>f16</code>] 𝗅𝗈𝗀₂10\n[<code>f16</code>] 𝗅𝗈𝗀₂ℯ\nNumber of [<code>f16</code>] significant digits in base 2\nLargest finite [<code>f16</code>] value\nMaximum possible [<code>f16</code>] power of 10 exponent\nMaximum possible [<code>f16</code>] power of 2 exponent\nMaximum subnormal [<code>f16</code>] value\nSmallest finite [<code>f16</code>] value\nMinimum possible normal [<code>f16</code>] power of 10 exponent\nOne greater than the minimum possible normal [<code>f16</code>] power …\nSmallest positive normal [<code>f16</code>] value\nMinimum positive subnormal [<code>f16</code>] value\nmonths_days_ns(i32, i32, i64)\n[<code>f16</code>] Not a Number (NaN)\n[<code>f16</code>] negative infinity (-∞)\n[<code>f16</code>] -1\n[<code>f16</code>] -0\nSealed trait implemented by all physical types that can be …\n[<code>f16</code>] 1\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\n[<code>f16</code>] Archimedes’ constant (π)\nThe corresponding variant of <code>PrimitiveType</code>.\nThe set of all implementations of the sealed trait …\nThe radix or base of the internal representation of [<code>f16</code>]\n[<code>f16</code>] √2\nAn unsigned 16-bit integer.\nAn unsigned 32-bit integer.\nAn unsigned 64-bit integer.\nAn unsigned 8-bit integer.\n[<code>f16</code>] 0\nConverts a fixed-point number to a floating-point number …\nConverts a floating-point number to a fixed-point number …\nRestrict a value to a certain interval unless it is NaN.\nReturns the floating point category of the number.\nReturns a number composed of the magnitude of <code>self</code> and the …\nThe number of days\nThe number of days\nThe in-memory representation of the DayMillisecond variant …\nA 16-bit floating point type implementing the IEEE …\nConverts a fixed-point number to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from <code>usize</code>.\nFrom bytes in big endian\nCreates a floating point value from its representation as …\nConstructs a 16-bit floating point value from the raw bits.\nConstructs a 16-bit floating point value from a 32-bit …\nConstructs a 16-bit floating point value from a 32-bit …\nConstructs a 16-bit floating point value from a 64-bit …\nConstructs a 16-bit floating point value from a 64-bit …\nConverts a fixed-point number to a floating-point number.\nFrom bytes in little endian\nCreates a floating point value from its representation as …\nconvert itself from bytes.\nCreates a floating point value from its representation as …\nConvert itself from <code>usize</code>.\nReturns a new <code>i256</code> from two <code>i128</code>.\nPhysical representation of a decimal\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.\nReturns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if and only if <code>self</code> has a negative sign, …\nReturns <code>true</code> if and only if <code>self</code> has a positive sign, …\nConverts a number.\nConverts a fixed-point number to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts an integer to a floating-point number.\nConverts an integer to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts a number.\nConverts a number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a number.\nConverts an integer to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts a number.\nConverts an integer to a floating-point number.\nConverts an integer to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts an integer to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nConverts a fixed-point number to a floating-point number.\nReturns the maximum of the two numbers.\nThe number of milliseconds\nReturns the minimum of the two numbers.\nThe number of months\nThe in-memory representation of the MonthDayNano variant …\nCreates a new <code>BitChunkIter</code> with <code>len</code> bits.\nCreates a new <code>BitChunkOnes</code> with <code>len</code> bits.\nReturns a new <code>IndexRange</code>.\nA new <code>days_ms</code>.\nA new <code>months_days_ns</code>.\nThe number of nanoseconds\nConverts a fixed-point number to a floating-point number.\nConverts a floating-point number to a fixed-point number.\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nConverts a fixed-point number to a floating-point number, …\nConverts a floating-point number to a fixed-point number, …\nReturns a number that represents the sign of <code>self</code>.\nContains traits and implementations of multi-data used in …\nTo bytes in big endian\nReturns the memory representation of the underlying bit …\nConverts a [<code>f16</code>] into the underlying bit representation.\nConverts a [<code>f16</code>] value into a <code>f32</code> value.\nConverts a [<code>f16</code>] value into a <code>f32</code> value.\nConverts a [<code>f16</code>] value into a <code>f64</code> value.\nConverts a [<code>f16</code>] value into a <code>f64</code> value.\nConverts a floating-point number to a fixed-point number.\nTo bytes in little endian\nReturns the memory representation of the underlying bit …\nconvert itself into bytes.\nReturns the memory representation of the underlying bit …\nConvert itself to <code>usize</code>.\nReturns the ordering between <code>self</code> and <code>other</code>.\nConverts a fixed-point number to a floating-point number, …\nConverts a floating-point number to a fixed-point number, …\nConverts a fixed-point number to a floating-point number, …\nConverts a floating-point number to a fixed-point number, …\nThe type holding bits for masks.\nDescribes the ability to convert itself from a <code>BitChunk</code>.\nNumber of lanes\nType used for masking.\nThe <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …\nA struct that lends itself well to be compiled leveraging …\nTrait implemented by some <code>NativeType</code> that have a SIMD …\nThe SIMD type associated with this trait. This type …\nReturns a tuple of 3 items whose middle item is itself, …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from a slice.\nConvert itself from a slice.\ncreates a new Self from <code>v</code> by populating items from <code>v</code> up to …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMulti-Data correspondence of the native type\nSets values to <code>default</code> based on <code>mask</code>.\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nAtomic types.\nCreates a new scope for spawning threads.\nSelects from a set of channel operations.\nThread synchronization primitives.\nThreads that can borrow variables from the stack.\nMiscellaneous utilities.\nA thread-safe mutable memory location.\nTrait which allows reading from primitive atomic types …\nType returned by <code>load_consume</code>.\nReturns a raw pointer to the underlying data in this …\nIf the current value equals <code>current</code>, stores <code>new</code> into the …\nIf the current value equals <code>current</code>, stores <code>new</code> into the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies logical “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies logical “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “or” to the current value and returns …\nApplies logical “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nFetches the value, and applies a function to it that …\nApplies bitwise “xor” to the current value and returns …\nApplies logical “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nReturns <code>true</code> if operations on values of this type are …\nLoads a value from the atomic cell.\nLoads a value from the atomic using a “consume” memory …\nCreates a new atomic cell initialized with <code>val</code>.\nStores <code>val</code> into the atomic cell.\nStores <code>val</code> into the atomic cell and returns the previous …\nTakes the value of the atomic cell, leaving …\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nAn error returned from the <code>ready_timeout</code> method.\nThe receiving side of a channel.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nSelects from a set of channel operations.\nAn error returned from the <code>select_timeout</code> method.\nA selected operation that needs to be completed.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe sending side of a channel.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nA non-blocking iterator over messages in a channel.\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of the selected operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message.\nUnwraps the message.\nUnwraps the message.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation timed out.\nReturns <code>true</code> if the receive operation timed out.\nA blocking iterator over messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nCreates a receiver that never delivers messages.\nCreates an empty list of channel operations for selection.\nBlocks until one of the operations becomes ready.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is received or …\nAdds a receive operation.\nCompletes the receive operation.\nWaits for a message to be received from the channel, but …\nWaits for a message to be received from the channel, but …\nRemoves a previously added operation.\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nBlocks until one of the operations becomes ready and …\nSelects from a set of channel operations.\nSelects from a set of channel operations.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is sent or the …\nAdds a send operation.\nCompletes the send operation.\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a receiver that delivers messages periodically.\nA non-blocking iterator over messages in the channel.\nAttempts to find a ready operation without blocking.\nAttempts to receive a message from the channel without …\nAttempts to select one of the operations without blocking.\nAttempts to send a message into the channel without …\nCreates a channel of unbounded capacity.\nThe queue was empty at the time of stealing.\nAn injector queue.\nThe steal operation needs to be retried.\nPossible outcomes of a steal operation.\nA stealer handle of a worker queue.\nAt least one task was successfully stolen.\nA worker queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsumes items until a <code>Success</code> is found and returns it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue was empty at the time of …\nReturns <code>true</code> if the steal operation needs to be retried.\nReturns <code>true</code> if at least one task was stolen.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the queue.\nCreates a new injector queue.\nCreates a FIFO worker queue.\nCreates a LIFO worker queue.\nIf no task was stolen, attempts another steal operation.\nPops a task from the queue.\nPushes a task into the queue.\nPushes a task into the queue.\nSteals a task from the queue.\nSteals a task from the queue.\nSteals a batch of tasks and pushes them into another …\nSteals a batch of tasks and pushes them into a worker.\nSteals a batch of tasks, pushes them into another worker, …\nSteals a batch of tasks, pushes them into a worker, and …\nSteals no more than <code>limit</code> of tasks and pushes them into …")