searchState.loadedDescShard("re_viewer", 3, "Convert native type from i128.\nConvert native type from i32.\nConvert native type from i64.\nConvert native integer type from usize\nReturns the byte width of this native type.\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nA signed 256-bit integer\nEquality operation\nGreater than equals operation\nGreater than operation\nLess than equals operation\nLess than operation\nNot equal operation\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nDetermines whether the specified <code>i256</code> value can be properly\nDetermines whether the specified <code>i128</code> value can be properly\nReturns true if zero else false\nCreates a ArrowTimestampType::Native from the provided …\nA map of key-value pairs containing additional meta data.\nNumber of milliseconds\nChecked remainder operation\nWrapping remainder operation\nNumber of months\nChecked multiplication operation\nWrapping multiplication operation\nNumber of nanoseconds\nChecked negation operation\nWrapping negation operation\nChecked exponentiation operation\nWrapping exponentiation operation\nChecked subtraction operation\nWrapping subtraction operation\nConverts this instance into a byte slice\nConvert native type to i64.\nConvert native type to isize.\nConvert native type to usize.\nConvert from usize according to the <code>as</code> operator\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nError when an arithmetic operation overflows.\nMany different operations in the <code>arrow</code> crate return this …\nError during import or export to/from the C Data Interface\nError during casting from one type to another.\nError during computation.\nError during CSV-related operations.\nError when a dictionary key is bigger than the key type\nError during division by zero.\nContains the error value\nWraps an external error.\nError indicating that an unexpected or bad argument was …\nError during IO operations.\nError during IPC operations in <code>arrow-ipc</code> or <code>arrow-flight</code>.\nError during JSON-related operations.\nMemory or buffer error.\nReturned when functionality is not yet available.\nContains the success value\nError during Parquet operations.\nError during parsing from a string.\nA specialized <code>Result</code> type for Arrow operations.\nError when the run end index in a REE array is bigger than …\nError during schema-related operations.\nOpaque binary data\nLogically the same as Binary, but the internal …\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nFor sending dictionary encoding information. Any Field can …\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nData structures for describing a table row batch (a …\nArrow File metadata\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThe root Message type This union enables us to easily send …\nThese are stored in the flatbuffer in the Type union below\nA data header describing the shared memory layout of a “…\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nA Struct_ in the flatbuffer metadata is the same as an …\nData structures for dense tensors Shape data for a single …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nUtilities for converting between IPC types and native …\nGenerated code\nArrow IPC File and Stream Readers\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nArrow IPC File and Stream Writers\nLow level Arrow Schema to IPC bytes converter\nAn owned container for a validated <code>Message</code>\nDeserialize an ipc crate::Schema` from flat buffers to an …\nPush a key-value metadata into a FlatBufferBuilder and …\nSerialize a schema in IPC format\nAdds a Schema to a flatbuffer and returns the offset\nTry deserialize flat buffer format bytes into a schema\nTry deserialize the IPC format bytes into a schema\nArrow File metadata\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nFor sending dictionary encoding information. Any Field can …\nData structures for describing a table row batch (a …\nThe root Message type This union enables us to easily send …\nA data header describing the shared memory layout of a “…\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOpaque binary data\nLogically the same as Binary, but the internal …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThese are stored in the flatbuffer in the Type union below\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nA Struct_ in the flatbuffer metadata is the same as an …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nData structures for dense tensors Shape data for a single …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nA low-level, push-based interface for reading an IPC file\nArrow File reader\nBuild an Arrow <code>FileReader</code> with custom options.\nA low-level interface for reading <code>RecordBatch</code> data from a …\nArrow Stream reader\nRead the dictionary from the buffer and provided metadata, …\nRead the footer length from the last 10 bytes of an Arrow …\nCreates a record batch from binary data using the …\nKeeps track of dictionaries that have been written, to …\nStores the encoded data, which is an crate::Message, and …\nWriter for an IPC file\nHandles low level details of encoding <code>Array</code> and <code>Schema</code> …\nIPC write options used to control the behaviour of the …\nWriter for an IPC stream\nArrow buffers to be written, should be an empty vec for …\nAn encoded crate::Message\nWrite a message’s IPC data and buffers, returning …\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nConvert a Python object to an arrow-rs type.\nConvert the implemented type into a Python object while …\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nMatch field names of structs and lists. If set to <code>true</code>, …\nReads the next <code>RecordBatch</code>.\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nEncode dictionary values not preserving the dictionary …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nConverts numeric type to a <code>String</code>\nA writer that allows writing to a <code>String</code> like an …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nA trait representing an immutable Arrow array. Arrow …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nHelper to incrementally build a <code>Chunk</code>.\nThe actual iterator implementation for …\nThe underlying item type for <code>ChunkComponentIter</code>.\nA <code>ChunkComponentSlicer</code> knows how to efficiently slice …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>crate::Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nThe fully-qualified name of a <code>Component</code>, e.g. …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nContains the error value\nContains the error value\nA query at a given time, for a given timeline.\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nError spawning one of the background threads.\nHelper to incrementally build a <code>TimeColumn</code>.\nErrors when deserializing/parsing/reading a column of time …\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nConverts itself to a reference of <code>Any</code>, which enables …\nConverts itself to a mutable reference of <code>Any</code>, which …\nSplit a chunk if it contains &gt;= rows than this threshold …\nThe component data.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nCallbacks you can install on the <code>ChunkBatcher</code>.\nIf true, the results will include one extra tick on each …\nwhether the array is empty\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is valid.\nShould the results contain all extra component information …\nShould the results contain all extra timeline information …\nThe length of the <code>Array</code>. Every array has a length …\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nThe number of null slots on this <code>Array</code>.\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nSlices this <code>Array</code>.\nSlices the <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nUser-specified <code>TimePoint</code> for this event.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nThe validity of the <code>Array</code>: every array has an optional …\nClones this <code>Array</code> with a new new assigned bitmap.\nAtomic types.\nCreates a new scope for spawning threads.\nSelects from a set of channel operations.\nThread synchronization primitives.\nThreads that can borrow variables from the stack.\nMiscellaneous utilities.\nA thread-safe mutable memory location.\nTrait which allows reading from primitive atomic types …\nType returned by <code>load_consume</code>.\nLoads a value from the atomic using a “consume” memory …\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nAn error returned from the <code>ready_timeout</code> method.\nThe receiving side of a channel.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nSelects from a set of channel operations.\nAn error returned from the <code>select_timeout</code> method.\nA selected operation that needs to be completed.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe sending side of a channel.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nA non-blocking iterator over messages in a channel.\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nCreates a receiver that never delivers messages.\nSelects from a set of channel operations.\nSelects from a set of channel operations.\nCreates a receiver that delivers messages periodically.\nCreates a channel of unbounded capacity.\nThe queue was empty at the time of stealing.\nAn injector queue.\nThe steal operation needs to be retried.\nPossible outcomes of a steal operation.\nA stealer handle of a worker queue.\nAt least one task was successfully stolen.\nA worker queue.\nThe alignment of pointer.\nAn atomic pointer that can be safely shared between …\nAn epoch-based garbage collector.\nThe error returned on failed compare-and-set operation.\nMemory orderings for compare-and-set operations.\nThe error returned on failed compare-and-swap operation.\nA guard that keeps the current thread pinned.\nThe type for initializers.\nA handle to a garbage collector.\nAn owned heap-allocated object.\nTypes that are pointed to by a single word.\nA trait for either <code>Owned</code> or <code>Shared</code> pointers.\nA pointer to an object protected by the epoch GC.\nThe value in the atomic pointer at the time of the failed …\nThe value in the atomic pointer at the time of the failed …\nReturns the default global collector.\nDereferences the given pointer.\nMutably dereferences the given pointer.\nDrops the object pointed to by the given pointer.\nThe ordering of the operation when it fails.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nInitializes a with the given initializer.\nReturns the machine representation of the pointer.\nReturns <code>true</code> if the current thread is pinned.\nThe new value, which the operation failed to store.\nThe new value, which the operation failed to store.\nPins the current thread.\nThe ordering of the operation when it succeeds.\nReturns a reference to a dummy guard that allows …\nA bounded multi-producer multi-consumer queue.\nAn unbounded multi-producer multi-consumer queue.\nA thread parking primitive.\nA sharded reader-writer lock.\nA guard used to release the shared read access of a …\nA guard used to release the exclusive write access of a …\nUnparks a thread parked by the associated <code>Parker</code>.\nEnables threads to synchronize the beginning or end of …\nA scope for spawning threads.\nA handle that can be used to join its scoped thread.\nConfigures the properties of a new thread.\nCreates a new scope for spawning threads.\nPerforms exponential backoff in spin loops.\nPads and aligns a value to the length of a cache line.\nAn alias for <code>BuildHasherDefault</code> for use with <code>NoHashHasher</code>.\nA <code>HashMap</code> with an integer domain, using <code>NoHashHasher</code> to …\nA <code>HashSet</code> of integers, using <code>NoHashHasher</code> to perform no …\nTypes which are safe to use with <code>NoHashHasher</code>.\nFor an enabled type <code>T</code>, a <code>NoHashHasher&lt;T&gt;</code> implements …\nApproximations of stack and heap size for both internal …\nReturns the total size of <code>self</code> on the heap, in bytes.\nIs <code>Self</code> just plain old data?\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> in bytes, accounting for …\nThe user-chosen name of the application doing the logging.\nMessage containing an Arrow payload\nLog an entity using an <code>ArrowMsg</code>.\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nData associated with the blueprint state.\nCommand used for activating a blueprint once it has been …\nSend after all messages in a blueprint to signal that the …\nThe official Rerun C Logging SDK\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nA signed duration represented as nanoseconds since unix …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nLoading a file via CLI, drag-and-drop, a file-dialog, etc.\nA unique numeric index for each individual instance within …\nThe most general log message sent from the SDK to the …\nAn integer that is known not to equal its minimum value.\nPerhaps from some manual data ingestion?\nThe official Rerun Python Logging SDK\nA recording of user-data.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe official Rerun Rust Logging SDK\nUsed e.g. for frames in a film.\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nEither nanoseconds or sequence numbers.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSeconds since unix epoch\nThe user clicked on a recording URI in the viewer.\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nSchema and data for all control &amp; data columns.\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nUnique identifier for the chunk in this message.\nIf this store is the result of a clone, which store was it …\n“color”\nRuntime asserts that an archetype has the given components.\n<code>camera / &quot;left&quot; / points / #42</code>\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nExample components to be used for tests and docs\nInserts multiple elements at <code>index</code> within the deque, …\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\ne.g. 3\nImmediately make this the active blueprint for the …\nMake this the default blueprint for the <code>app_id</code>.\ne.g. 11\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nRemoves and returns the elements in the given <code>range</code> from …\nThe resolved path, with all variables Resolved.\nA time-based UID that is only used to help keep track of …\nThe original rule, with unresolved variables.\nSorts <code>self</code>.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\ne.g. <code>a0</code> for alpha releases.\nRemoves an element from anywhere in the deque and returns …\nThe maximum values for all timelines across the entire …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nMessage containing an Arrow payload\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nSchema and data for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nThe maximum values for all timelines across the entire …\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nThe serialized contents of a <code>ComponentBatch</code> with …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nDeprecated. Do not use. See …\nExposes the object’s contents as a set of …\nThe component data.\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes the batch into an Arrow2 array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n64-bit hash.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSee <code>GarbageCollectionOptions::time_budget</code>.\nAn in-memory database built from a stream of <code>LogMsg</code>es.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nThe different parts that make up an <code>EntityPath</code>.\nA recursive, manually updated <code>ChunkStoreSubscriber</code> that …\nContains the error value\nThe errors that can occur when misusing the chunk store.\nThe path to either a specific instance of an entity, or …\nHashes of the components of an <code>InstancePath</code>.\nGet the latest version of the data available at this time.\nContains the success value\nGet all the data within this time interval, plus the latest\nStores many <code>EntityDb</code>s of recordings and blueprints.\nNumber of messages per time.\nNumber of messages per time per timeline.\nA 64-bit number describing either nanoseconds, sequence …\nA query in time.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nA <code>ChunkStoreSubscriber</code> that keeps track of all unique …\nA versioned path (i.e. pinned to a specific <code>RowId</code>) to …\nHashes of the components of a <code>VersionedInstancePath</code>.\nCreates one if it doesn’t exist.\nIn no particular order.\nReturns <code>true</code> if this entity has no children and no data.\nDirect descendants of this (sub)tree.\nMake a clone of this <code>EntityDb</code>, assigning it a new <code>StoreId</code>.\nIf this entity db is the result of a clone, which store …\nSet by whomever created this <code>EntityDb</code>.\nIn no particular order.\nUnconditionally drops all the data for a given <code>EntityPath</code> .\nUnconditionally drops all the data for a given <code>EntityPath</code> …\nDrop all events in the given time range from the given …\nIndicate the whole entity (all instances of it).\nIndicate the whole entity (all instances of it).\nAll loaded <code>EntityDb</code>, both recordings and blueprints, in …\nAll loaded <code>EntityDb</code>, both recordings and blueprints, in …\nA sorted list of all the entity paths in this database.\nReturns either a recording or blueprint <code>EntityDb</code>. One is …\nReturns the closest “neighbor” recording to the given …\nInvokes the <code>predicate</code> for <code>self</code> and all children …\nReturns the <code>StoreId</code> of the oldest modified recording, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode an rrd stream. It can theoretically contain …\nReturn the current <code>ChunkStoreGeneration</code>. This can be used …\nIndicate a specific instance of the entity, e.g. a …\nIndicate a specific instance of the entity, e.g. a …\nIf this is a concrete instance, what instance index are we?\nIf this is a concrete instance, what instance index are we?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we refer to the whole entity (all instances of it)?\nDo we refer to the whole entity (all instances of it)?\nReturns <code>true</code> also for entities higher up in the hierarchy.\nHas no child entities.\nIf you log <code>world/points</code>, then that is a logged entity, but …\nHuman-readable description of the kind\nQueries for the given <code>component_names</code> using latest-at …\nGet the latest index and value for a given dense …\nGet the latest index and value for a given dense …\nThe highest <code>RowId</code> in the store, which corresponds to the …\nTotal number of temporal messages over all timelines.\nUpdates the <code>EntityTree</code> by applying a batch of …\nUpdates the <code>EntityTree</code> by removing any entities which have …\nFull path prefix to the root of this (sub)tree.\nFree up some RAM by forgetting the older parts of all …\nIn no particular order.\nKey used for sorting recordings in the UI.\nReturns a read-only guard to the backing <code>StorageEngine</code>.\nReturns a read-only guard to the backing <code>StorageEngine</code>.\nReturns true if an entity or any of its children have any …\nReturns true if an entity or any of its children have any …\nReturns the stats for the entity and all its children on …\nReturns the stats for the static store of the entity and …\nHistogram of all events on the timeeline, of all entities.\nReturns the time range of data on the given timeline, …\nExport the contents of the current database to a sequence …\nVersions this instance path by stamping it with the …\nVersions this hashed instance path by stamping it with the …\nSee <code>GarbageCollectionOptions::time_budget</code>.\nAn in-memory database built from a stream of <code>LogMsg</code>es.\nWhat is the mean latency between the time data was logged …\nSet by whomever created this <code>EntityDb</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaintains an optimized representation of a batch of …\nA recursive, manually updated <code>ChunkStoreSubscriber</code> that …\nDirect descendants of this (sub)tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFull path prefix to the root of this (sub)tree.\nWhat rows were deleted?\nWhat time points were deleted for each …\nFor each entity+component, how many timeless entries were …\nStats for a single <code>crate::RangeCache</code>.\nStats for all primary caches.\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nContains the error value\nResults for a latest-at query.\nContains the success value\nA ref-counted, inner-mutable handle to a <code>QueryCache</code>.\nUniquely identifies cached query results in the <code>QueryCache</code>.\nResults for a range query.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nKeeps track of handles towards a <code>ChunkStore</code> and its …\nAnything that can expose references to a <code>ChunkStore</code> and …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nResults for each individual component.\nResults for each individual component.\nThe compound index of this query result.\nThe associated <code>EntityPath</code>.\nThe query that yielded these results.\nThe query that yielded these results.\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nWhat is the actual size of this cache after deduplication?\nHow many chunks in the cache?\nWhat would be the size of this cache in the worst case, …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nThe user-chosen name of the application doing the logging.\nMessage containing an Arrow payload\nLog an entity using an <code>ArrowMsg</code>.\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nData associated with the blueprint state.\nCommand used for activating a blueprint once it has been …\nSend after all messages in a blueprint to signal that the …\nThe official Rerun C Logging SDK\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nA signed duration represented as nanoseconds since unix …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nLoading a file via CLI, drag-and-drop, a file-dialog, etc.\nA unique numeric index for each individual instance within …\nThe most general log message sent from the SDK to the …\nAn integer that is known not to equal its minimum value.\nPerhaps from some manual data ingestion?\nThe official Rerun Python Logging SDK\nA recording of user-data.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe official Rerun Rust Logging SDK\nUsed e.g. for frames in a film.\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nEither nanoseconds or sequence numbers.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSeconds since unix epoch\nThe user clicked on a recording URI in the viewer.\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nSchema and data for all control &amp; data columns.\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nUnique identifier for the chunk in this message.\nIf this store is the result of a clone, which store was it …\n“color”\nRuntime asserts that an archetype has the given components.\n<code>camera / &quot;left&quot; / points / #42</code>\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nExample components to be used for tests and docs\nInserts multiple elements at <code>index</code> within the deque, …\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\ne.g. 3\nImmediately make this the active blueprint for the …\nMake this the default blueprint for the <code>app_id</code>.\ne.g. 11\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nRemoves and returns the elements in the given <code>range</code> from …\nThe resolved path, with all variables Resolved.\nA time-based UID that is only used to help keep track of …\nThe original rule, with unresolved variables.\nSorts <code>self</code>.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\ne.g. <code>a0</code> for alpha releases.\nRemoves an element from anywhere in the deque and returns …\nThe maximum values for all timelines across the entire …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nMessage containing an Arrow payload\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nSchema and data for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nThe maximum values for all timelines across the entire …\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nThe serialized contents of a <code>ComponentBatch</code> with …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nDeprecated. Do not use. See …\nExposes the object’s contents as a set of …\nThe component data.\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes the batch into an Arrow2 array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n64-bit hash.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nRotation defined with an axis and an angle.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe identity rotation, expressed as a quaternion\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nRotation defined by a quaternion.\nA 3D rotation.\nThe serialized contents of a <code>ComponentBatch</code> with …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nThe raw UTF8 bytes.\nDeprecated. Do not use. See …\nExposes the object’s contents as a set of …\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the <em>unresolved</em> backtrace associated with this …\nThe component data.\nThe blueprint-specific components.\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nSemantic name associated with this data.\nComponents are the basic building blocks of <code>archetypes</code>.\nThe low-level datatypes that <code>components</code> are built from.\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nRe-exports of external crates that are used throughout the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nImage-related utilities.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nCreate an array of indicator components of this type with …\nThe number of instances of T stored in this buffer.\nReturns all component descriptors that <em>may</em> be provided by …\nSets <code>Self::archetype_field_name</code> to the given one iff it’…\nSets the descriptor’s <code>archetype_field_name</code> to the given …\nSets <code>Self::archetype_name</code> to the given one iff it’s not …\nSets the descriptor’s <code>archetype_name</code> to the given one …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nReturns the unqualified name, e.g. …\nReturns the unqualified name, e.g. <code>Vec2D</code>.\nThe number of bytes stored in this buffer\nReturns a new <code>ArrowBuffer</code> that is a slice of this buffer …\nUseful macro for statically asserting that a <code>struct</code> …\nInternal helpers; not part of the public API.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes the batch into an Arrow2 array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\nUnconditionally sets <code>Self::archetype_field_name</code> to the …\nUnconditionally sets the descriptor’s …\nUnconditionally sets <code>Self::archetype_name</code> to the given one.\nUnconditionally sets the descriptor’s <code>archetype_name</code> to …\nThe source of the error, without any <code>Self::Context</code>.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\nX=Back, Y=Down, Z=Left\nX=Back, Y=Down, Z=Right\nX=Back, Y=Left, Z=Down\nX=Back, Y=Left, Z=Up\nX=Back, Y=Right, Z=Down\nX=Back, Y=Right, Z=Up\nX=Back, Y=Up, Z=Left\nX=Back, Y=Up, Z=Right\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Archetype</strong>: Empties all the components of an entity.\nX=Down, Y=Back, Z=Left\nX=Down, Y=Back, Z=Right\nCamera orientation used when there’s no camera …\nX=Down, Y=Forward, Z=Left\nX=Down, Y=Forward, Z=Right\nX=Down, Y=Left, Z=Back\nX=Down, Y=Left, Z=Forward\nX=Down, Y=Right, Z=Back\nX=Down, Y=Right, Z=Forward\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\nX=Forward, Y=Down, Z=Left\nX=Forward, Y=Down, Z=Right\nX=Forward, Y=Left, Z=Down\nX=Forward, Y=Left, Z=Up\nX=Forward, Y=Right, Z=Down\nX=Forward, Y=Right, Z=Up\nX=Forward, Y=Up, Z=Left\nX=Forward, Y=Up, Z=Right\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\nThe identity transform.\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\nX=Left, Y=Back, Z=Down\nX=Left, Y=Back, Z=Up\nX=Left, Y=Down, Z=Back\nX=Left, Y=Down, Z=Forward\nX=Down, Y=Right, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Right, Y=Down, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Back, Z=Up\nX=Left, Y=Forward, Z=Down\nX=Left, Y=Forward, Z=Up\nX=Left, Y=Up, Z=Back\nX=Left, Y=Up, Z=Forward\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\nX=Right, Y=Back, Z=Down\nX=Right, Y=Back, Z=Up\nX=Right, Y=Down, Z=Back\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Down, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Up, Z=Back\nX=Right, Y=Back, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Right, Y=Up, Z=Back\nX=Right, Y=Up, Z=Forward\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\nX=Up, Y=Back, Z=Left\nX=Up, Y=Back, Z=Right\nX=Up, Y=Forward, Z=Left\nX=Up, Y=Forward, Z=Right\nX=Up, Y=Left, Z=Back\nX=Up, Y=Left, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nWidth/height ratio of the camera sensor.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nClear all the fields of a <code>Transform3D</code>.\nClear all the fields of a <code>Arrows2D</code>.\nClear all the fields of a <code>Arrows3D</code>.\nClear all the fields of a <code>BarChart</code>.\nClear all the fields of a <code>Capsules3D</code>.\nClear all the fields of a <code>DepthImage</code>.\nClear all the fields of a <code>Ellipsoids3D</code>.\nClear all the fields of a <code>EncodedImage</code>.\nClear all the fields of a <code>GeoLineStrings</code>.\nClear all the fields of a <code>GeoPoints</code>.\nClear all the fields of a <code>GraphEdges</code>.\nClear all the fields of a <code>GraphNodes</code>.\nClear all the fields of a <code>InstancePoses3D</code>.\nClear all the fields of a <code>LineStrips2D</code>.\nClear all the fields of a <code>LineStrips3D</code>.\nClear all the fields of a <code>Points2D</code>.\nClear all the fields of a <code>Points3D</code>.\nClear all the fields of a <code>Scalar</code>.\nClear all the fields of a <code>SegmentationImage</code>.\nClear all the fields of a <code>SeriesLine</code>.\nClear all the fields of a <code>SeriesPoint</code>.\nClear all the fields of a <code>TextDocument</code>.\nClear all the fields of a <code>TextLog</code>.\nClear all the fields of a <code>Transform3D</code>.\nClear all the fields of a <code>VideoFrameReference</code>.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nAccessor to the underlying <code>TensorData</code>.\nThe tensor data\nThe expected range of depth values.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::albedo_factor</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::albedo_factor</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::axis_length</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::blob</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::blob</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::blob</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::buffer</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::buffer</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::buffer</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::camera_xyz</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::centers</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::centers</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::centers</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colormap</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::context</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::data</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::depth_range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::edges</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fill_mode</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fill_mode</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::format</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::format</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::format</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::graph_type</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::half_sizes</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::half_sizes</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::half_sizes</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::image_from_camera</code>…\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::keypoint_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::keypoint_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::lengths</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::level</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::line_radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::line_strings</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::marker</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::marker_size</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::mat3x3</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::mat3x3</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::meter</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::node_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::opacity</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::opacity</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::opacity</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::origins</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::origins</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::point_fill_ratio</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternion</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::relation</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::resolution</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::scalar</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::scale</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::scales</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strips</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strips</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::text</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::text</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::timestamp</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::translation</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::translations</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::translations</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::triangle_indices</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::value_range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::values</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vectors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vectors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_normals</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_texcoords</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::video_reference</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::width</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::xyz</code>.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nX &amp; Y focal length in pixels.\nThe format of the image.\nThe format of the image.\nThe format of the image.\nField of View on the Y axis, i.e. the angle between top …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates a new <code>Ellipsoids3D</code> with <code>Self::centers</code> and …\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nConstruct an image from a byte buffer given its …\nTry to construct an <code>Image</code> from a color model (L, RGB, …\nConstruct a depth image from a byte buffer given its …\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct an image from a byte buffer given its …\nCreates a new <code>Capsules3D</code> where each capsule extends …\nCreates a new <code>Asset3D</code> from the file contents at <code>path</code>.\nCreates a new image from the file contents at <code>path</code>.\nCreates a new <code>Asset3D</code> from the given <code>contents</code>.\nCreates a new <code>AssetVideo</code> from the given <code>contents</code>.\nConstruct an image given the encoded content of some image …\nCreates a new <code>Image</code> from the contents of a file.\nCreates a new <code>Points3D</code> from the contents of a <code>.ply</code> file.\nCreates a new <code>TextDocument</code> from the contents of a utf8 …\nCreates a new <code>AssetVideo</code> from the file contents at <code>path</code>.\nCreates a new <code>Image</code> from a file.\nCreates a new <code>Points3D</code> from a <code>.ply</code> file.\nCreates a new <code>TextDocument</code> from a utf8 file.\nCreates a pinhole from the camera focal length and …\nCreates a pinhole from the camera vertical field of view …\nFrom an 16-bit grayscale image.\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> centered around …\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> centered around …\nCreates a new <code>Ellipsoids3D</code> with <code>Self::half_sizes</code>.\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from the contents of an image file.\nFrom an 8-bit grayscale image.\nCreate a new <code>GeoLineStrings</code> from EPSG:4326 latitude and …\nCreate a new <code>GeoPoints</code> from EPSG:4326 latitude and …\nCreates a new <code>Capsules3D</code> with the given axis-aligned …\nCreates a new <code>TextDocument</code> containing Markdown.\nFrom a 3x3 matrix, clearing all other fields.\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nConstruct an image from a byte buffer given its resolution …\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nAssumes RGB, 8-bit per channel, interleaved as <code>RGBRGBRGB</code>.\nAssumes RGBA, 8-bit per channel, with separate alpha.\nFrom a rotation, clearing all other fields.\nFrom a rotation &amp; scale, clearing all other fields.\nFrom a scale, clearing all other fields.\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> created from …\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> created from …\nFrom a translation, clearing all other fields.\nFrom a translation applied after a 3x3 matrix, clearing …\nFrom a translation applied after a rotation, known as a …\nFrom a translation, applied after a rotation &amp; scale, …\nFrom a translation applied after a scale, clearing all …\nCreates new 2D arrows pointing in the given directions, …\nCreates new 3D arrows pointing in the given directions, …\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nCreate a new <code>AnnotationContext</code>.\nCreate a new <code>Asset3D</code>.\nCreate a new <code>AssetVideo</code>.\nCreate a new <code>BarChart</code>.\nCreate a new <code>DepthImage</code>.\nCreate a new <code>EncodedImage</code>.\nCreate a new <code>GraphEdges</code>.\nCreate a new <code>GraphNodes</code>.\nCreate a new <code>Image</code>.\nCreate a new <code>InstancePoses3D</code>.\nCreate a new <code>LineStrips2D</code>.\nCreate a new <code>LineStrips3D</code>.\nCreate a new <code>Mesh3D</code>.\nCreate a new <code>Pinhole</code>.\nCreate a new <code>Points2D</code>.\nCreate a new <code>Points3D</code>.\nCreate a new <code>Scalar</code>.\nCreate a new <code>SegmentationImage</code>.\nCreate a new <code>SeriesLine</code>.\nCreate a new <code>SeriesPoint</code>.\nCreate a new <code>Tensor</code>.\nCreate a new <code>TextDocument</code>.\nCreate a new <code>TextLog</code>.\nCreate a new <code>VideoFrameReference</code>.\nCreate a new <code>ViewCoordinates</code>.\nA list of node IDs.\nThe total number of triangles.\nThe total number of vertices.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nPrincipal point of the pinhole camera, i.e. the …\nProject camera-space coordinates into pixel coordinates, …\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nDetermines the presentation timestamps of all frames …\nSpecifies the relation this transform establishes between …\nThe resolution of the camera sensor in pixels.\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nCheck that this is a valid mesh, e.g. that the vertex …\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nTry to construct a <code>DepthImage</code> from anything that can be …\nTry to construct a <code>SegmentationImage</code> from anything that …\nTry to construct a <code>Tensor</code> from anything that can be …\nGiven pixel coordinates and a world-space depth, return a …\nUpdate only some specific fields of a <code>Arrows2D</code>.\nUpdate only some specific fields of a <code>Arrows3D</code>.\nUpdate only some specific fields of a <code>BarChart</code>.\nUpdate only some specific fields of a <code>Capsules3D</code>.\nUpdate only some specific fields of a <code>DepthImage</code>.\nUpdate only some specific fields of a <code>Ellipsoids3D</code>.\nUpdate only some specific fields of a <code>EncodedImage</code>.\nUpdate only some specific fields of a <code>GeoLineStrings</code>.\nUpdate only some specific fields of a <code>GeoPoints</code>.\nUpdate only some specific fields of a <code>GraphEdges</code>.\nUpdate only some specific fields of a <code>GraphNodes</code>.\nUpdate only some specific fields of a <code>InstancePoses3D</code>.\nUpdate only some specific fields of a <code>LineStrips2D</code>.\nUpdate only some specific fields of a <code>LineStrips3D</code>.\nUpdate only some specific fields of a <code>Points2D</code>.\nUpdate only some specific fields of a <code>Points3D</code>.\nUpdate only some specific fields of a <code>Scalar</code>.\nUpdate only some specific fields of a <code>SegmentationImage</code>.\nUpdate only some specific fields of a <code>SeriesLine</code>.\nUpdate only some specific fields of a <code>SeriesPoint</code>.\nUpdate only some specific fields of a <code>TextDocument</code>.\nUpdate only some specific fields of a <code>TextLog</code>.\nUpdate only some specific fields of a <code>Transform3D</code>.\nUpdate only some specific fields of a <code>VideoFrameReference</code>.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nUse this image as the albedo texture.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nUse this image as the albedo texture.\nVisual length of the 3 axes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nThe expected range of depth values.\nUpdate the <code>names</code> of the contained <code>TensorData</code> dimensions.\nCreates a graph with directed edges.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nSpecifies if the graph is directed or undirected.\nFor each ellipsoid, half of its size on its three axes.\nThe distance from the camera origin to the image plane …\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nPrincipal point of the pinhole camera, i.e. the …\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nConvenience method that takes any kind of (single) …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nCreates a graph with undirected edges.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\nThe blueprint-specific archetypes.\nThe blueprint-specific components.\nThe blueprint-specific datatypes.\nThe blueprint-specific views.\n<strong>Archetype</strong>: Configuration for the background of a view.\n<strong>Archetype</strong>: The description of a container.\n<strong>Archetype</strong>: The query for the dataframe view.\n<strong>Archetype</strong>: Tries to move the center of mass of the graph …\n<strong>Archetype</strong>: Resolves collisions between the bounding …\n<strong>Archetype</strong>: Aims to achieve a target distance between two …\n<strong>Archetype</strong>: A force between each pair of nodes that …\n<strong>Archetype</strong>: Similar to gravity, this force pulls nodes …\n<strong>Archetype</strong>: Configuration for the 3D line grid.\n<strong>Archetype</strong>: Configuration for the background map of the map …\n<strong>Archetype</strong>: Configuration of the map view zoom level.\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Controls the distance to the near clip plane in …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\n<strong>Archetype</strong>: Configuration for the legend of a plot.\n<strong>Archetype</strong>: Configuration for the scalar axis of a plot.\n<strong>Archetype</strong>: Configures how tensor scalars are mapped to …\n<strong>Archetype</strong>: Specifies a 2D slice of a tensor.\n<strong>Archetype</strong>: Configures how a selected tensor slice is shown …\n<strong>Archetype</strong>: The description of a single view.\n<strong>Archetype</strong>: The contents of a <code>View</code>.\n<strong>Archetype</strong>: The top-level description of the viewport.\n<strong>Archetype</strong>: Configures what range of each timeline is shown …\n<strong>Archetype</strong>: Controls the visual bounds of a 2D view.\nWhich tab is active.\nShould empty cells be filled with latest-at queries?\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nThe class of the view.\nClear all the fields of a <code>Background</code>.\nClear all the fields of a <code>ContainerBlueprint</code>.\nClear all the fields of a <code>DataframeQuery</code>.\nClear all the fields of a <code>ForceCenter</code>.\nClear all the fields of a <code>ForceCollisionRadius</code>.\nClear all the fields of a <code>ForceLink</code>.\nClear all the fields of a <code>ForceManyBody</code>.\nClear all the fields of a <code>ForcePosition</code>.\nClear all the fields of a <code>LineGrid3D</code>.\nClear all the fields of a <code>MapBackground</code>.\nClear all the fields of a <code>MapZoom</code>.\nClear all the fields of a <code>NearClipPlane</code>.\nClear all the fields of a <code>PanelBlueprint</code>.\nClear all the fields of a <code>PlotLegend</code>.\nClear all the fields of a <code>ScalarAxis</code>.\nClear all the fields of a <code>TensorScalarMapping</code>.\nClear all the fields of a <code>TensorSliceSelection</code>.\nClear all the fields of a <code>TensorViewFit</code>.\nClear all the fields of a <code>ViewBlueprint</code>.\nClear all the fields of a <code>ViewContents</code>.\nClear all the fields of a <code>ViewportBlueprint</code>.\nClear all the fields of a <code>VisibleTimeRanges</code>.\nClear all the fields of a <code>VisualBounds2D</code>.\nThe layout shares of each column in the container.\nColor used for the solid background type.\nColor used for the grid.\nHow scalar values map to colors.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nTo what corner the legend is aligned.\nReturns the <code>ComponentDescriptor</code> for <code>Self::active_tab</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::apply_latest_at</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::auto_layout</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::auto_views</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_identifier</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::col_shares</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colormap</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::container_kind</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::contents</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::corner</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::display_name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::display_name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::distance</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::filter_by_range</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::gamma</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::grid_columns</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::height</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::indices</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::iterations</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::iterations</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::kind</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::mag_filter</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::maximized</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::near_clip_plane</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::plane</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::position</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::provider</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::query</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::ranges</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::root_container</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::row_shares</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::scaling</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::select</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::slider</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::space_origin</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::spacing</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::state</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::stroke_width</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::timeline</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.")