searchState.loadedDescShard("re_viewer", 7, "A subtype of primitive type that represents numeric values.\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nOpaque binary data of variable length.\nAn arrow binary array with i32 offsets\nOpaque binary data of variable length.\n<code>BinaryViewType</code> for string arrays\nA boolean datatype representing the values <code>true</code> and <code>false</code>.\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nThe corresponding Arrow data type\nThe maximum precision for DataType::Decimal128 values\nThe maximum scale for DataType::Decimal128 values\nThe maximum precision for DataType::Decimal256 values\nThe maximum scale for DataType::Decimal256 values\nThe default scale for DataType::Decimal128 and …\nDefault values for <code>DataType</code>\nDatatypes supported by this implementation of Apache Arrow.\nA signed 32-bit date representing the elapsed time since …\n32-bit date type: the elapsed time since UNIX epoch in …\nA signed 64-bit date representing the elapsed time since …\n64-bit date type: the elapsed time since UNIX epoch in …\nIndicates the number of elapsed days and milliseconds, …\nExact 128-bit width decimal value with precision and scale\nThe decimal type for a Decimal128Array\nExact 256-bit width decimal value with precision and scale\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nDense union layout\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time in either seconds, milliseconds, …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\nDescribes a single column in a <code>Schema</code>.\nA reference counted <code>Field</code>\nA cheaply cloneable, owned slice of <code>FieldRef</code>\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some logical data type with fixed length.\nA 16-bit floating point number.\n16-bit floating point number type.\nA 32-bit floating point number.\n32-bit floating point number type.\nA 64-bit floating point number.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nA signed 16-bit integer.\nSigned 16-bit integer type.\nA signed 32-bit integer.\nSigned 32-bit integer type.\nA signed 64-bit integer.\nSigned 64-bit integer type.\nA signed 8-bit integer.\nA signed 8-bit integer type.\nA “calendar” interval which models types that don’t …\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\nYEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.\n32-bit “calendar” interval type: the number of whole …\nOpaque binary data of variable length and 64-bit offsets.\nAn arrow binary array with i64 offsets\nA list of some logical data type with variable length and …\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nA variable-length string in Unicode with UFT-8 encoding …\nAn arrow utf8 array with i64 offsets\nA list of some logical data type with variable length.\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nThe maximum value that can be represented by this integer …\nThe maximum value that can be represented\nThe maximum value that can be represented\n<code>MAX_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the maximum <code>i128</code> …\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value that can be represented by this integer …\nThe minimum value that can be represented\nThe minimum value that can be represented\nThe multiplicative inverse for this integer type, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the minimum <code>i128</code> …\nThe minimum value and identity for the <code>max</code> aggregation. …\nA Map is a logical nested type that is represented as\nTime in microseconds.\nTime in milliseconds.\nA triple of the number of elapsed months, days, and …\nTime in nanoseconds.\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nNull type\nThe multiplicative identity for this integer type, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA run-end encoding (REE) is a variation of run-length …\nA subtype of primitive type that is used as run-ends index …\nDescribes the meta-data of an ordered sequence of relative …\nA builder to facilitate building a <code>Schema</code> from iteratively …\nA reference-counted reference to a <code>Schema</code>.\nTime in seconds.\nSparse union layout\n<code>ByteViewType</code> for string arrays\nA nested datatype that contains a number of sub-fields.\nfn to create its <code>DataType</code>\nA signed 32-bit time representing the elapsed time since …\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\nA signed 64-bit time representing the elapsed time since …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nAn absolute length of time in seconds, milliseconds, …\nA timestamp with an optional timezone.\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nAllows conversion from supported Arrow types to a byte …\nAn unsigned 16-bit integer.\nUnsigned 16-bit integer type.\nAn unsigned 32-bit integer.\nUnsigned 32-bit integer type.\nAn unsigned 64-bit integer.\nUnsigned 64-bit integer type.\nAn unsigned 8-bit integer.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nA nested datatype that can represent slots of differing …\nA cheaply cloneable, owned collection of <code>FieldRef</code> and …\nSparse or Dense union layouts\nA variable-length string in Unicode with UTF-8 encoding.\nAn arrow utf8 array with i32 offsets\nA variable-length string in Unicode with UTF-8 encoding\nIndicates the number of elapsed whole months, stored as …\nThe additive identity for this integer type, i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity\nChecked addition operation\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow Date32Type\nAdds the given IntervalDayTimeType to an arrow Date64Type\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nWrapping addition operation\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow Date32Type\nAdds the given IntervalYearMonthType to an arrow Date64Type\nReturns a vector with references to all fields (including …\nWraps this <code>i256</code> into an <code>i128</code>\nConvert to usize according to the <code>as</code> operator\nComputes the absolute value of this i256 returning <code>None</code> if …\nComputes the absolute value\nComputes the absolute value\nPerforms checked addition\nPerforms checked addition\nPerforms checked addition\nPerforms checked division\nPerforms checked division\nPerforms checked division\nPerforms checked multiplication\nPerforms checked multiplication\nPerforms checked multiplication\nNegates this i256 returning <code>None</code> if <code>Self == Self::MIN</code>\nNegates the value\nNegates the value\nPerforms checked exponentiation\nPerforms checked exponentiation\nPerforms checked exponentiation\nPerforms checked remainder\nPerforms checked remainder\nPerforms checked remainder\nPerforms checked subtraction\nPerforms checked subtraction\nPerforms checked subtraction\nLook up a column by name and return a immutable reference …\nCompare operation\nCheck to see if <code>self</code> is a superset of <code>other</code>\nCheck to see if <code>self</code> is a superset of <code>other</code> field. …\nCheck to see if <code>self</code> is a superset of <code>other</code>\nCheck to see if <code>self</code> is a superset of <code>other</code> schema.\nReturns an immutable reference to the <code>Field</code>’s  <code>DataType</code>.\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nReturns the dictionary ID, if this is a dictionary type.\nReturns whether this <code>Field</code>’s dictionary is ordered, if …\nChecked division operation\nWrapping division operation\nReturns a new empty <code>Fields</code>\nCreate a new <code>UnionFields</code> with no fields\nCreates an empty <code>Schema</code>\nCompares the datatype with another, ignoring nested field …\nReturns an immutable reference to the <code>FieldRef</code> at index <code>idx</code>\nReturns an immutable reference of a specific <code>Field</code> …\nReturns a mutable reference to the <code>FieldRef</code> at index <code>idx</code>\nReturns an immutable reference of a specific <code>Field</code> …\nReturns an immutable reference of the vector of <code>Field</code> …\nA sequence of fields that describe the schema.\nReturns a vector of immutable references to all <code>Field</code> …\nReturns a copy of this <code>Fields</code> containing only those …\nSearches for a field by name, returning it along with its …\nConsume this <code>SchemaBuilder</code> yielding the final <code>Schema</code>\nReturns a vector with references to all fields (including …\nFormats the decimal value with the provided precision and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an integer value from its representation as a byte …\nCreate an optional i256 from the provided <code>f64</code>. Returning …\nConvert native type from i128.\nCreate an <code>i256</code> value from a 128-bit value.\nConvert native type from i32.\nConvert native type from i64.\nCreate an integer value from its representation as a byte …\nConverts a chrono::NaiveDate into an arrow Date32Type\nConverts a chrono::NaiveDate into an arrow Date64Type\nCreate an i256 from the provided low u128 and high i128\nCreate an integer value from its representation as string.\nConvert native integer type from usize\nReturns the byte width of this native type.\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nA signed 256-bit integer\nFind the index of the column with the given name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this type is valid as a dictionary key\nReturns <code>true</code> if this is empty\nEquality operation\nReturns true if this type is floating: (Float*).\nGreater than equals operation\nGreater than operation\nReturns true if this type is integer: (Int*, UInt*).\nLess than equals operation\nLess than operation\nNot equal operation\nReturns <code>true</code> if this <code>i256</code> is negative\nReturns true if this type is nested (List, FixedSizeList, …\nReturns true if this type is DataType::Null.\nIndicates whether this <code>Field</code> supports null values.\nReturns true if this type is numeric: (UInt*, Int*, Float*…\nReturns <code>true</code> if this <code>i256</code> is positive\nReturns true if the type is primitive: (numeric, temporal).\nReturns true if this type is valid for run-ends array in …\nReturns true if this type is signed integer: (Int*).\nReturns true if this type is temporal: (Date*, Time*, …\nReturns true if this type is unsigned integer: (UInt*).\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nDetermines whether the specified <code>i256</code> value can be properly\nDetermines whether the specified <code>i128</code> value can be properly\nReturns true if zero else false\nReturns an iterator over the fields and type ids in this …\nReturns the number of fields in this <code>UnionFields</code>\nCreates a ArrowTimestampType::Native from the provided …\nCreates a IntervalYearMonthType::Native\nCreates a IntervalDayTimeType::Native\nCreates a IntervalMonthDayNanoType::Native\nReturns the immutable reference to the <code>Field</code>’s optional …\nReturns an immutable reference to the Map of custom …\nReturns an immutable reference to the Map of custom …\nA map of key-value pairs containing additional meta data.\nReturns a mutable reference to the Map of custom metadata …\nNumber of milliseconds\nChecked remainder operation\nWrapping remainder operation\nNumber of months\nChecked multiplication operation\nWrapping multiplication operation\nReturns an immutable reference to the <code>Field</code>’s name.\nNumber of nanoseconds\nChecked negation operation\nWrapping negation operation\nCreates a new field with the given name, type, and …\nCreate a new <code>UnionFields</code> from a <code>Fields</code> and array of …\nCreates a new empty <code>SchemaBuilder</code>\nCreates a new <code>Schema</code> from a sequence of <code>Field</code> values.\nCreate a new <code>IntervalMonthDayNano</code>\nCreate a new <code>IntervalDayTime</code>\nCreates a new field that has additional dictionary …\nCreate a new <code>Field</code> with <code>DataType::Dictionary</code>\nCreate a <code>DataType::FixedSizeList</code> with elements of the …\nCreate a new <code>Field</code> with <code>DataType::FixedSizeList</code>\nCreate a <code>DataType::LargeList</code> with elements of the …\nCreate a new <code>Field</code> with <code>DataType::LargeList</code>\nCreate a <code>DataType::List</code> with elements of the specified type\nCreate a new <code>Field</code> with <code>DataType::List</code>\nCreates a new <code>Field</code> suitable for <code>DataType::List</code> and …\nCreate a new <code>Field</code> with <code>DataType::Map</code>\nCreate a new <code>Field</code> with <code>DataType::Struct</code>\nCreate a new <code>Field</code> with <code>DataType::Union</code>\nCreates a new <code>Schema</code> from a sequence of <code>Field</code> values and …\nChecked exponentiation operation\nWrapping exponentiation operation\nReturns the byte width of this type if it is a primitive …\nReturns a new schema with only the specified columns in …\nAppends a <code>FieldRef</code> to this <code>SchemaBuilder</code> without checking …\nRemoves and returns the <code>FieldRef</code> as index <code>idx</code>\nReverse the fileds\nSets the <code>Field</code>’s optional custom metadata.\nReturns a number <code>i256</code> representing sign of this <code>i256</code>.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nChecked subtraction operation\nWrapping subtraction operation\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nReturn the memory representation of this integer as a byte …\nConverts this instance into a byte slice\nConverts this <code>i256</code> into an <code>i128</code> returning <code>None</code> if this …\nConvert native type to i64.\nConvert native type to isize.\nReturn the memory representation of this integer as a byte …\nTurns a IntervalYearMonthType type into an i32 of months.\nConverts an arrow Date32Type into a chrono::NaiveDate\nConverts an arrow Date64Type into a chrono::NaiveDate\nReturns this <code>i256</code> as a low u128 and high i128\nTurns a IntervalDayTimeType into a tuple of (days, …\nTurns a IntervalMonthDayNanoType into a tuple of (months, …\nConvert native type to usize.\nReturns a copy of this <code>Fields</code> containing only those …\nSee CDataInterface docs\nMerge this field into self if it is compatible.\nAppends a <code>FieldRef</code> to this <code>SchemaBuilder</code> checking for …\nMerge schema into self if it is compatible. Struct fields …\nConvert from usize according to the <code>as</code> operator\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nCreates a new empty <code>SchemaBuilder</code> with space for <code>capacity</code> …\nSet <code>DataType</code> of the <code>Field</code> and returns self.\nSets the metadata of this <code>Field</code> to be <code>metadata</code> and returns …\nSets the metadata of this <code>Schema</code> to be <code>metadata</code> and …\nSet the name of the <code>Field</code> and returns self.\nSet <code>nullable</code> of the <code>Field</code> and returns self.\nComputes the absolute value of this i256\nComputes the absolute value\nComputes the absolute value\nPerforms wrapping addition\nPerforms wrapping addition\nPerforms wrapping addition\nPerforms wrapping division\nPerforms wrapping division\nPerforms wrapping division\nPerforms wrapping multiplication\nPerforms wrapping multiplication\nPerforms wrapping multiplication\nNegates this i256\nNegates the value\nNegates the value\nPerforms wrapping exponentiation\nPerforms wrapping exponentiation\nPerforms wrapping exponentiation\nPerforms wrapping remainder\nPerforms wrapping remainder\nPerforms wrapping remainder\nPerforms wrapping subtraction\nPerforms wrapping subtraction\nPerforms wrapping subtraction\nError when an arithmetic operation overflows.\nMany different operations in the <code>arrow</code> crate return this …\nError during import or export to/from the C Data Interface\nError during casting from one type to another.\nError during computation.\nError during CSV-related operations.\nError when a dictionary key is bigger than the key type\nError during division by zero.\nContains the error value\nWraps an external error.\nError indicating that an unexpected or bad argument was …\nError during IO operations.\nError during IPC operations in <code>arrow-ipc</code> or <code>arrow-flight</code>.\nError during JSON-related operations.\nMemory or buffer error.\nReturned when functionality is not yet available.\nContains the success value\nError during Parquet operations.\nError during parsing from a string.\nA specialized <code>Result</code> type for Arrow operations.\nError when the run end index in a REE array is bigger than …\nError during schema-related operations.\nReturns the argument unchanged.\nWraps an external error in an <code>ArrowError</code>.\nCalls <code>U::from(self)</code>.\nEach constituent buffer is first compressed with the …\nOpaque binary data\nLogically the same as Binary, but the internal …\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nA Buffer represents a single contiguous memory segment\nThe stream makes use of compressed bodies as described in …\nThe stream makes use of multiple full dictionaries with the\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nFor sending dictionary encoding information. Any Field can …\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nData structures for describing a table row batch (a …\nArrow File metadata\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThe root Message type This union enables us to easily send …\nThese are stored in the flatbuffer in the Type union below\nA data header describing the shared memory layout of a “…\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nA Struct_ in the flatbuffer metadata is the same as an …\nData structures for dense tensors Shape data for a single …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nNeeded to make flatbuffers happy.\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\n0.1.0 (October 2016).\n0.2.0 (February 2017). Non-backwards compatible with V1.\n0.3.0 -&gt; 0.7.1 (May - December 2017). Non-backwards …\n= 0.8.0 (December 2017). Non-backwards compatible with V3.\n= 1.0.0 (July 2020). Backwards compatible with V4 (V5 …\naxisOrder stores the sequence in which dimensions were …\nNumber of bits per value. The only accepted widths are 128 …\nLength of the data (this is aligned so there can be a gap …\nBuffers correspond to the pre-ordered flattened buffer tree\nNumber of bytes per value\nchildren apply only to nested data types like Struct, List …\nCompressor library. For LZ4_FRAME, each compressed buffer …\nWhich axis, row or column, is compressed\nOptional compression of the message body\nUtilities for converting between IPC types and native …\nUser-defined metadata\nUser-defined metadata\nThe location and size of the tensor’s data\nThe location and size of the tensor’s data\nPresent only if the field is dictionary encoded.\nendianness of the buffer it is Little Endian by default if …\nReturns true if the endianness of the source system …\nFeatures used in the stream/file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerated code\nThe known dictionary id in the application where this data …\nThe dictionary indices are constrained to be non-negative …\nThe location and size of the indices matrix’s data\nindicesBuffer stores the location and size of the array …\nindicesBuffers stores values of nodes. Each tensor …\nNon-negative byte offsets to advance one value cell along …\nThe type of values in indicesBuffer\nThe type of values in indicesBuffer\nThe type of values in indicesBuffers\nindptrBuffer stores the location and size of indptr array …\nindptrBuffers stores the sparsity structure. Each two …\nThe type of values in indptrBuffer\nCSF is a generalization of compressed sparse row (CSR) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis flag is true if and only if the indices matrix is …\nIf isDelta is true the values in the dictionary are to be …\nBy default, dictionaries are not ordered, or the order …\nSet to true if the keys within each value are sorted\nThe number of value slots in the Arrow array at this level …\nnumber of records / rows. The arrays in the batch should …\nThe absolute length (in bytes) of the memory buffer. The …\nNumber of list items per value\nLength of the metadata\nIndicates the way the record batch body was compressed\nName is not required, in i.e. a List\nName of the dimension, optional\nNodes correspond to the pre-ordered flattened logical …\nThe number of non-zero values in a sparse tensor.\nThe number of observed nulls. Fields with null_count == 0 …\nWhether or not this field can contain nulls. Should be …\nIndex to the start of the RecordBlock (note this is past …\nThe relative offset into the shared memory page where the …\nTotal number of decimal digits\nArrow IPC File and Stream Readers\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nNumber of digits after the decimal point “.”\nThe dimensions of the tensor, optionally named.\nThe dimensions of the tensor, optionally named\nLength of dimension\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nSparse tensor index\nNon-negative byte offsets to advance one value cell along …\nThe timezone is an optional string indicating the name of …\nThis is the type of the decoded value if the field is …\nThe type of data contained in a value cell. Currently only …\nThe type of data contained in a value cell. Currently only …\nSome types such as Utf8View are represented using a …\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nReturns the variant’s name or “” if unknown.\nArrow IPC File and Stream Writers\nLow level Arrow Schema to IPC bytes converter\nAn owned container for a validated <code>Message</code>\nReturn the <code>Message</code>\nDeserialize an ipc crate::Schema` from flat buffers to an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPush a key-value metadata into a FlatBufferBuilder and …\nCreate a new schema encoder\nSerialize a schema in IPC format\nSerialize a schema in IPC format, returning a completed …\nAdds a Schema to a flatbuffer and returns the offset\nSerialize a schema to an in progress <code>FlatBufferBuilder</code>, …\nTry to create a <code>MessageBuffer</code> from the provided <code>Buffer</code>\nTry deserialize flat buffer format bytes into a schema\nTry deserialize the IPC format bytes into a schema\nSpecify a dictionary tracker to use\nArrow File metadata\nVerifies that a buffer of bytes contains a <code>Footer</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOptional compression for the memory buffers constituting …\nProvided for forward compatibility in case we need to …\nFor sending dictionary encoding information. Any Field can …\nData structures for describing a table row batch (a …\nThe root Message type This union enables us to easily send …\nA data header describing the shared memory layout of a “…\nVerifies that a buffer of bytes contains a <code>Message</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nOpaque binary data\nLogically the same as Binary, but the internal …\nA Buffer represents a single contiguous memory segment\nDate is either a 32-bit or 64-bit signed integer type …\nExact decimal value represented as an integer value in two…\nDictionary encoding metadata Maintained for forwards …\nEndianness of the platform producing the data\nRepresents Arrow Features that might not have full support …\nA field represents a named column in a record / row batch …\nuser defined key value pairs to add custom metadata to …\nSame as Binary, but with 64-bit offsets, allowing to …\nSame as List, but with 64-bit offsets, allowing to …\nSame as ListView, but with 64-bit offsets and sizes, …\nSame as Utf8, but with 64-bit offsets, allowing to …\nRepresents the same logical types that List can, but …\nA Map is a logical nested type that is represented as\nThese are stored in the flatbuffer in the Type union below\nContains two child arrays, run_ends and values. The …\nA Schema describes the columns in a row batch\nA Struct_ in the flatbuffer metadata is the same as an …\nTime is either a 32-bit or 64-bit signed integer type …\nTimestamp is a 64-bit signed integer representing an …\nTop-level Type value, enabling extensible type-specific …\nA union is a complex type with children in Field By …\nUnicode with UTF-8 encoding\nLogically the same as Utf8, but the internal …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nCompressed Sparse format, that is matrix-specific.\nEXPERIMENTAL: Data structures for sparse tensors …\nCompressed Sparse Fiber (CSF) sparse tensor index.\nVerifies that a buffer of bytes contains a <code>SparseTensor</code> …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nData structures for dense tensors Shape data for a single …\nVerifies that a buffer of bytes contains a <code>Tensor</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nA low-level, push-based interface for reading an IPC file\nArrow File reader\nBuild an Arrow <code>FileReader</code> with custom options.\nA low-level interface for reading <code>RecordBatch</code> data from a …\nArrow Stream reader\nBuild <code>FileReader</code> with given reader.\nReturn user defined customized metadata\nTry to read the next <code>RecordBatch</code> from the provided <code>Buffer</code>\nSignal the end of stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying reader.\nGets a reference to the underlying reader.\nGets a reference to the underlying reader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the stream is finished\nCreate a new <code>StreamDecoder</code>\nCreate a new <code>FileDecoder</code> with the given schema and version\nOptions for creating a new <code>FileReader</code>.\nReturn the number of batches in the file\nRead the dictionary from the buffer and provided metadata, …\nRead the dictionary with the given block and data buffer\nRead the footer length from the last 10 bytes of an Arrow …\nCreates a record batch from binary data using the …\nRead the RecordBatch with the given block and data buffer\nReturn the schema of the file\nReturn the schema of the stream\nRead a specific record batch\nTry to create a new file reader.\nTry to create a new stream reader.\nTry to create a new file reader with the reader wrapped in …\nTry to create a new stream reader with the reader wrapped …\nDeprecated, use <code>StreamReader::try_new</code> instead.\nFlatbuffers option for parsing the footer. Controls the …\nFlatbuffers option for parsing the footer. Controls the …\nSpecify a projection\nOptional projection for which columns to load (zero-based …\nSpecifies whether or not array data in input buffers is …\nSpecifies whether or not array data in input buffers is …\nKeeps track of dictionaries that have been written, to …\nStores the encoded data, which is an crate::Message, and …\nWriter for an IPC file\nHandles low level details of encoding <code>Array</code> and <code>Schema</code> …\nIPC write options used to control the behaviour of the …\nWriter for an IPC stream\nArrow buffers to be written, should be an empty vec for …\nReturn the sequence of dictionary IDs in the order they …\nEncodes a batch to a number of EncodedData items …\nWrite footer and closing tag, then mark the writer as done\nWrite continuation bytes, and mark the stream as done\nFlush the underlying writer.\nFlush the underlying writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying writer.\nGets a reference to the underlying writer.\nGets a reference to the underlying writer.\nKeep track of the dictionary with the given ID and values. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the the underlying writer.\nUnwraps the the underlying writer.\nAn encoded crate::Message\nCreate a new <code>DictionaryTracker</code>.\nCreate a new <code>DictionaryTracker</code>.\nReturn whether the writer is configured to preserve the …\nReturns the arrow <code>SchemaRef</code> for this arrow file.\nConverts a schema to an IPC message and returns it encoded …\nConverts a schema to an IPC message along with …\nSet the dictionary ID for <code>field</code>.\nTry to create a new writer, with the schema written as …\nTry to create a new writer, with the schema written as …\nTry to create IpcWriteOptions, checking for incompatible …\nTry to create a new file writer with the writer wrapped in …\nTry to create a new stream writer with the writer wrapped …\nTry to create a new writer with IpcWriteOptions\nTry to create a new writer with <code>IpcWriteOptions</code>.\nConfigures compression when writing IPC files.\nSet whether the IPC writer should preserve the dictionary …\nWrite a record batch to the file\nWrite a record batch to the stream\nWrite a message’s IPC data and buffers, returning …\nAdds a key-value pair to the FileWriter’s custom metadata\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a Python object to an arrow-rs type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the implemented type into a Python object while …\nCreates a new <code>PyErr</code> of this type.\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nGet a reference to a column’s array by index.\nGet a reference to a column’s array by name.\nGet a reference to all columns in the record batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the total number of bytes of memory occupied …\nGet a reference to a column’s array by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch field names of structs and lists. If set to <code>true</code>, …\nCreate a new RecordBatchIterator.\nCreates a new <code>RecordBatchOptions</code>\nCreates a new empty <code>RecordBatch</code>.\nReads the next <code>RecordBatch</code>.\nReturns the number of columns in the record batch.\nReturns the number of rows in each column.\nProjects the schema onto the specified columns\nRemove column by index and return it.\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nReturns the <code>Schema</code> of the record batch.\nReturns a reference to the <code>Schema</code> of the record batch.\nReturn a new RecordBatch where each column is sliced …\nCreate a <code>RecordBatch</code> from an iterable list of pairs of the …\nCreate a <code>RecordBatch</code> from an iterable list of tuples of the\nCreates a <code>RecordBatch</code> from a schema and columns.\nCreates a <code>RecordBatch</code> from a schema and columns, with …\nSets the match_field_names of RecordBatchOptions and …\nSets the row_count of RecordBatchOptions and returns self\nOverride the schema of this <code>RecordBatch</code>\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nConvert <code>ArrayRef</code> columns appending to an existing <code>Rows</code>\nSets the length of this <code>Rows</code> to 0\nConvert <code>ArrayRef</code> columns into <code>Rows</code>\nConvert <code>Rows</code> columns into <code>ArrayRef</code>\nThe row’s bytes, with the lifetime of the underlying …\nReturns an empty <code>Rows</code> with capacity for <code>row_capacity</code> rows …\nEncode dictionary values not preserving the dictionary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Rows instance from the given binary data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the <code>Row</code> in this <code>Rows</code>\nCreate a new <code>RowConverter</code> with the provided schema\nCreate a new column with the given data type\nCreate a new column with the given data type and …\nReturns the number of <code>Row</code> in this <code>Rows</code>\nCreate owned version of the row to detach it from the …\nCreates a <code>Row</code> from the provided <code>bytes</code>.\nReturns a <code>RowParser</code> that can be used to parse <code>Row</code> from …\nAppend a <code>Row</code> to this <code>Rows</code>\nReturns the row at index <code>row</code>\nGet borrowed <code>Row</code> from owned version.\nReturns the row at <code>index</code> without bounds checking\nReturns the size of this instance in bytes\nReturn size of this instance in bytes.\nReturns the size of this instance in bytes\nCheck if the given fields are supported by the row format.\nCreate a BinaryArray from the Rows data without …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nReturns a reference to the underlying <code>Buffer</code>\nThe data type of the <code>Tensor</code>\nThe name of dimension i\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates if the memory layout column major\nIndicates if the data is laid out contiguously in memory\nIndicates if the memory layout row major\nThe names of the dimensions\nThe number of dimensions\nCreates a new Tensor using column major memory layout\nCreates a new Tensor using row major memory layout\nThe sizes of the dimensions\nThe total number of elements in the <code>Tensor</code>\nThe number of bytes between elements in each dimension\nCreates a new <code>Tensor</code>\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nReturns the number of chunks\nReturns reference to the chunks\nCounts the number of ones\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the chunks\nReturns an iterator over chunks of 64 bits represented as …\nReturns an iterator over chunks of 64 bits, with the …\nReturns the number of leading padding bits\nCreate a from a byte array, and and an offset and length …\nCreate a new <code>BitChunks</code> from a byte array, and an offset …\nReturns the prefix, if any\nReturns the bitmask of remaining bits\nReturns the number of remaining bits, guaranteed to be …\nReturns the suffix, if any\nReturns the number of trailing padding bits\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BitIterator</code> from the provided <code>buffer</code>, and …\nCreate a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …\nCreate a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts numeric type to a <code>String</code>\nCreates a new set of format options\nReturns an <code>ArrayFormatter</code> that can be used to format <code>array</code>\nFallibly converts this to a string\nReturns a <code>ValueFormatter</code> that implements <code>Display</code> for the …\nOverrides the format used for <code>DataType::Date32</code> columns\nOverrides the format used for <code>DataType::Date64</code> columns\nIf set to <code>true</code> any formatting errors will be written to …\nOverrides the format used for duration columns\nOverrides the string used to represent a null\nOverrides the format used for <code>DataType::Time32</code> and …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nWrites this value to the provided <code>Write</code>\nA writer that allows writing to a <code>String</code> like an …\nExecutes the given command directly.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StringWriter</code>\nQueues the given command for further execution.\nPerforms a set of actions within a synchronous update.\nWe give an actual name to <code>Tuid</code>, and inject that name into …\nAll ones.\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.\nCreate a new unique <code>Tuid</code> based on the current time.\nReturns the next logical <code>Tuid</code>.\nA shortened string representation of the <code>Tuid</code>.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes a placeholder for a given arrow datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nThe name of the field (i.e. same as …\nIterate over this archetype’s required fields.\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by versions 1 and 6 UUIDs to …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nThe type of sequence returned by this counter.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a reference to the underlying <code>Uuid</code>.\nGet a <code>Braced</code> formatter.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nAdapters for alternative string formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a <code>Builder</code> for a version 8 UUID using the supplied …\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values.\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values in little-endian …\nConstruct a <code>Timestamp</code> from the number of 100 nanosecond …\nCreates a <code>Builder</code> for a version 1 UUID using the supplied …\nCreates a <code>Builder</code> for a version 3 UUID using the supplied …\nCreates a <code>Builder</code> for a version 4 UUID using the supplied …\nCreates a <code>Builder</code> for a version 5 UUID using the supplied …\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a <code>Builder</code> for a version 6 UUID using the supplied …\nCreates a <code>Builder</code> from a 128bit value.\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nCreates a <code>Builder</code> for a version 7 UUID using the supplied …\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConvert the builder into a <code>Uuid</code>.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nThe ‘max UUID’ (all ones).\nCreates a random UUID.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nThe ‘nil UUID’ (all zeros).\nGet a timestamp representing the current system time and …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nAdapters for alternative <code>serde</code> formats.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nGet a <code>Simple</code> formatter.\nGenerating UUIDs from timestamps.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nGet the value of the timestamp as the number of 100 …\nReturns a 128bit little-endian value containing the value.\nGet the value of the timestamp as a Unix timestamp, as …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a braced <code>Uuid</code> string.\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case hyphenated string …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>Braced</code> from a <code>Uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a thread-local container with a context.\nThe tensor did not have the right shape for an image (e.g. …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nThe <code>ChannelDatatype</code> for this type.\nHappens if you try to cast <code>NV12</code> or <code>YUY2</code> to a depth image …\nA normal grayscale or color image (<code>crate::archetypes::Image</code>…\nA depth map (<code>crate::archetypes::DepthImage</code>).\ne.g. failed to decode a JPEG file.\nTypes that implement this can be used as image channel …\nError returned when trying to interpret a tensor as an …\nErrors when converting images from the <code>image</code> crate to an …\nFailure to convert the loaded image to a …\nThe kind of image data, either color, segmentation, or …\nErrors when loading image files.\ne.g. failed to find a file on disk.\nA segmentation image (<code>crate::archetypes::SegmentationImage</code>…\nCould not convert source to <code>TensorData</code>.\nFailed to read the MIME type from inspecting the image …\nUnknown color type from the image crate.\nThe encountered MIME type is not supported for decoding …\nYuv matrix coefficients that determine how a YUV image is …\nConverts it to what is useful for the image API.\nReturns the indices of an appropriate set of dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns sRGB from YUV color.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nGenerates reflection about all known components.\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n16-bit floating point number.\n16-bit floating point number.\n32-bit floating point number.\n32-bit floating point number.\n64-bit floating point number.\n64-bit floating point number.\nSigned 16 bit integer.\nSigned 16 bit integer.\nSigned 32 bit integer.\nSigned 32 bit integer.\nSigned 64 bit integer.\nSigned 64 bit integer.\nSigned 8 bit integer.\nSigned 8 bit integer.\nErrors when trying to cast <code>TensorData</code> to an <code>ndarray</code>\nThe data types supported by a <code>crate::datatypes::TensorData</code>.\nThe data that can be stored in a …\nErrors when loading <code>TensorData</code> from the <code>image</code> crate.\nUnsigned 16 bit integer.\nUnsigned 16 bit integer.\nUnsigned 32 bit integer.\nUnsigned 32 bit integer.\nUnsigned 64 bit integer.\nUnsigned 64 bit integer.\nUnsigned 8 bit integer.\nUnsigned 8 bit integer.\nGet the value as a 64-bit floating point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\nNumber of bytes used by the type\nConvert the value to a <code>u16</code>, but only if it can be …\nLarge struct used for benchmarking.\nBuilds len instances of <code>LargeStruct</code>\nThe total number of components in the archetype: 22 …\nThe total number of components in the archetype: 19 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1019</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1020</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1021</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1022</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1118</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1122</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2118</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer1</code>.\nCreate a new <code>AffixFuzzer2</code>.\nCreate a new <code>AffixFuzzer3</code>.\nCreate a new <code>AffixFuzzer4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaby’s got it.\nFeeling blue.\n<strong>Datatype</strong>: A test of the enum type.\nIt’s the only way to go.\nIt’s what’s remaining.\nOne.\nCorrect.\nThe answer to life, the universe, and everything.\nThree.\nTwo.\nGreat film.\n<strong>Datatype</strong>: A test of an enumate with specified values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe first value.\nThe second value.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\n-X\n-Y\n-Z\n+X\n+Y\n+Z\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nThe six cardinal directions for 3D view-space and …\nConvert to a unit-length 3D vector.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an upper case letter to one of the six cardinal …\nConvert a dimension index to an axis.\nCreate a <code>Handedness</code> from a boolean.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLong description of the direction, e.g. “Up”, “Down…\nRepresent this direction as the first letter of the …\nPositive or negative.\nIf true, we hide the native window decoration (the top bar …\nA table mapping all combination of <code>Hue</code> and <code>Scale</code> to a …\nA token representing a color in the global color table.\nExtension trait for <code>egui::Context</code>.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nA hue for a <code>ColorToken</code>.\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nDisplay a short summary. Used in lists.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nA color scale for a <code>ColorToken</code>.\nA collapsible section header, with support for optional …\nDisplay everything as wide as available, without height …\nDisplay as much information as possible in a compact way. …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nSpecifies the context in which the UI is used and the …\nLabel displaying the placeholder text for a yet unnamed …\nApply the Rerun design tokens to the given egui context …\nFor the streams view (time panel)\nDraw a bullet (for text lists).\nSet the button to be shown in the header.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nLayout area to allocate for the collapsing triangle.\nGet the <code>egui::Color32</code> corresponding to the provided …\nColor table for all colors used in the UI.\nShow data while respecting the given UI layout.\nSet the default open state of the section header.\nReturn a reference to the global design tokens structure.\nHelpers for drag and drop support for reordering …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nStroke used to indicate that a UI element is a container …\nShows an error label with the entire error text and copies …\nText colored to indicate an error.\nShows a small error label with the given text on hover and …\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturn the keyboard shortcut for this command, nicely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nHeight of the top bar\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nHovered UI and spatial primitives should have this outline.\nHuman readable unique id\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we have a lot of vertical space?\nShould the UI fit on one line?\nAll keyboard shortcuts, with the primary first.\nShow a label while respecting the given UI layout.\nSecond-generation list item.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nConvenience function to create a <code>list_item::list_item_scope</code>…\nLoad design tokens from <code>data/design_tokens.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nShow some markdown\nConditionally collapsing header.\nShow this command as a menu-button.\nShow some close/maximize/minimize buttons for the native …\nCreate a new <code>Self</code>.\nBuild a new color table by calling the provided closure …\nPaint a collapsing triangle in the Rerun’s style.\nPaints a time cursor for indicating the time on a time …\nPaint a watermark\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nThe color for the background of …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nSelected UI and spatial primitives should have this …\nDisplay the header.\nShow the command palette, if it is visible.\nAdds a non-interactive, optionally tinted small icon.\nShows a success label with a large border.\nText colored to indicate success.\nBuild an egui table and configure it for the given UI …\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nBinary toggle switch.\nHeight of the top-most bar.\nMargin on all sides of views.\nShows a warning label with a large border.\nText colored to indicate a warning.\nA small, self-container pan-and-zoom area for <code>egui</code>.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\nFull-text, case-insensitive matcher.\nState and UI for the filter widget.\nReturn a filter matcher for the current query.\nGiven a list of highlight sections defined by start/end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDoes the given text match the filter?\nIs the filter set to match everything?\nReturns a formatted version of the text with the matching …\nIs the filter set to match nothing?\nReturn the filter if any.\nReturn the current session ID of the filter widget, if …\nDisplay the filter widget.\n<code>&gt;</code>\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nHuman readable unique id\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that mostly delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nAlways show the buttons.\nBackground area\nResponse from the body, if it was displayed.\nAdd a right-aligned <code>super::ItemButton</code>.\nAdd a right-aligned <code>super::ItemButton</code>.\nThe desired width of the content.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nMake the item draggable.\nHighlight the item as the current drop target.\nSets whether the button is enabled.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the hover text of the button.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nResponse from the item itself.\nStyle the label for an unnamed items.\nLayout information to use for rendering.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired for the content.\nSet the minimum desired width for the entire content.\nCreate a content with a custom UI closure.\nCreate a new <code>ListItem</code> with the given label.\nCalled when the button is clicked.\n0.0 if fully closed, 1.0 if fully open, and something …\nArea available for the content to draw in.\nRegister the desired width of the left column.\nIndicate whether right-aligned space should be reserved …\nList item response.\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nDisplay value only for leaf or collapsed items.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nUI for everything that is after the indent and the …\nDraw the button.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nSet the desired width based on the provided content width. …\nSet the desired width for the entire content.\nSet the item height.\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nProvide a custom closure to draw an icon on the left of …\nHelper object to handle a <code>ModalWrapper</code> window.\nShow a modal window with Rerun style using <code>egui::Modal</code>.\nResponse returned by <code>ModalWrapper::ui</code>.\nSet the default height of the modal window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nWhat the content closure returned if it was actually run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model the next time the <code>ModalHandler::ui</code> method …\nWhether the modal should remain open.\nEnclose the contents in a scroll area.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nAn enum representing the available verbosity levels of the …\nThe “trace” level.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nReturns the most verbose logging level.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nFormats an instance number enclosed in square brackets: …\nEasily build syntax-highlighted text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a transformation that fits a given scene rectangle …\nProvides a zoom-pan area for a given view.\nWrapper that contains the results of a latest-at query …\nThe iterator type backing <code>HybridResults::iter_as</code>.\nExtension traits to abstract query result handling for all …\nGap between lines and their outline.\nGap between points and their outline.\nClamp the last value in <code>values</code> in order to reach a length …\nIterate as indexed deserialized batches.\nUtility for implementing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>UnitChunkShared</code> for the specified …\nUtility for retrieving a single instance of a component.\nUtility for retrieving a single instance of a component.\nUtility for retrieving the first instance of a component.\nUtility for retrieving the first instance of a component.\nReturns component data for the given component or an empty …\nReturns component data for the given component, ignores …\nUtility for retrieving a single instance of a component, …\nUtility for retrieving the first instance of a component, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a zero-copy iterator over all the results for the …\nQueries for the given <code>component_names</code> using latest-at …\nProduce an <code>re_renderer::OutlineConfig</code> based on the …\nResolves all annotations and keypoints for the given …\nResolves all annotations for the given entity view.\nProcess <code>Color</code> components using annotations and default …\nQueries for the given <code>component_names</code> using range …\nIterate as indexed, sliced, deserialized component batches.\nIterate as indexed, sliced, deserialized component batches …\nSpawns a view for each single entity which is visualizable …\nDraw view property ui for a single component of a view …\nDraw view property ui for a single component of a view …\nDisplay the UI for editing all components of a blueprint …\nModifier to press for scroll to change aspect ratio.\nWhich mouse button to drag for panning a 2D view.\nWhich mouse button to drag for panning a 2D view.\nModifier to press for scroll to pan horizontally.\nClicking this button moves the timeline to where the …\nWhich mouse button rolls the camera.\nWhich mouse button rolls the camera if the roll modifier …\nSee <code>ROLL_MOUSE_ALT</code>.\nWhich mouse button to drag for rotating a 3D view.\nRectangles drawn with this mouse button zoom in 2D views.\nWhich modifier speeds up the 3D camera movement.\nKey to restore the camera.\nModifier to press for scroll to zoom.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll features disabled.\n<code>Self::DEFAULT</code>, but with changelog disabled.\n<code>Self::DEFAULT</code>, but with compaction entirely disabled.\nDense arrow-based storage of N rows of multi-component …\nReports which <code>Chunk</code>s were merged into a new <code>Chunk</code> during a …\nA unique ID for a <code>crate::Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nA complete chunk store: covers all timelines, all …\nStats about a collection of chunks.\nDescribes an atomic change in the Rerun <code>ChunkStore</code>: a …\nIs it an addition or a deletion?\nThe atomic unit of change in the Rerun <code>ChunkStore</code>.\nIncremented on each edit.\nA ref-counted, inner-mutable handle to a <code>ChunkStore</code>.\nA <code>ChunkStoreSubscriber</code> subscribes to atomic changes from …\nDescribes a column selection to return as part of a query.\nDescribes a data/component column, such as <code>Position3D</code>.\nSelect a component based on its <code>EntityPath</code> and …\nDefault configuration, applicable to most use cases, …\nTry to drop <em>at least</em> the given fraction.\nContains no time at all.\nEnvironment variable to configure <code>Self::chunk_max_bytes</code>.\nEnvironment variable to configure <code>Self::chunk_max_rows</code>.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::enable_changelog</code>.\nContains all time.\nContains the error value\nGC Everything that isn’t protected.\nFill null values using global-scope latest-at semantics.\nA query at a given time, for a given timeline.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nNo sparse filling. Nulls stay nulls.\nContains the success value\nError when parsing configuration from environment.\nA <code>ChunkStoreSubscriber</code> that is instantiated for each …\nDescribes a complete query for Rerun’s dataframe API.\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nSpecifies how null values should be filled in the returned …\nNormal wall time.\nDescribes a time column, such as <code>log_time</code>.\nSelect a time column.\nA 64-bit number describing either nanoseconds, sequence …\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nThe view contents specify which subset of the database …\nThe amount of time or sequences covered by this range.\nUnconditionally inserts an <code>ArrowListArray</code> as a component …\nUnconditionally inserts a <code>TimeColumn</code>.\nRetrieve all <code>ComponentName</code>s in the store.\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all <code>ComponentName</code>s in the store.\nRetrieve all <code>EntityPath</code>s in the store.\nRetrieve all <code>EntityPath</code>s in the store.\nRetrieve all <code>Timeline</code>s in the store.\nRetrieve all <code>Timeline</code>s in the store.\nReturns a copy of <code>self</code>, overriding existing fields with …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nReturns <code>true</code> is two <code>Chunk</code>s are similar, although not …\nWorkaround for downcasting support, simply return <code>self</code>:\nWorkaround for downcasting support, simply return <code>self</code>:\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>ChunkBuilder</code>.\nReturns the cell corresponding to the specified <code>RowId</code> for …\nGet a chunk based on its ID.\nThe chunk that was added or removed.\nWhat is the threshold, in bytes, after which a <code>Chunk</code> …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nClones the chunk and assign new IDs to the resulting chunk …\nReports which <code>Chunk</code>s were merged into a new <code>Chunk</code> during a …\nReturns the deserialized data for the specified component.\nReturns the deserialized data for the specified component.\nReturns the raw data for the specified component.\nReturns the raw data for the specified component.\nReturns the component data of the specified instance.\nReturns the deserialized data for the specified component …\nReturns the raw data for the specified component at the …\nReturns the raw data for the specified component at the …\nReturns the deserialized data for the specified component, …\nReturns the deserialized data for the specified component, …\nReturns the raw data for the specified component, assuming …\nReturns the raw data for the specified component, assuming …\nSemantic name associated with this data.\nSemantic name associated with this data.\nReturns an iterator over the <code>RowId</code>s of a <code>Chunk</code>, for a …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nRemoves all component columns from the <code>Chunk</code>.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nReturns true if two chunks are concatenable.\nConcatenates two <code>Chunk</code>s into a new one.\nSee <code>ChunkStoreConfig</code> for more information about …\nDoes this range fully contain the other?\nReturns the appropriate arrow datatype to represent this …\nReturns the appropriate arrow datatype to represent this …\nThe Arrow datatype of the column.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nRemoves duplicate rows from sections of consecutive …\n<code>-1</code> for deletions, <code>+1</code> for additions.\nDensifies the <code>Chunk</code> vertically based on the <code>component_name</code> …\nWhat actually changed?\nUnconditionally drops all the data for a given <code>entity_path</code>.\nDrop all events that are in the given range on the given …\nEmpties the <code>Chunk</code> vertically.\nIf <code>true</code> (the default), the store will emit events when its …\nCheck whether an entity has a static component or a …\nCheck whether an entity has a static component or a …\nCheck whether an entity has any static data or any …\nCheck whether an entity has any data on a specific …\nCheck whether an entity has a specific static component.\nCheck whether an entity has any static data.\nCheck whether an entity has a temporal component on any …\nCheck whether an entity has a temporal component on a …\nCheck whether an entity has any temporal data.\nCheck whether an entity has any temporal data.\nFind the earliest time at which something was logged for a …\nThe path of the entity.\nThe path of the entity.\nStats about all the chunks that has data for an entity on …\nStats about all chunks with static data for an entity.\nReturns the min and max times at which data was logged for …\nMonotonically increasing ID of the event.\nApplies a filter kernel to the <code>Chunk</code> as a whole.\nThe index used to filter out <em>rows</em> from the view contents.\nThe range of index values used to filter out <em>rows</em> from the …\nThe specific index values used to filter out <em>rows</em> from the …\nThe component column used to filter out <em>rows</em> from the view …\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Chunk</code>.\nCreates a new <code>ChunkStoreConfig</code> using the default values, …\nInstantiate a new <code>ChunkStore</code> with the given …\nFor time timelines.\nFor time timelines.\nCreates a new <code>Chunk</code>.\nInstantiate a new <code>ChunkStore</code> with the given …\nFor time timelines.\nFor sequence timelines.\nTriggers a garbage collection according to the desired …\nReturn the current <code>ChunkStoreGeneration</code>. This can be used …\nReturns any list-array that matches the given <code>ComponentName</code>…\nInstantiate a new <code>ChunkStore</code> with the given …\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nSee <code>RangeQueryOptions::include_extended_bounds</code> for more …\nIf true, the results will include one extra tick on each …\nWhether the <code>view_contents</code> should ignore columns …\nWhether the <code>view_contents</code> should ignore semantically empty …\nWhether the <code>view_contents</code> should ignore columns …\nReturns the <code>n</code>-next logical <code>ChunkId</code>.\nReturns the <code>n</code>-next logical <code>RowId</code>.\nReturns the index (<code>(TimeInt, RowId)</code> pair) of the single …\nInserts a <code>Chunk</code> in the store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClones the chunk into a new chunk without any time data.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nIf true, we cannot remove this chunk.\nWhether this column represents an indicator component.\nWhether this column represents an indicator component.\nWhether this column contains either no data or only …\nWhether this column contains either no data or only …\nIs the chunk currently ascendingly sorted by <code>crate::RowId</code>?\nWhether this column represents static data.\nWhether this column represents static data.\nIs the chunk ascendingly sorted by time, for all of its …\nIs the chunk ascendingly sorted by time, for a specific …\nWhether this column represents a <code>Clear</code>-related components.\nWhether this column represents a <code>Clear</code>-related component.\nIterate over all chunks in the store, in ascending <code>ChunkId</code> …\nReturns an iterator over the deserialized batches of a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the offsets (<code>(offset, len)</code>) of a …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>, for a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>.\nSee <code>RangeQueryOptions::keep_extra_components</code> for more …\nShould the results contain all extra component information …\nSee <code>RangeQueryOptions::keep_extra_timelines</code> for more …\nShould the results contain all extra timeline information …\nAddition or deletion?\nRuns a <code>LatestAtQuery</code> filter on a <code>Chunk</code>.\nReturns the most-relevant chunk(s) for the given …\nReturns the most-relevant <em>temporal</em> chunk(s) for the given …\nThe log tick timeline to which all API functions will …\nThe log time timeline to which all API functions will …\nLookup the <code>ColumnMetadata</code> for a specific <code>EntityPath</code> and …\nLookup the <em>latest</em> arrow <code>ArrowDataType</code> used by a specific …\nReturns an array with the appropriate datatype.\nArbitrary name for the subscriber.\nArbitrary name for the subscriber.\nWhen the <code>ChunkId</code> was created, in nanoseconds since unix …\nWhen the <code>RowId</code> was created, in nanoseconds since unix …\nSelect a component of a given type, based on its  …\nCreates a new <code>Chunk</code>.\nInstantiate a new empty <code>ChunkStore</code> with the given …\nCreate a new unique <code>ChunkId</code> based on the current time.\nCreate a new unique <code>RowId</code> based on the current time.\nThe returned query is guaranteed to never include …\nThe returned query is guaranteed to never include …\nCreates a new temporal <code>ResolvedTimeRange</code>.\nThe new chunk that was created as the result of the …\nSelect a component based on its <code>EntityPath</code> and …\nInstantiate a new empty <code>ChunkStore</code> with the given …\nUsed when returning a null column, i.e. when a lookup …\nFor things like camera frames or iteration count.\nSimple helper for <code>Self::new</code> for static data.\nCreates a new temporal <code>TimeInt</code>.\nFor absolute or relative time.\nReturns the next logical <code>ChunkId</code>.\nReturns the next logical <code>RowId</code>.\nGet the number of chunks.\nThe number of chunks this is the stats for.\nHow many columns in total? Includes control, time, and …\nHow many <em>component batches</em> (“cells”).\nThe cumulative number of events in this chunk.\nThe cumulative number of events in this chunk for each …\nThe number of events in this chunk for the specified …\nReturns the number of instances of the single row within …\nNumber of rows.\nReturns the number of static events logged for an entity …\nReturns the number of temporal events logged for an entity …\nReturns the number of temporal events logged for an entity …\nThe core of this trait: get notified of changes happening …\nGet notified of changes happening in a <code>ChunkStore</code>, see …\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on their <code>RowId</code> range.\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on any of their time …\nA temporary migration kernel for blueprint data.\nThe returned range is guaranteed to never include …\nHow many component revisions to preserve on each timeline.\nDo not remove any data within these time ranges.\nRuns a <code>RangeQuery</code> filter on a <code>Chunk</code>.\nReturns the most-relevant chunk(s) for the given <code>RangeQuery</code>…\nReturns the most-relevant <em>temporal</em> chunk(s) for the given …\nRegisters a <code>PerStoreChunkSubscriber</code> type so it gets …\nRegisters a <code>ChunkStoreSubscriber</code> so it gets automatically …\nGiven a <code>ComponentColumnSelector</code>, returns the corresponding …\nGiven a set of <code>ColumnSelector</code>s, returns the corresponding …\nGiven a <code>TimeColumnSelector</code>, returns the corresponding …\nReturns the <code>RowId</code> of the single row within, on the given …\nReturns the <code>RowId</code>-range covered by this <code>Chunk</code>.\nComputes the <code>RowId</code> range covered by each individual …\nAll the <code>RowId</code> in this chunk.\nReturns the <code>RowId</code>s in their raw-est form: a tuple of …\nSlices the <code>Chunk</code> vertically.\nReturns <code>true</code> if both chunks share the same datatypes for …\nReturns <code>true</code> if both chunks share the same entity path.\nReturns <code>true</code> if both chunks contains the same set of …\nReturns an error if the Chunk’s invariants are not …\nReturns the full schema of the store.\nReturns the filtered schema for the given <code>QueryExpression</code>.\nThe specific <em>columns</em> to sample from the final view …\nOverwrites the end bound of the range.\nOverwrites the start bound of the range.\nRandomly shuffles the chunk using the given <code>seed</code>.\nSort the chunk, if needed.\nReturns a new <code>Chunk</code> that is sorted by <code>(&lt;timeline&gt;, RowId)</code>.\nSpecifies how null values should be filled in the returned …\nThe chunks that were merged into a new chunk.\nThe Arrow datatype of the stored column.\nWhat was the store’s generation when it sent that event?\nWhich <code>ChunkStore</code> sent this event?\nApplies a take kernel to the <code>Chunk</code> as a whole.\nWhat target threshold should the GC try to meet.\nHow long the garbage collection in allowed to run for.\nReturns the min and max times at which data was logged on …\nComputes the time range covered by each individual …\nThe timeline this column is associated with.\nThe name of the timeline.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nComputes the maximum value for each and every timeline …\nPrepare the <code>Chunk</code> for transport.\nPrepare the <code>Chunk</code> for transport.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nIncludes everything: arrow payloads, timelines, rowids, …\nThe specific index values used to sample <em>rows</em> from the …\nThe subset of the database that the query will run on: a …\nThe returned query is guaranteed to never include …\nReturns a version of us with a new <code>ChunkId</code>.\nPasses a reference to the downcasted per-store subscriber …\nPasses a mutable reference to the downcasted per-store …\nPasses a reference to the downcasted per-store subscriber …\nPasses a reference to the downcasted subscriber to the …\nPasses a mutable reference to the downcasted subscriber to …\nPasses a reference to the downcasted subscriber to the …\nClones the chunk into a new chunk where all <code>RowId</code>s are …\nAlways flushes ASAP.\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nAn array in the arrow columnar format\nThe key used to identify a Rerun <code>EntityPath</code> in chunk-level …\nThe key used to identify the size in bytes of the data, …\nThe key used to identify a Rerun <code>ChunkId</code> in chunk-level …\nThe marker used to identify whether a chunk is sorted in …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nHelper to incrementally build a <code>Chunk</code>.\nThe actual iterator implementation for …\nThe underlying item type for <code>ChunkComponentIter</code>.\nA <code>ChunkComponentSlicer</code> knows how to efficiently slice …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>crate::Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nThe fully-qualified name of a <code>Component</code>, e.g. …\nDefault configuration, applicable to most use cases.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::flush_num_bytes</code>.\nEnvironment variable to configure <code>Self::flush_num_rows</code>.\nEnvironment variable to configure <code>Self::flush_tick</code>.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nContains the error value\nContains the error value\nThe key used to identify the <code>crate::ArchetypeFieldName</code> in …\nThe key used to identify the <code>crate::ArchetypeName</code> in …\nThe key used to identify the kind of a Rerun column in …\nThe marker used to identify whether a column is sorted in …\nThe value used to identify a Rerun control column in …\nThe value used to identify a Rerun data column in …\nThe value used to identify a Rerun time column in …\nA query at a given time, for a given timeline.\nNever flushes unless manually told to (or hitting one the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nError spawning one of the background threads.\nHelper to incrementally build a <code>TimeColumn</code>.\nErrors when deserializing/parsing/reading a column of time …\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nReturns a copy of <code>self</code>, overriding existing fields with …\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nBuilds and returns the final <code>Chunk</code>.\nBuilds and returns the final <code>TimeColumn</code>.\nBuilds and returns the final <code>Chunk</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nSplit a chunk if it contains &gt;= rows than this threshold …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns a <em>shared</em> channel in which are sent the batched …")